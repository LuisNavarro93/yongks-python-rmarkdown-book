[
["index.html", "Python Book Chapter 1 Prerequisites", " Python Book Yong Keh Soon 2019-10-27 Chapter 1 Prerequisites "],
["environment-setup.html", "Chapter 2 Environment Setup 2.1 Notebook Setup 2.2 Most Common Libraries 2.3 Magic Functions 2.4 Package Management", " Chapter 2 Environment Setup 2.1 Notebook Setup 2.2 Most Common Libraries import numpy as np import pandas as pd import datetime as dt import matplotlib import matplotlib.pyplot as plt from plydata import define, query, select, group_by, summarize, arrange, head, rename import plotnine from plotnine import * 2.2.1 numpy large multi-dimensional array and matrices High level mathematical funcitons to operate on them Efficient array computation, modeled after matlab Support vectorized array math functions (built on C, hence faster than python for loop and list) 2.2.2 scipy Collection of mathematical algorithms and convenience functions built on the numpy extension Built uponi numpy 2.2.3 Pandas Data manipulation and analysis Offer data structures and operations for manipulating numerical tables and time series Good for analyzing tabular data Use for exploratory data analysis, data pre-processing, statistics and visualization Built upon numpy 2.2.4 scikit-learn Machine learning functions Built on top of scipy 2.2.5 matplotlib Data Visualization 2.3 Magic Functions IPython has a set of predefined ?magic functions? that you can call with a command line style syntax There are two types of magics: Line Magic : prefix with % Work much like OS command-line calls: they get as an argument the rest of the line, where arguments are passed without parentheses or quotes. Lines magics can return results and can be used in the right hand side of an assignment Cell Magic : prefix with %% They are functions that get as an argument not only the rest of the line, but also the lines below it in a separate argument. 2.3.1 List of Magic #%lsmagic 2.3.2 Line Magic Execute magic on each line 2.3.2.1 %timeit Run the line for default 7 times (use -r to specify) Each run has default 100,000,000 loops (use -n to specify) #%timeit -r 2 -n 100 3+1000/0.25*100 2.3.2.2 %matplotlib Output graph inline to frontend (Jupyter Notebook). Therefore is stored in the Notebook document #%matplotlib inline 2.3.2.3 %who Analyse variables of global scope Specify optional type to filter the variables a = 1 type(a) ## &lt;class &#39;int&#39;&gt; #%who int #%who 2.3.3 Cell Magic Execute magic on the entire cell 2.3.3.1 %%timeit Run the line for default 7 times (use -r to specify) Each run has default 100,000,000 loops (use -n to specify) #%%timeit -r 1 -n 10 import time for _ in range(100): time.sleep(0.01)# sleep for 0.01 seconds 2.4 Package Management 2.4.1 Conda 2.4.1.1 Conda Environment #!conda info 2.4.1.2 Package Version system(&quot;conda list&quot;) 2.4.1.3 Package Installation Conda is recommended distribution. To install from official conda channel: conda install &lt;package_name&gt; # always install latest conda install &lt;package_name=version_number&gt; # Example: Install From conda official channel conda install numpy conda install scipy conda install pandas conda install matpotlib conda install scikit-learn conda install seaborn conda install pip To install from conda-forge community channel: conda install -c conda-forge &lt;package_name&gt; conda install -c conda-forge &lt;package_name=version_number&gt; # Example: Install From conda community: conda install -c conda-forge plotnine 2.4.2 PIP PIP is python open repository (not part of conda). Use pip if the package is not available in conda. 2.4.2.1 Package Version #!pip list 2.4.2.2 Package Installation pip install &lt;package_name&gt; pip install plydata "],
["python-fundamental.html", "Chapter 3 Python Fundamental 3.1 Variable and Values 3.2 Assignment", " Chapter 3 Python Fundamental 3.1 Variable and Values Every varibales in python are objects Every variable assginment is reference based, that is, each object value is the reference to memory block of data In the below exmaple, a and b refer to the same memory location. a = 123 b = a print (&#39;Data of a =&#39;, a, &#39;\\nData of b =&#39;,b, &#39;\\nID of a = &#39;, id(a), &#39;\\nID of b = &#39;, id(b) ) ## Data of a = 123 ## Data of b = 123 ## ID of a = 140736815410528 ## ID of b = 140736815410528 Changing data value (using assignment) actually changed the reference value a = 123 b = a a = 456 # reassignemnt changed a memory reference # b memory reference not changed print (&#39;Data of a =&#39;,a, &#39;\\nData of b =&#39;,b, &#39;\\nID of a = &#39;, id(a), &#39;\\nID of b = &#39;, id(b) ) ## Data of a = 456 ## Data of b = 123 ## ID of a = 411155312 ## ID of b = 140736815410528 3.2 Assignment 3.2.1 Multiple Assignment Note that all object created using this method refer to the same memory location. x = y = &#39;same mem loc&#39; print (&#39;x = &#39;, x, &#39;\\ny = &#39;, y, &#39;\\nid(x) = &#39;, id(x), &#39;\\nid(y) = &#39;, id(y) ) ## x = same mem loc ## y = same mem loc ## id(x) = 411362032 ## id(y) = 411362032 3.2.2 Augmented Assignment x = 1 y = x + 1 y += 1 print (&#39;y = &#39;, y) ## y = 3 3.2.3 Unpacking Assingment x,y = 1,3 print (x,y) ## 1 3 "],
["built-in-data-types.html", "Chapter 4 Built-in Data Types 4.1 Numbers 4.2 String 4.3 Boolean 4.4 None", " Chapter 4 Built-in Data Types 4.1 Numbers 4.1.1 Integer n = 123 type (n) ## &lt;class &#39;int&#39;&gt; 4.1.2 Float f = 123.4 type (f) ## &lt;class &#39;float&#39;&gt; 4.1.3 Number Operators Division always return float print(4/2) # return int ## 2.0 type(4/2) ## &lt;class &#39;float&#39;&gt; Integer Division return truncated int or float print (8//3) # return int ## 2 print (8//3.2) # return float ## 2.0 Remainder return either float or integer print (8%3) # return int ## 2 print (8%3.2) # return float ## 1.5999999999999996 Power return int or float print (2**3) # return int ## 8 print (2.1**3) # return float ## 9.261000000000001 print (2**3.1) # return float ## 8.574187700290345 4.2 String 4.2.1 A List of Characters String is an object class ‘str’. It is an ordered collection of letters, an array of object type str 4.2.2 Load Library import string 4.2.3 Constructor 4.2.3.1 Classical Method class str(object='') my_string = str() ## empty string class str(object=b'', encoding='utf-8', errors='strict') my_string = str(&#39;abc&#39;) 4.2.3.2 Shortcut Method my_string = &#39;abc&#39; 4.2.3.3 Multiline Method my_string = &#39;&#39;&#39; This is me. Yong Keh Soon &#39;&#39;&#39; print(my_string) ## ## This is me. ## Yong Keh Soon my_string ## &#39;\\nThis is me.\\nYong Keh Soon\\n&#39; my_string = &#39;&#39;&#39; This is me. Yong Keh Soon &#39;&#39;&#39; print(my_string) ## ## This is me. ## Yong Keh Soon my_string ## &#39;\\nThis is me.\\nYong Keh Soon\\n&#39; s=&#39;abcde&#39; print( type(s) ) ## &lt;class &#39;str&#39;&gt; print( s[0], s[1], s[2] ) ## a b c print( len(s) ) ## 5 print(type(s[1])) ## &lt;class &#39;str&#39;&gt; 4.2.3.4 Immutability String is immuatable. Changing its content will result in error Changing the variable completley change the reference (for new object) s = &#39;abcde&#39; print (&#39;s : &#39;, id(s)) ## s : 411397904 s = &#39;efgh&#39; print (&#39;s : &#39;, id(s)) ## s : 411433144 ## s[1] = &#39;z&#39; # error 4.2.4 Class Constants Letters print( string.ascii_letters ) ## abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print( string.ascii_lowercase ) ## abcdefghijklmnopqrstuvwxyz print( string.ascii_uppercase ) ## ABCDEFGHIJKLMNOPQRSTUVWXYZ Digits string.digits ## &#39;0123456789&#39; White Spaces string.whitespace ## &#39; \\t\\n\\r\\x0b\\x0c&#39; 4.2.5 Instance Methods 4.2.5.1 Substitution : format() By Positional &#39;{} + {} + {}&#39;.format(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) # auto sequence ## &#39;a + b + c&#39; &#39;{0} + {1} = {2}&#39;.format(&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;) # manual sequence ## &#39;aa + bb = cc&#39; &#39;{2} + {1} = {2}&#39;.format(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) # manual sequence ## &#39;c + b = c&#39; By Name &#39;Coordinates: {latitude}, {longitude}&#39;.format(latitude=&#39;37.24N&#39;, longitude=&#39;-115.81W&#39;) ## constant ## &#39;Coordinates: 37.24N, -115.81W&#39; coord = {&#39;latitude&#39;: &#39;37.24N&#39;, &#39;longitude&#39;: &#39;-115.81W&#39;} ## dictionary key/value &#39;Coordinates: {latitude}, {longitude}&#39;.format(**coord) ## &#39;Coordinates: 37.24N, -115.81W&#39; Formatting Number Float &#39;{:+f}; {:+f}&#39;.format(3.14, -3.14) # show it always ## &#39;+3.140000; -3.140000&#39; &#39;{: f}; {: f}&#39;.format(3.14, -3.14) # show a space for positive numbers ## &#39; 3.140000; -3.140000&#39; &#39;Correct answers: {:.2f}&#39;.format(55676.345345) ## &#39;Correct answers: 55676.35&#39; Integer, Percentage &#39;{:,} {:,.2%}&#39;.format(1234567890, 55676.345345) ## &#39;1,234,567,890 5,567,634.53%&#39; Alignment &#39;{:&lt;30}&#39;.format(&#39;left aligned&#39;) ## &#39;left aligned &#39; &#39;{:&gt;30}&#39;.format(&#39;right aligned&#39;) ## &#39; right aligned&#39; &#39;{:^30}&#39;.format(&#39;centered&#39;) # use &#39;*&#39; as a fill char ## &#39; centered &#39; &#39;{:*^30}&#39;.format(&#39;centered&#39;) # use &#39;*&#39; as a fill char ## &#39;***********centered***********&#39; 4.2.5.2 Substitution : f-string my_name = &#39;Yong Keh Soon&#39; salary = 11123.346 f&#39;Hello, {my_name}, your salary is {salary:,.2f} !&#39; ## &#39;Hello, Yong Keh Soon, your salary is 11,123.35 !&#39; 4.2.5.3 Conversion: upper() lower() &#39;myEXEel.xls&#39;.upper() ## &#39;MYEXEEL.XLS&#39; &#39;myEXEel.xls&#39;.lower() ## &#39;myexeel.xls&#39; 4.2.5.4 find() pattern position string.find() return position of first occurance. -1 if not found s=&#39;I love karaoke, I know you love it oo&#39; print (s.find(&#39;lov&#39;)) ## 2 print (s.find(&#39;kemuning&#39;)) ## -1 4.2.5.5 strip() off blank spaces filename = &#39; myexce l. xls &#39; filename.strip() ## &#39;myexce l. xls&#39; 4.2.5.6 List Related: split() Splitting delimeter is specified. Observe the empty spaces were conserved in result array animals = &#39;a1,a2 ,a3, a4&#39; animals.split(&#39;,&#39;) ## [&#39;a1&#39;, &#39;a2 &#39;, &#39;a3&#39;, &#39; a4&#39;] 4.2.5.7 List Related: join() &#39;-&#39;.join([&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]) ## &#39;1-2-3-4&#39; 4.2.6 Operator 4.2.6.1 % Old Style Substitution https://docs.python.org/3/library/stdtypes.html#old-string-formatting name = &#39;Yong&#39; &#39;Hey %s, how are you !&#39; % name ## &#39;Hey Yong, how are you !&#39; name = &#39;Yong&#39; errno = 123 &#39;Hey %s, there is a %d error!&#39; % (name, errno) ## &#39;Hey Yong, there is a 123 error!&#39; 4.2.6.2 + Concatenation &#39;this is &#39; + &#39;awesome&#39; ## &#39;this is awesome&#39; 4.2.6.3 in matching For single string, partial match print( &#39;abc&#39; in &#39;123abcdefg&#39; ) ## True For list of strings, exact match. Workaround for partial match in list of strings, convert list to single string print( &#39;abc&#39; in [&#39;123&#39;,&#39;abcdefg&#39;] ) ## False print( &#39;abc&#39; in [&#39;abcdefg&#39;,&#39;123&#39;] ) ## False print( &#39;abc&#39; in [&#39;123&#39;,&#39;abc&#39;,&#39;def&#39;] ) ## True print( &#39;abc&#39; in str([&#39;123&#39;,&#39;abcdefg&#39;]) ) ## True 4.2.6.4 Comparitor a=&#39;abc&#39; b=&#39;abc&#39; print(a==b) ## True print(a!=b) ## False 4.2.7 Iterations string[start:end:step] # default step:1, start:0, end:last If step is negative, end value must be lower than start value s = &#39;abcdefghijk&#39; print (s[0]) # first later ## a print (s[:3]) # first 3 letters ## abc print (s[2:8:2]) # stepping ## ceg print (s[-1]) # last letter ## k print (s[-3:]) # last three letters ## ijk print (s[::-1]) # reverse everything ## kjihgfedcba print (s[8:2:-1]) ## ihgfed 4.3 Boolean b = False if (b): print (&#39;It is true&#39;) else: print (&#39;It is fake&#39;) ## It is fake 4.3.1 What is Considered False ? Everything below are false, anything else are true print (bool(0)) # zero ## False print (bool(None)) # none ## False print (bool(&#39;&#39;)) # empty string ## False print (bool([])) # empty list ## False print (bool(())) # empty tupple ## False print (bool(False)) # False ## False print (bool(2-2)) # expression that return any value above ## False 4.3.2 and operator and can return different data types If evaluated result is True, the last True Value is returned (because python need to evaluate up to the last value) If evaluated result is False, the first False Value will be returned (because python return it immediately when detecting False value) print (123 and 2 and 1) ## 1 print (123 and () and 2) ## () 4.3.3 not operator not (True or False) ## False 4.3.4 or operator or can return different data type If evaluated result is True, first True Value will be returned (right hand side value need not be evaluated) If evaluated result is False, last Fasle Value will be returned (need to evalute all items before concluding False) print (1 or 2) ## 1 print (0 or 1 or 1) ## 1 print (0 or () or []) ## [] 4.4 None 4.4.1 None is Object None is a Python object NonType Any operation to None object will result in error For array data with None elements, verification is required to check through iteration to determine if the item is not None. It is very computaionaly heavy type(None) ## &lt;class &#39;NoneType&#39;&gt; t = np.array([1,2,3,4,5]) t.dtype # its an integer ## dtype(&#39;int32&#39;) t = np.array([1, 2, 3, None, 4, 5]) t.dtype # it&#39;s an object ## dtype(&#39;O&#39;) 4.4.2 Comparing None Not Prefered Method null_variable = None print( null_variable == None ) ## True Prefered print( null_variable is None ) ## True print( null_variable is not None ) ## False "],
["built-in-data-structure.html", "Chapter 5 Built-In Data Structure 5.1 Tuple 5.2 List 5.3 Dictionaries 5.4 Sets 5.5 range", " Chapter 5 Built-In Data Structure 5.1 Tuple Tuple is an immutable list. Any attempt to change/update tuple will return error. It can contain different types of object. Benefits of tuple against List are: - Faster than list - Protects your data against accidental change - Can be used as key in dictionaries, list can’t 5.1.1 Assignment 5.1.1.1 (item1, item2, item3) This is a formal syntax for defining tuple, items inside ( ) notation t = (1,2,3,&#39;o&#39;,&#39;apple&#39;) t ## (1, 2, 3, &#39;o&#39;, &#39;apple&#39;) type(t) ## &lt;class &#39;tuple&#39;&gt; 5.1.1.2 item1, item2, item3 Without ( ) notation, it is also considered as tuple However, some functions may not consider this method 1,2,3,&#39;o&#39;,&#39;apple&#39; ## (1, 2, 3, &#39;o&#39;, &#39;apple&#39;) 5.1.2 Accessing print (t[1]) ## 2 print (type(t[1])) ## &lt;class &#39;int&#39;&gt; print (t[1:3]) ## (2, 3) type ([t[1:3]]) ## &lt;class &#39;list&#39;&gt; 5.1.3 Duplicating Tuple original = (1,2,3,4,5) copy_test = original print(original) ## (1, 2, 3, 4, 5) print(copy_test) ## (1, 2, 3, 4, 5) print(&#39;Original ID: &#39;, id(original)) ## Original ID: 411209400 print(&#39;Copy ID: &#39;, id(copy_test)) ## Copy ID: 411209400 5.2 List List is a collection of ordered items, where the items can be different data types You can pack list of items by placing them into [] List is mutable 5.2.1 Creating List 5.2.1.1 List is An Object test = [1,2,34,5] type(test) ## &lt;class &#39;list&#39;&gt; 5.2.1.2 Empty List empty = [] # literal assignment method empty = list() # constructor method print (empty) ## [] type(empty) ## &lt;class &#39;list&#39;&gt; 5.2.1.3 Literal Assignment Method Multiple data types is allowed in a list mylist = [123,&#39;abc&#39;,456] Creating List using Constructor Method - Note that list(string) will split the string into letters list(&#39;hello&#39;) ## [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;] Creating List using split() method - Split base on spaces (by default) to create a list item &#39;a bunch of words&#39;.split() ## [&#39;a&#39;, &#39;bunch&#39;, &#39;of&#39;, &#39;words&#39;] Split can also break into items base on specified delimter &#39;a1,a2,a3, a4&#39;.split(&#39;,&#39;) ## [&#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;, &#39; a4&#39;] 5.2.2 Accessing Items Access specific index number food = [&#39;bread&#39;, &#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;,&#39;jelly&#39;,&#39;cake&#39;] print (food[2]) # 3rd item ## rice print (food[-1]) # last item ## cake Access range of indexes print (food[:4]) # first 3 items ## [&#39;bread&#39;, &#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;] print (food[-3:]) # last 3 items ## [&#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;] print (food[1:5]) # item 1 to 4 ## [&#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;, &#39;jelly&#39;] print (food[5:2:-1]) # item 3 to 5, reverse order ## [&#39;cake&#39;, &#39;jelly&#39;, &#39;biscuit&#39;] print (food[::-1]) # reverse order ## [&#39;cake&#39;, &#39;jelly&#39;, &#39;biscuit&#39;, &#39;rice&#39;, &#39;noodle&#39;, &#39;bread&#39;] 5.2.3 Remove Item(s) Removal of non-existance item will result in error Search and remove first occurance of an item food = list([&#39;bread&#39;, &#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;,&#39;jelly&#39;,&#39;cake&#39;,&#39;noodle&#39;]) food.remove(&#39;noodle&#39;) print (food) ## [&#39;bread&#39;, &#39;rice&#39;, &#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;, &#39;noodle&#39;] Remove last item food.pop() ## &#39;noodle&#39; print (food) ## [&#39;bread&#39;, &#39;rice&#39;, &#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;] Remove item at specific position food.pop(1) # counter start from 0 ## &#39;rice&#39; print(food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;] food.remove(&#39;jelly&#39;) print(food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;cake&#39;] 5.2.4 Appending Item (s) Append One Item food.append(&#39;jelly&#39;) print (food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;cake&#39;, &#39;jelly&#39;] Append Multiple Items extend() will expand the list/tupple argument and append as multiple items food.extend([&#39;nand&#39;,&#39;puff&#39;]) print (food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;cake&#39;, &#39;jelly&#39;, &#39;nand&#39;, &#39;puff&#39;] 5.2.5 Concateneting Multiple Lists Concatenating Lists Although you can use ‘+’ operator, however ‘-’ operator is not supported [&#39;dog&#39;,&#39;cat&#39;,&#39;horse&#39;] + [&#39;elephant&#39;,&#39;tiger&#39;] + [&#39;sheep&#39;] ## [&#39;dog&#39;, &#39;cat&#39;, &#39;horse&#39;, &#39;elephant&#39;, &#39;tiger&#39;, &#39;sheep&#39;] 5.2.6 Other Methods Reversing the order of the items food.reverse() food ## [&#39;puff&#39;, &#39;nand&#39;, &#39;jelly&#39;, &#39;cake&#39;, &#39;biscuit&#39;, &#39;bread&#39;] Locating the Index Number of An Item food.index(&#39;biscuit&#39;) ## 4 Count occurance test = [&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] test.count(&#39;a&#39;) ## 3 Sorting The Order of Items food.sort() print (food) ## [&#39;biscuit&#39;, &#39;bread&#39;, &#39;cake&#39;, &#39;jelly&#39;, &#39;nand&#39;, &#39;puff&#39;] 5.2.7 List is Mutable The reference list variable won’t change after adding/removing its item food = [&#39;cake&#39;,&#39;jelly&#39;,&#39;roti&#39;,&#39;noodle&#39;] print (&#39;food : &#39;,id(food)) ## food : 774466056 food += [&#39;salad&#39;,&#39;chicken&#39;] print (&#39;food : &#39;,id(food)) ## food : 774466056 x = [1,2,3] y = [x,&#39;abc&#39;] print (y) ## [[1, 2, 3], &#39;abc&#39;] x[2] = &#39;k&#39; print (y) ## [[1, 2, &#39;k&#39;], &#39;abc&#39;] A function is actually an object, which reference never change, hence mutable def spam (elem, some_list=[&#39;a&#39;,&#39;b&#39;]): some_list.append(elem) return some_list print (spam(1,[&#39;x&#39;])) ## [&#39;x&#39;, 1] print (spam(2)) ## second parameter is not passed ## [&#39;a&#39;, &#39;b&#39;, 2] print (spam(3)) ## notice the default was remembered ## [&#39;a&#39;, &#39;b&#39;, 2, 3] 5.2.8 Duplicate or Reference Use = : It just copy the refernce. IDs are similar original = [1,2,3,4,5] copy_test = original print(&#39;Original ID: &#39;, id(original)) ## Original ID: 774464648 print(&#39;Copy ID: &#39;, id(copy_test)) ## Copy ID: 774464648 original[0]=999 ## change original print(original) ## [999, 2, 3, 4, 5] print(copy_test) ## copy affected ## [999, 2, 3, 4, 5] Duplicate A List Object with copy(). Resulting IDs are different original = [1,2,3,4,5] copy_test = original.copy() print(original) ## [1, 2, 3, 4, 5] print(copy_test) ## [1, 2, 3, 4, 5] print(&#39;Original ID: &#39;, id(original)) ## Original ID: 774520648 print(&#39;Copy ID: &#39;, id(copy_test)) ## Copy ID: 774553736 original[0] = 999 ## change original print(original) ## [999, 2, 3, 4, 5] print(copy_test) ## copy not affected ## [1, 2, 3, 4, 5] Passing To Function As Reference def func(x): print (x) print(&#39;ID in Function: &#39;, id(x)) x.append(6) ## modify the refrence my_list = [1,2,3,4,5] print(&#39;ID outside Function: &#39;, id(my_list)) ## ID outside Function: 774556360 func(my_list) ## call the function, pass the reference ## [1, 2, 3, 4, 5] ## ID in Function: 774556360 print(my_list) ## content was altered ## [1, 2, 3, 4, 5, 6] 5.2.9 List Is Iterable 5.2.9.1 For Loop s = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] for x in s: if &#39;abc&#39; in x: print (x) ## abc ## abcd new_list = [] old_list = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] for x in old_list: if &#39;abc&#39; in x: new_list.append(x) print( new_list ) ## [&#39;abc&#39;, &#39;abcd&#39;] new_list = [x for x in old_list if &#39;abc&#39; in x] print( new_list) ## [&#39;abc&#39;, &#39;abcd&#39;] 5.2.10 Conversion Convert mutable list to immutable tuple with tuple() original_tuple = tuple(original) print( id(original) ) ## 774520648 print(id(original_tuple)) ## 411209400 5.2.11 Built-In Functions Applicable To List Number of Elements len(food) ## 6 Max Value test = [1,2,3,5,5,3,2,1] m = max(test) test.index(m) ## only first occurance is found ## 3 5.3 Dictionaries Dictionary is a list of index-value items. 5.3.1 Creating dict Creating dict with literals Simple Dictionary animal_counts = { &#39;cats&#39; : 2, &#39;dogs&#39; : 5, &#39;horses&#39;:4} print (animal_counts) ## {&#39;cats&#39;: 2, &#39;dogs&#39;: 5, &#39;horses&#39;: 4} print( type(animal_counts) ) ## &lt;class &#39;dict&#39;&gt; Dictionary with list animal_names = {&#39;cats&#39;: [&#39;Walter&#39;,&#39;Ra&#39;], &#39;dogs&#39;: [&#39;Jim&#39;,&#39;Roy&#39;,&#39;John&#39;,&#39;Lucky&#39;,&#39;Row&#39;], &#39;horses&#39;: [&#39;Sax&#39;,&#39;Jack&#39;,&#39;Ann&#39;,&#39;Jeep&#39;] } animal_names ## {&#39;cats&#39;: [&#39;Walter&#39;, &#39;Ra&#39;], &#39;dogs&#39;: [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], &#39;horses&#39;: [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]} Creating dict with variables cat_names = [&#39;Walter&#39;,&#39;Ra&#39;,&#39;Jim&#39;] dog_names = [&#39;Jim&#39;,&#39;Roy&#39;,&#39;John&#39;,&#39;Lucky&#39;,&#39;Row&#39;] horse_names= [&#39;Sax&#39;,&#39;Jack&#39;,&#39;Ann&#39;,&#39;Jeep&#39;] animal_names = {&#39;cats&#39;: cat_names, &#39;dogs&#39;: dog_names, &#39;horses&#39;: horse_names} animal_names ## {&#39;cats&#39;: [&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;], &#39;dogs&#39;: [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], &#39;horses&#39;: [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]} 5.3.2 Accessing dict Find out the list of keys using keys() print (animal_names.keys()) ## dict_keys([&#39;cats&#39;, &#39;dogs&#39;, &#39;horses&#39;]) print (sorted(animal_names.keys())) ## [&#39;cats&#39;, &#39;dogs&#39;, &#39;horses&#39;] Find out the list of values using values() print (animal_names.values()) ## dict_values([[&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;], [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]]) print (sorted(animal_names.values())) ## [[&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;], [&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;]] Refer a dictionary item using index animal_names[&#39;dogs&#39;] ## [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;] Accessing non-existance key natively will return Error ##animal_count[&#39;cow&#39;] Accessing non-existance key with get() will return None print (animal_counts.get(&#39;cow&#39;)) ## None 5.3.3 Dict are Mutable Use [key] notation to update the content of element. However, if the key is non-existance, this will return error. animal_names[&#39;dogs&#39;] = [&#39;Ali&#39;,&#39;Abu&#39;,&#39;Bakar&#39;] animal_names ## {&#39;cats&#39;: [&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;], &#39;dogs&#39;: [&#39;Ali&#39;, &#39;Abu&#39;, &#39;Bakar&#39;], &#39;horses&#39;: [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]} Use clear() to erase all elements animal_names.clear() 5.4 Sets Set is unordered collection of unique items myset = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;} print (myset) # notice no repetition values ## {&#39;a&#39;, &#39;d&#39;, &#39;b&#39;, &#39;e&#39;, &#39;c&#39;, &#39;f&#39;, &#39;g&#39;} 5.4.1 Membership Test print (&#39;a&#39; in myset) # is member ? ## True print (&#39;f&#39; not in myset) # is not member ? ## False 5.4.2 Subset Test Subset Test : &lt;= Proper Subset Test : &lt; mysubset = {&#39;d&#39;,&#39;g&#39;} mysubset &lt;= myset ## True Proper Subset test that the master set contain at least one element which is not in the subset mysubset = {&#39;b&#39;,&#39;a&#39;,&#39;d&#39;,&#39;c&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;} print (&#39;Is Subset : &#39;, mysubset &lt;= myset) ## Is Subset : True print (&#39;Is Proper Subet : &#39;, mysubset &lt; myset) ## Is Proper Subet : False 5.4.3 Union using ‘|’ {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;} | {&#39;e&#39;,&#39;f&#39;} ## {&#39;a&#39;, &#39;f&#39;, &#39;b&#39;, &#39;e&#39;, &#39;c&#39;} 5.4.4 Intersection using ‘&amp;’ Any elments that exist in both left and right set {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;} &amp; {&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;} ## {&#39;c&#39;, &#39;d&#39;} 5.4.5 Difference using ‘-’ Anything in left that is not in right {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;} - {&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;} ## {&#39;b&#39;, &#39;a&#39;} 5.5 range range(X) generates sequence of integer object range (lower_bound, upper_bound, step_size) # lower bound is optional, default = 0 # upper bound is not included in result # step is optional, default = 1 Use list() to convert in order to view actual sequence of data r = range(10) # default lower bound =0, step =1 print (type (r)) ## &lt;class &#39;range&#39;&gt; print (r) ## range(0, 10) print (list(r)) ## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] More Examples print (list(range(2,8))) # step not specified, default 1 ## [2, 3, 4, 5, 6, 7] print (&#39;Odds Number : &#39; , list(range(1,10,2))) # generate odds number ## Odds Number : [1, 3, 5, 7, 9] "],
["control-and-loops.html", "Chapter 6 Control and Loops 6.1 If Statement 6.2 For Loops 6.3 Generators", " Chapter 6 Control and Loops 6.1 If Statement 6.1.1 Multiline If.. Statements price = 102 if price &lt;100: print (&#39;buy&#39;) elif price &lt; 110: print (&#39;hold&#39;) elif price &lt; 120: print (&#39;think about it&#39;) else: print (&#39;sell&#39;) ## hold print(&#39;end of programming&#39;) ## end of programming 6.1.2 Single Line If .. Statement price = 70 if price&lt;80: print(&#39;buy&#39;) ## buy price = 85 &#39;buy&#39; if (price&lt;80) else &#39;dont buy&#39; ## &#39;dont buy&#39; 6.2 For Loops 6.2.1 Loop thorugh ‘range’ for i in range (1,10,2): print (&#39;Odds Number : &#39;,i) ## Odds Number : 1 ## Odds Number : 3 ## Odds Number : 5 ## Odds Number : 7 ## Odds Number : 9 6.2.2 Loop through ‘list’ 6.2.2.1 Standard For Loop letters = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] for e in letters: print (&#39;Letter : &#39;,e) ## Letter : a ## Letter : b ## Letter : c ## Letter : d 6.2.2.2 List Comprehension Iterate through existing list, and build new list based on condition new_list = [expression(i) for i in old_list] s = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] [x.upper() for x in s] ## [&#39;ABC&#39;, &#39;ABCD&#39;, &#39;BCDE&#39;, &#39;BCDEE&#39;, &#39;CDEFG&#39;] Extend list comprehension can be extended with if condition** new_list = [expression(i) for i in old_list if filter(i)] old_list = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] matching = [ x.upper() for x in old_list if &#39;bcd&#39; in x ] print( matching ) ## [&#39;ABCD&#39;, &#39;BCDE&#39;, &#39;BCDEE&#39;] 6.2.3 Loop Through ‘Dictionary’ Looping through dict will picup key d = {&quot;x&quot;: 1, &quot;y&quot;: 2} for key in d: print (key, d[key]) ## x 1 ## y 2 6.3 Generators Generator is lazy, produce items only if asked for, hence more memory efficient Generator is function with ‘yield’ instead of ‘return’ Generator contains one or more yields statement When called, it returns an object (iterator) but does not start execution immediately Methods like iter() and next() are implemented automatically. So we can iterate through the items using next() Once the function yields, the function is paused and the control is transferred to the caller Local variables and their states are remembered between successive calls Finally, when the function terminates, StopIteration is raised automatically on further calls 6.3.1 Basic Generator Function Below example give clear understanding of how generator works def my_gen(): n = 1 print(&#39;This is printed first&#39;) # Generator function contains yield statements yield n n += 1 print(&#39;This is printed second&#39;) yield n n += 1 print(&#39;This is printed at last&#39;) yield n a = my_gen() type(a) ## &lt;class &#39;generator&#39;&gt; next(a) ## This is printed first ## 1 next(a) ## This is printed second ## 2 6.3.2 Useful Generator Fuction Generator is only useful when it uses for-loop - for-loop within generator - for-loop to iterate through a generator def rev_str(my_str): length = len(my_str) for i in range(length - 1,-1,-1): yield my_str[i] for c in rev_str(&quot;hello&quot;): print(c) ## o ## l ## l ## e ## h 6.3.3 Generator Expression Use () to create an annonymous generator function my_list = [1, 3, 6, 10] a = (x**2 for x in my_list) next(a) ## 1 next(a) ## 9 sum(a) # sum the power of 6,10 ## 136 6.3.4 Compare to Iterator Class class PowTwo: def __init__(self, max = 0): self.max = max def __iter__(self): self.n = 0 return self def __next__(self): if self.n &gt; self.max: raise StopIteration result = 2 ** self.n self.n += 1 return result Obviously, Generator is more concise and cleaner def PowTwoGen(max = 0): n = 0 while n &lt; max: yield 2 ** n n += 1 "],
["library-and-functions.html", "Chapter 7 Library and Functions 7.1 Package Source 7.2 Importing Library 7.3 Define Function", " Chapter 7 Library and Functions Library are group of functions 7.1 Package Source 7.1.1 Conda Package manager for any language Install binaries 7.1.2 PIP Package manager python only Compile from source Stands for Pip Installs Packages Python’s officially-sanctioned package manager, and is most commonly used to install packages published on the Python Package Index (PyPI) Both pip and PyPI are governed and supported by the Python Packaging Authority (PyPA). 7.2 Importing Library There are two methods to import library functions: Standalone Namespace - import &lt;libName&gt; # access function through: libName.functionName - import &lt;libName&gt; as &lt;shortName&gt; # access function through: shortName.functionName Global Namespace - from &lt;libName&gt; import * # all functions available at global namespace - from &lt;libName&gt; import &lt;functionName&gt; # access function through: functionName - from &lt;libName&gt; import &lt;functionName&gt; as &lt;shortFunctionName&gt; # access function through shortFunctionName 7.2.1 Import Entire Library 7.2.1.1 Import Into Standalone Namespace import math math.sqrt(9) ## 3.0 Use as for aliasing library name. This is useful if you have conflicting library name import math as m m.sqrt(9) ## 3.0 7.2.1.2 Import Into Global Name Space All functions in the library accessible through global namespace from &lt;libName&gt; import * 7.2.2 Import Specific Function from math import sqrt print (sqrt(9)) ## 3.0 Use as for aliasing function name from math import sqrt as sq print (sq(9)) ## 3.0 7.2.3 Machine Learning Packages alt text 7.3 Define Function 7.3.1 Function Arguments By default, arguments are assigned to function left to right def myfun(x,y): print (&#39;x:&#39;,x) print (&#39;y:&#39;,y) myfun(5,8) ## x: 5 ## y: 8 However, you can also specify the argument assigment during function call myfun (y=8,x=5) ## x: 5 ## y: 8 Function can have default argement value def myfun(x=1,y=1): # default argument value is 1 print (&#39;x:&#39;,x) print (&#39;y:&#39;,y) myfun(5) # pass only one argument ## x: 5 ## y: 1 7.3.2 List Within Function Consider a function is an object, its variable (some_list) is immutable and hence its reference won’t change, even data changes def spam (elem, some_list=[]): some_list.append(elem) return some_list print (spam(1)) ## [1] print (spam(2)) ## [1, 2] print (spam(3)) ## [1, 2, 3] 7.3.3 Return Statement def bigger(x,y): if (x&gt;y): return x else: return y print (bigger(5,8)) ## 8 7.3.4 No Return Statement if no return statement, python return None def dummy(): print (&#39;This is a dummy function, return no value&#39;) dummy() ## This is a dummy function, return no value 7.3.5 Return Multiple Value Multiple value is returned as tuple. Use multiple assignment to assign to multiple variable def minmax(x,y,z): return min(x,y,z), max(x,y,z) a,b = minmax(7,8,9) # multiple assignment c = minmax(7,8,9) # tuple print (a,b) ## 7 9 print (c) ## (7, 9) 7.3.6 Passing Function as Argument You can pass a function name as an argument to a function def myfun(x,y,f): f(x,y) myfun(&#39;hello&#39;,54,print) ## hello 54 7.3.7 Arguments args is a tuple 7.3.7.1 Example 1 Error example, too many parameters passed over to function 7.3.7.2 Example 2 First argument goes to x, remaining goes to args as tuple def myfun(x,*args): print (x) print (args) #tuple myfun(1,2,3,4,5,&#39;abc&#39;) ## 1 ## (2, 3, 4, 5, &#39;abc&#39;) 7.3.7.3 Example 3 First argument goes to x, second argument goest to y, remaining goes to args def myfun(x,y,*args): print (x) print (y) print (args) #tuple myfun(1,2,3) ## 1 ## 2 ## (3,) 7.3.7.4 Example 4 def myfun(x,*args, y=9): print (x) print (y) print (args) #tuple myfun(1,2,3,4,5) ## 1 ## 9 ## (2, 3, 4, 5) 7.3.7.5 Example 5 All goes to args def myfun(*args): print (args) #tuple myfun(1,2,3,4,5) ## (1, 2, 3, 4, 5) 7.3.7.6 Example 6 Empty args def myfun(x,y,*args): print (x) print (y) print (args) myfun(1,2) ## 1 ## 2 ## () 7.3.8 keyword arguments kwargs is a dictionary 7.3.8.1 Example 1 def foo(**kwargs): print(kwargs) foo(a=1,b=2,c=3) ## {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3} 7.3.8.2 Example 2 def foo(x,**kwargs): print(x) print(kwargs) foo(9,a=1,b=2,c=3) ## 9 ## {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3} foo(9) #empty dictionary ## 9 ## {} 7.3.8.3 Example 3 def foo(a,b,c,d=1): print(a) print(b) print(c) print(d) foo(**{&quot;a&quot;:2,&quot;b&quot;:3,&quot;c&quot;:4}) ## 2 ## 3 ## 4 ## 1 7.3.9 Mixing *args, **kwargs Always put args before kwargs 7.3.9.1 Example 1 def foo(x,y=1,**kwargs): print (x) print (y) print (kwargs) foo(1,2,c=3,d=4) ## 1 ## 2 ## {&#39;c&#39;: 3, &#39;d&#39;: 4} 7.3.9.2 Example 2 def foo(x,y=2,*args,**kwargs): print (x) print (y) print (args) print (kwargs) foo(1,2,3,4,5,c=6,d=7) ## 1 ## 2 ## (3, 4, 5) ## {&#39;c&#39;: 6, &#39;d&#39;: 7} "],
["object-oriented-programming.html", "Chapter 8 Object Oriented Programming 8.1 Defining Class 8.2 Object Class Assignment 8.3 Calling Method 8.4 Getting Property 8.5 Setting Property", " Chapter 8 Object Oriented Programming 8.1 Defining Class Every function within a class must have at least one parameter - self, accept it Use init as the constructor function. init is optional class Person: wallet = 0 # def __init__(self, myname,money=0): # constructor self.name = myname self.wallet=money def say_hi(self): print(&#39;Hello, my name is : &#39;, self.name) def say_bye(self): print(&#39;Goodbye&#39;, Person.ID) def take(self,amount): self.wallet+=amount def balance(self): print(&#39;Wallet Balance:&#39;,self.wallet) 8.2 Object Class Assignment #p = Person() ## this will fail, as the constructor expect a parameter p1 = Person(&#39;Yong&#39;) p2 = Person(&#39;Gan&#39;,200) 8.3 Calling Method p1.say_hi() ## Hello, my name is : Yong p1.balance() ## Wallet Balance: 0 p2.say_hi() ## Hello, my name is : Gan p2.balance() ## Wallet Balance: 200 8.4 Getting Property p1.wallet ## 0 p2.wallet ## 200 8.5 Setting Property p1.wallet = 900 p1.wallet ## 900 "],
["decorator.html", "Chapter 9 Decorator 9.1 Definition 9.2 Examples", " Chapter 9 Decorator 9.1 Definition Decorator is a function that accept callable as the only argument The main purpose of decarator is to enhance the program of the decorated function It returns a callable 9.2 Examples 9.2.1 Example 1 - Plain decorator function Many times, it is useful to register a function elsewhere - for example, registering a task in a task runner, or a functin with signal handler register is a decarator, it accept decorated as the only argument foo() and bar() are the decorated function of register registry = [] def register(decorated): registry.append(decorated) return decorated @register def foo(): return 3 @register def bar(): return 5 registry ## [&lt;function foo at 0x000000002E2EC378&gt;, &lt;function bar at 0x000000002E2E5A60&gt;] registry[0]() ## 3 registry[1]() ## 5 9.2.2 Example 2 - Decorator with Class Extending the use case above register is the decarator, it has only one argument class Registry(object): def __init__(self): self._functions = [] def register(self,decorated): self._functions.append(decorated) return decorated def run_all(self,*args,**kwargs): return_values = [] for func in self._functions: return_values.append(func(*args,**kwargs)) return return_values The decorator will decorate two functions, for both object a and b a = Registry() b = Registry() @a.register def foo(x=3): return x @b.register def bar(x=5): return x @a.register @b.register def bax(x=7): return x Observe the result print (a._functions) ## [&lt;function foo at 0x000000002E2F30D0&gt;, &lt;function bax at 0x000000002E2F31E0&gt;] print (b._functions) ## [&lt;function bar at 0x000000002E2F3158&gt;, &lt;function bax at 0x000000002E2F31E0&gt;] print (a.run_all()) ## [3, 7] print (b.run_all()) ## [5, 7] print ( a.run_all(x=9) ) ## [9, 9] print ( b.run_all(x=9) ) ## [9, 9] "],
["datetime-standard-library.html", "Chapter 10 datetime Standard Library 10.1 ISO8601 10.2 Module Import 10.3 Class 10.4 date 10.5 datetime 10.6 time 10.7 timedelta", " Chapter 10 datetime Standard Library This is a built-in library by Python. There is no need to install this library. 10.1 ISO8601 https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators 10.1.1 Date Time UTC: \"2007-04-05T14:30Z\" #notice Z GMT+8: \"2007-04-05T12:30+08:00 #notice +08:00 GMT+8: \"2007-04-05T12:30+0800 #notice +0800 GMT+8: \"2007-04-05T12:30+08 #notice +08 10.1.2 Date 2019-02-04 #notice no timezone available 10.2 Module Import from datetime import date # module for date object from datetime import time # module for time object from datetime import datetime # module for datetime object from datetime import timedelta 10.3 Class datetime library contain three class of objects: - date (year,month,day) - time (hour,minute,second) - datetime (year,month,day,hour,minute,second) - timedelta: duration between two datetime or date object 10.4 date 10.4.1 Constructor print( date(2000,1,1) ) ## 2000-01-01 print( date(year=2000,month=1,day=1) ) ## 2000-01-01 print( type(date(year=2000,month=1,day=1))) ## &lt;class &#39;datetime.date&#39;&gt; 10.4.2 Class Method 10.4.2.1 today This is local date (not UTC) date.today() ## datetime.date(2019, 10, 27) print( date.today() ) ## 2019-10-27 10.4.2.2 Convert From ISO fromisoformat strptime is not available for date conversion. It is only for datetime conversion date.fromisoformat(&#39;2011-11-11&#39;) ## datetime.date(2011, 11, 11) To convert non-iso format date string to date object, convert to datetime first, then to date 10.4.3 Instance Method 10.4.3.1 replace() Replace year/month/day with specified parameter, non specified params will remain unchange. Example below change only month. You can change year or day in combination print( date.today() ) ## 2019-10-27 print( date.today().replace(month=8) ) ## 2019-08-27 10.4.3.2 weekday(), isoweekday() For weekday(), Zero being Monday For isoweekday(), Zero being Sunday print( date.today().weekday() ) ## 6 print( date.today().isoweekday() ) ## 7 weekdays = [&#39;Mon&#39;,&#39;Tue&#39;,&#39;Wed&#39;,&#39;Thu&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;] wd = date.today().weekday() print( date.today(), &quot;is day&quot;, wd ,&quot;which is&quot;, weekdays[wd] ) ## 2019-10-27 is day 6 which is Sun 10.4.3.3 Formating with isoformat() isoformat() return ISO 8601 String (YYYY-MM-DD) date.today().isoformat() # return string ## &#39;2019-10-27&#39; 10.4.3.4 Formating with strftime For complete directive, see below: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior date.today().strftime(&quot;%m/%d&quot;) ## &#39;10/27&#39; 10.4.3.5 isocalendar() isocalendar return a 3-tuple, (ISO year, ISO week number, ISO weekday). date.today().isocalendar() ## return tuple ## (2019, 43, 7) 10.4.4 Attributes print( date.today().year ) ## 2019 print( date.today().month ) ## 10 print( date.today().day ) ## 27 10.5 datetime 10.5.1 Constructor print( datetime(2000,1,1,0,0,0)) ## 2000-01-01 00:00:00 print( datetime(year=2000,month=1,day=1,hour=23,minute=15,second=55)) ## 2000-01-01 23:15:55 print(type(datetime(2000,1,1,0,0,0))) ## &lt;class &#39;datetime.datetime&#39;&gt; 10.5.2 Class Method 10.5.2.1 now and today Both now() and today() return current local datetime datetime.now() ## datetime.datetime(2019, 10, 27, 20, 46, 3, 859541) datetime.today() ## datetime.datetime(2019, 10, 27, 20, 46, 3, 889051) 10.5.2.2 utcnow datetime.utcnow() ## datetime.datetime(2019, 10, 27, 12, 46, 3, 917664) 10.5.2.3 combine() date and time Apply datetime.combine() module method on both date and time object to get datetime now = datetime.now() datetime.combine(now.date(), now.time()) ## datetime.datetime(2019, 10, 27, 20, 46, 3, 946061) 10.5.2.4 Convert from String strptime() Use strptime to convert string into datetime object %I : 12-hour %H : 24-hour %M : Minute %p : AM/PM %y : 18 %Y : 2018 %b : Mar %m : month (1 to 12) %d : day datetime.strptime(&#39;2011-02-25&#39;,&#39;%Y-%m-%d&#39;) ## datetime.datetime(2011, 2, 25, 0, 0) datetime.strptime(&#39;9-01-18&#39;,&#39;%d-%m-%y&#39;) ## datetime.datetime(2018, 1, 9, 0, 0) datetime.strptime(&#39;09-Mar-2018&#39;,&#39;%d-%b-%Y&#39;) ## datetime.datetime(2018, 3, 9, 0, 0) datetime.strptime(&#39;2/5/2018 4:49 PM&#39;, &#39;%m/%d/%Y %I:%M %p&#39;) ## datetime.datetime(2018, 2, 5, 16, 49) 10.5.2.5 Convert from ISO fromisoformat fromisoformat() is intend to be reverse of isoformat() It actually not ISO compliance: when Z or +8 is included at the nd of the string, error occur s = datetime.now().isoformat() datetime.fromisoformat(&quot;2019-02-05T10:22:33&quot;) ## datetime.datetime(2019, 2, 5, 10, 22, 33) 10.5.3 Instance Method 10.5.3.1 weekday datetime.now().weekday() ## 6 10.5.3.2 replace datetime.now().replace(year=1999) ## datetime.datetime(1999, 10, 27, 20, 46, 4, 220117) 10.5.3.3 convert to .time() datetime.now().time() ## datetime.time(20, 46, 4, 257115) 10.5.3.4 Convert to .date() datetime.now().date() ## datetime.date(2019, 10, 27) 10.5.3.5 Convert to String str str( datetime.now() ) ## &#39;2019-10-27 20:46:04.360453&#39; Use strftime() datetime.now().strftime(&#39;%d-%b-%Y&#39;) ## &#39;27-Oct-2019&#39; datetime.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;) ## ISO 8601 UTC ## &#39;2019-10-27T12:46:04.423860Z&#39; Use isoformat() datetime.utcnow().isoformat() ## &#39;2019-10-27T12:46:04.462663&#39; 10.5.4 Attributes print( datetime.now().year ) ## 2019 print( datetime.now().month ) ## 10 print( datetime.now().day ) ## 27 print( datetime.now().hour ) ## 20 print( datetime.now().minute ) ## 46 10.6 time 10.6.1 Constructor print( time(2) ) #default single arugement, hour ## 02:00:00 print( time(2,15) ) #default two arguments, hour, minute ## 02:15:00 print( time(hour=2,minute=15,second=30) ) ## 02:15:30 10.6.2 Class Method 10.6.2.1 now() There is unfortunately no single function to extract the current time. Use time() function of an datetime object datetime.now().time() ## datetime.time(20, 46, 4, 678425) 10.6.3 Attributes print( datetime.now().time().hour ) ## 20 print( datetime.now().time().minute ) ## 46 print( datetime.now().time().second ) ## 4 10.7 timedelta years argument is not supported Apply timedelta on datetime object timedelta cannot be applied on time object , because timedelta potentially go beyond single day (24H) delt = timedelta(days=365,minutes=33,seconds=15) now = datetime.now() print (&#39;delt+now : &#39;, now+delt) ## delt+now : 2020-10-26 21:19:19.794923 "],
["getting-external-data.html", "Chapter 11 Getting External Data", " Chapter 11 Getting External Data "],
["plydata-dplyr-for-python.html", "Chapter 12 Plydata (dplyr for Python) 12.1 Sample Data 12.2 Column Manipulation 12.3 Sorting (arrange) 12.4 Grouping 12.5 Summarization", " Chapter 12 Plydata (dplyr for Python) 12.1 Sample Data n = 200 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,6, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,3, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) #value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2 #&#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 ## 0 C1 D3 G1 47.461818 13.845507 ## 1 C3 D3 G1 57.851960 18.249679 ## 2 C2 D3 G1 56.761068 18.958356 ## 3 C1 D2 G1 53.452352 16.370892 ## 4 C3 D4 G1 47.701397 21.305608 12.2 Column Manipulation 12.2.1 Copy Column mydf &gt;&gt; define(newcol = &#39;value1&#39;) # simple method for one column ## comp dept grp value1 value2 newcol ## 0 C1 D3 G1 47.461818 13.845507 47.461818 ## 1 C3 D3 G1 57.851960 18.249679 57.851960 ## 2 C2 D3 G1 56.761068 18.958356 56.761068 ## 3 C1 D2 G1 53.452352 16.370892 53.452352 ## 4 C3 D4 G1 47.701397 21.305608 47.701397 ## 5 C3 D4 G1 47.583339 19.810424 47.583339 ## 6 C1 D2 G1 42.826149 18.218150 42.826149 ## 7 C3 D5 G1 51.165399 19.736232 51.165399 ## 8 C2 D5 G2 58.373010 18.567652 58.373010 ## 9 C3 D1 G1 50.504349 19.409068 50.504349 ## 10 C1 D2 G2 48.140253 18.210037 48.140253 ## 11 C3 D4 G2 48.304805 18.827421 48.304805 ## 12 C2 D3 G1 46.783799 17.737684 46.783799 ## 13 C2 D2 G1 43.786075 21.539684 43.786075 ## 14 C2 D1 G2 43.553708 15.502670 43.553708 ## 15 C2 D3 G2 62.357496 20.025739 62.357496 ## 16 C1 D4 G2 50.609477 21.264097 50.609477 ## 17 C1 D5 G2 35.217150 23.080881 35.217150 ## 18 C2 D1 G1 46.666280 18.761898 46.666280 ## 19 C2 D2 G2 55.554769 20.976455 55.554769 ## 20 C1 D5 G1 57.548524 26.417773 57.548524 ## 21 C3 D4 G2 45.563816 19.550270 45.563816 ## 22 C2 D4 G1 53.669202 26.628202 53.669202 ## 23 C1 D2 G2 51.521987 18.689786 51.521987 ## 24 C3 D2 G1 47.377268 18.204102 47.377268 ## 25 C3 D3 G2 56.856876 18.876022 56.856876 ## 26 C3 D1 G2 54.378984 23.441349 54.378984 ## 27 C2 D5 G2 46.488539 19.202507 46.488539 ## 28 C3 D2 G2 61.413842 17.484570 61.413842 ## 29 C2 D3 G2 47.543632 17.442582 47.543632 ## .. ... ... .. ... ... ... ## 170 C3 D1 G2 49.702977 17.606117 49.702977 ## 171 C2 D2 G1 53.443798 20.605049 53.443798 ## 172 C1 D2 G1 53.107943 19.093542 53.107943 ## 173 C1 D1 G2 48.912265 12.884499 48.912265 ## 174 C3 D2 G1 47.626987 24.163592 47.626987 ## 175 C3 D5 G1 51.633946 19.969933 51.633946 ## 176 C2 D4 G2 42.819679 22.737967 42.819679 ## 177 C2 D5 G2 43.703259 14.289454 43.703259 ## 178 C1 D3 G2 46.667819 21.603592 46.667819 ## 179 C2 D3 G2 44.168352 16.011406 44.168352 ## 180 C3 D2 G1 56.363672 19.793246 56.363672 ## 181 C2 D3 G1 44.646413 22.059798 44.646413 ## 182 C3 D2 G2 44.402854 20.555367 44.402854 ## 183 C1 D5 G1 53.154225 12.398940 53.154225 ## 184 C1 D2 G1 48.877250 26.291165 48.877250 ## 185 C3 D1 G1 54.285144 18.677600 54.285144 ## 186 C3 D2 G1 58.754668 17.205096 58.754668 ## 187 C2 D2 G2 49.320844 22.745733 49.320844 ## 188 C1 D3 G1 48.233014 20.100482 48.233014 ## 189 C1 D3 G1 48.870201 14.745020 48.870201 ## 190 C1 D4 G1 44.626546 18.300560 44.626546 ## 191 C3 D3 G1 51.889545 19.110736 51.889545 ## 192 C2 D2 G2 55.866412 20.162240 55.866412 ## 193 C3 D2 G2 55.308910 18.537309 55.308910 ## 194 C3 D4 G2 55.387594 21.232466 55.387594 ## 195 C2 D2 G2 47.786870 19.229614 47.786870 ## 196 C1 D5 G1 51.142579 25.432365 51.142579 ## 197 C3 D5 G1 53.691527 17.048075 53.691527 ## 198 C2 D3 G2 43.699313 25.060097 43.699313 ## 199 C1 D4 G2 50.580205 24.799367 50.580205 ## ## [200 rows x 6 columns] mydf &gt;&gt; define ((&#39;newcol1&#39;, &#39;value1&#39;), newcol2=&#39;value2&#39;) # method for muiltiple new columns ## comp dept grp value1 value2 newcol1 newcol2 ## 0 C1 D3 G1 47.461818 13.845507 47.461818 13.845507 ## 1 C3 D3 G1 57.851960 18.249679 57.851960 18.249679 ## 2 C2 D3 G1 56.761068 18.958356 56.761068 18.958356 ## 3 C1 D2 G1 53.452352 16.370892 53.452352 16.370892 ## 4 C3 D4 G1 47.701397 21.305608 47.701397 21.305608 ## 5 C3 D4 G1 47.583339 19.810424 47.583339 19.810424 ## 6 C1 D2 G1 42.826149 18.218150 42.826149 18.218150 ## 7 C3 D5 G1 51.165399 19.736232 51.165399 19.736232 ## 8 C2 D5 G2 58.373010 18.567652 58.373010 18.567652 ## 9 C3 D1 G1 50.504349 19.409068 50.504349 19.409068 ## 10 C1 D2 G2 48.140253 18.210037 48.140253 18.210037 ## 11 C3 D4 G2 48.304805 18.827421 48.304805 18.827421 ## 12 C2 D3 G1 46.783799 17.737684 46.783799 17.737684 ## 13 C2 D2 G1 43.786075 21.539684 43.786075 21.539684 ## 14 C2 D1 G2 43.553708 15.502670 43.553708 15.502670 ## 15 C2 D3 G2 62.357496 20.025739 62.357496 20.025739 ## 16 C1 D4 G2 50.609477 21.264097 50.609477 21.264097 ## 17 C1 D5 G2 35.217150 23.080881 35.217150 23.080881 ## 18 C2 D1 G1 46.666280 18.761898 46.666280 18.761898 ## 19 C2 D2 G2 55.554769 20.976455 55.554769 20.976455 ## 20 C1 D5 G1 57.548524 26.417773 57.548524 26.417773 ## 21 C3 D4 G2 45.563816 19.550270 45.563816 19.550270 ## 22 C2 D4 G1 53.669202 26.628202 53.669202 26.628202 ## 23 C1 D2 G2 51.521987 18.689786 51.521987 18.689786 ## 24 C3 D2 G1 47.377268 18.204102 47.377268 18.204102 ## 25 C3 D3 G2 56.856876 18.876022 56.856876 18.876022 ## 26 C3 D1 G2 54.378984 23.441349 54.378984 23.441349 ## 27 C2 D5 G2 46.488539 19.202507 46.488539 19.202507 ## 28 C3 D2 G2 61.413842 17.484570 61.413842 17.484570 ## 29 C2 D3 G2 47.543632 17.442582 47.543632 17.442582 ## .. ... ... .. ... ... ... ... ## 170 C3 D1 G2 49.702977 17.606117 49.702977 17.606117 ## 171 C2 D2 G1 53.443798 20.605049 53.443798 20.605049 ## 172 C1 D2 G1 53.107943 19.093542 53.107943 19.093542 ## 173 C1 D1 G2 48.912265 12.884499 48.912265 12.884499 ## 174 C3 D2 G1 47.626987 24.163592 47.626987 24.163592 ## 175 C3 D5 G1 51.633946 19.969933 51.633946 19.969933 ## 176 C2 D4 G2 42.819679 22.737967 42.819679 22.737967 ## 177 C2 D5 G2 43.703259 14.289454 43.703259 14.289454 ## 178 C1 D3 G2 46.667819 21.603592 46.667819 21.603592 ## 179 C2 D3 G2 44.168352 16.011406 44.168352 16.011406 ## 180 C3 D2 G1 56.363672 19.793246 56.363672 19.793246 ## 181 C2 D3 G1 44.646413 22.059798 44.646413 22.059798 ## 182 C3 D2 G2 44.402854 20.555367 44.402854 20.555367 ## 183 C1 D5 G1 53.154225 12.398940 53.154225 12.398940 ## 184 C1 D2 G1 48.877250 26.291165 48.877250 26.291165 ## 185 C3 D1 G1 54.285144 18.677600 54.285144 18.677600 ## 186 C3 D2 G1 58.754668 17.205096 58.754668 17.205096 ## 187 C2 D2 G2 49.320844 22.745733 49.320844 22.745733 ## 188 C1 D3 G1 48.233014 20.100482 48.233014 20.100482 ## 189 C1 D3 G1 48.870201 14.745020 48.870201 14.745020 ## 190 C1 D4 G1 44.626546 18.300560 44.626546 18.300560 ## 191 C3 D3 G1 51.889545 19.110736 51.889545 19.110736 ## 192 C2 D2 G2 55.866412 20.162240 55.866412 20.162240 ## 193 C3 D2 G2 55.308910 18.537309 55.308910 18.537309 ## 194 C3 D4 G2 55.387594 21.232466 55.387594 21.232466 ## 195 C2 D2 G2 47.786870 19.229614 47.786870 19.229614 ## 196 C1 D5 G1 51.142579 25.432365 51.142579 25.432365 ## 197 C3 D5 G1 53.691527 17.048075 53.691527 17.048075 ## 198 C2 D3 G2 43.699313 25.060097 43.699313 25.060097 ## 199 C1 D4 G2 50.580205 24.799367 50.580205 24.799367 ## ## [200 rows x 7 columns] 12.2.2 New Column from existing Column Without specify the new column name, it will be derived from expression mydf &gt;&gt; define (&#39;value1*2&#39;) ## comp dept grp value1 value2 value1*2 ## 0 C1 D3 G1 47.461818 13.845507 94.923637 ## 1 C3 D3 G1 57.851960 18.249679 115.703920 ## 2 C2 D3 G1 56.761068 18.958356 113.522137 ## 3 C1 D2 G1 53.452352 16.370892 106.904704 ## 4 C3 D4 G1 47.701397 21.305608 95.402795 ## 5 C3 D4 G1 47.583339 19.810424 95.166679 ## 6 C1 D2 G1 42.826149 18.218150 85.652299 ## 7 C3 D5 G1 51.165399 19.736232 102.330798 ## 8 C2 D5 G2 58.373010 18.567652 116.746019 ## 9 C3 D1 G1 50.504349 19.409068 101.008698 ## 10 C1 D2 G2 48.140253 18.210037 96.280505 ## 11 C3 D4 G2 48.304805 18.827421 96.609610 ## 12 C2 D3 G1 46.783799 17.737684 93.567597 ## 13 C2 D2 G1 43.786075 21.539684 87.572150 ## 14 C2 D1 G2 43.553708 15.502670 87.107415 ## 15 C2 D3 G2 62.357496 20.025739 124.714992 ## 16 C1 D4 G2 50.609477 21.264097 101.218954 ## 17 C1 D5 G2 35.217150 23.080881 70.434300 ## 18 C2 D1 G1 46.666280 18.761898 93.332559 ## 19 C2 D2 G2 55.554769 20.976455 111.109539 ## 20 C1 D5 G1 57.548524 26.417773 115.097047 ## 21 C3 D4 G2 45.563816 19.550270 91.127632 ## 22 C2 D4 G1 53.669202 26.628202 107.338404 ## 23 C1 D2 G2 51.521987 18.689786 103.043973 ## 24 C3 D2 G1 47.377268 18.204102 94.754535 ## 25 C3 D3 G2 56.856876 18.876022 113.713752 ## 26 C3 D1 G2 54.378984 23.441349 108.757967 ## 27 C2 D5 G2 46.488539 19.202507 92.977078 ## 28 C3 D2 G2 61.413842 17.484570 122.827683 ## 29 C2 D3 G2 47.543632 17.442582 95.087264 ## .. ... ... .. ... ... ... ## 170 C3 D1 G2 49.702977 17.606117 99.405955 ## 171 C2 D2 G1 53.443798 20.605049 106.887595 ## 172 C1 D2 G1 53.107943 19.093542 106.215885 ## 173 C1 D1 G2 48.912265 12.884499 97.824530 ## 174 C3 D2 G1 47.626987 24.163592 95.253975 ## 175 C3 D5 G1 51.633946 19.969933 103.267892 ## 176 C2 D4 G2 42.819679 22.737967 85.639359 ## 177 C2 D5 G2 43.703259 14.289454 87.406518 ## 178 C1 D3 G2 46.667819 21.603592 93.335637 ## 179 C2 D3 G2 44.168352 16.011406 88.336704 ## 180 C3 D2 G1 56.363672 19.793246 112.727344 ## 181 C2 D3 G1 44.646413 22.059798 89.292827 ## 182 C3 D2 G2 44.402854 20.555367 88.805707 ## 183 C1 D5 G1 53.154225 12.398940 106.308450 ## 184 C1 D2 G1 48.877250 26.291165 97.754499 ## 185 C3 D1 G1 54.285144 18.677600 108.570288 ## 186 C3 D2 G1 58.754668 17.205096 117.509335 ## 187 C2 D2 G2 49.320844 22.745733 98.641688 ## 188 C1 D3 G1 48.233014 20.100482 96.466028 ## 189 C1 D3 G1 48.870201 14.745020 97.740402 ## 190 C1 D4 G1 44.626546 18.300560 89.253092 ## 191 C3 D3 G1 51.889545 19.110736 103.779090 ## 192 C2 D2 G2 55.866412 20.162240 111.732823 ## 193 C3 D2 G2 55.308910 18.537309 110.617820 ## 194 C3 D4 G2 55.387594 21.232466 110.775187 ## 195 C2 D2 G2 47.786870 19.229614 95.573741 ## 196 C1 D5 G1 51.142579 25.432365 102.285157 ## 197 C3 D5 G1 53.691527 17.048075 107.383053 ## 198 C2 D3 G2 43.699313 25.060097 87.398625 ## 199 C1 D4 G2 50.580205 24.799367 101.160410 ## ## [200 rows x 6 columns] Specify the new column name mydf &gt;&gt; define(value3 = &#39;value1*2&#39;) ## comp dept grp value1 value2 value3 ## 0 C1 D3 G1 47.461818 13.845507 94.923637 ## 1 C3 D3 G1 57.851960 18.249679 115.703920 ## 2 C2 D3 G1 56.761068 18.958356 113.522137 ## 3 C1 D2 G1 53.452352 16.370892 106.904704 ## 4 C3 D4 G1 47.701397 21.305608 95.402795 ## 5 C3 D4 G1 47.583339 19.810424 95.166679 ## 6 C1 D2 G1 42.826149 18.218150 85.652299 ## 7 C3 D5 G1 51.165399 19.736232 102.330798 ## 8 C2 D5 G2 58.373010 18.567652 116.746019 ## 9 C3 D1 G1 50.504349 19.409068 101.008698 ## 10 C1 D2 G2 48.140253 18.210037 96.280505 ## 11 C3 D4 G2 48.304805 18.827421 96.609610 ## 12 C2 D3 G1 46.783799 17.737684 93.567597 ## 13 C2 D2 G1 43.786075 21.539684 87.572150 ## 14 C2 D1 G2 43.553708 15.502670 87.107415 ## 15 C2 D3 G2 62.357496 20.025739 124.714992 ## 16 C1 D4 G2 50.609477 21.264097 101.218954 ## 17 C1 D5 G2 35.217150 23.080881 70.434300 ## 18 C2 D1 G1 46.666280 18.761898 93.332559 ## 19 C2 D2 G2 55.554769 20.976455 111.109539 ## 20 C1 D5 G1 57.548524 26.417773 115.097047 ## 21 C3 D4 G2 45.563816 19.550270 91.127632 ## 22 C2 D4 G1 53.669202 26.628202 107.338404 ## 23 C1 D2 G2 51.521987 18.689786 103.043973 ## 24 C3 D2 G1 47.377268 18.204102 94.754535 ## 25 C3 D3 G2 56.856876 18.876022 113.713752 ## 26 C3 D1 G2 54.378984 23.441349 108.757967 ## 27 C2 D5 G2 46.488539 19.202507 92.977078 ## 28 C3 D2 G2 61.413842 17.484570 122.827683 ## 29 C2 D3 G2 47.543632 17.442582 95.087264 ## .. ... ... .. ... ... ... ## 170 C3 D1 G2 49.702977 17.606117 99.405955 ## 171 C2 D2 G1 53.443798 20.605049 106.887595 ## 172 C1 D2 G1 53.107943 19.093542 106.215885 ## 173 C1 D1 G2 48.912265 12.884499 97.824530 ## 174 C3 D2 G1 47.626987 24.163592 95.253975 ## 175 C3 D5 G1 51.633946 19.969933 103.267892 ## 176 C2 D4 G2 42.819679 22.737967 85.639359 ## 177 C2 D5 G2 43.703259 14.289454 87.406518 ## 178 C1 D3 G2 46.667819 21.603592 93.335637 ## 179 C2 D3 G2 44.168352 16.011406 88.336704 ## 180 C3 D2 G1 56.363672 19.793246 112.727344 ## 181 C2 D3 G1 44.646413 22.059798 89.292827 ## 182 C3 D2 G2 44.402854 20.555367 88.805707 ## 183 C1 D5 G1 53.154225 12.398940 106.308450 ## 184 C1 D2 G1 48.877250 26.291165 97.754499 ## 185 C3 D1 G1 54.285144 18.677600 108.570288 ## 186 C3 D2 G1 58.754668 17.205096 117.509335 ## 187 C2 D2 G2 49.320844 22.745733 98.641688 ## 188 C1 D3 G1 48.233014 20.100482 96.466028 ## 189 C1 D3 G1 48.870201 14.745020 97.740402 ## 190 C1 D4 G1 44.626546 18.300560 89.253092 ## 191 C3 D3 G1 51.889545 19.110736 103.779090 ## 192 C2 D2 G2 55.866412 20.162240 111.732823 ## 193 C3 D2 G2 55.308910 18.537309 110.617820 ## 194 C3 D4 G2 55.387594 21.232466 110.775187 ## 195 C2 D2 G2 47.786870 19.229614 95.573741 ## 196 C1 D5 G1 51.142579 25.432365 102.285157 ## 197 C3 D5 G1 53.691527 17.048075 107.383053 ## 198 C2 D3 G2 43.699313 25.060097 87.398625 ## 199 C1 D4 G2 50.580205 24.799367 101.160410 ## ## [200 rows x 6 columns] Define multiple new columns in one go. Observe there are three ways to specify the new columns mydf &gt;&gt; define(&#39;value1*2&#39;,(&#39;newcol2&#39;,&#39;value2*2&#39;),newcol3=&#39;value2*3&#39;) ## comp dept grp ... value1*2 newcol2 newcol3 ## 0 C1 D3 G1 ... 94.923637 27.691015 41.536522 ## 1 C3 D3 G1 ... 115.703920 36.499359 54.749038 ## 2 C2 D3 G1 ... 113.522137 37.916713 56.875069 ## 3 C1 D2 G1 ... 106.904704 32.741785 49.112677 ## 4 C3 D4 G1 ... 95.402795 42.611216 63.916824 ## 5 C3 D4 G1 ... 95.166679 39.620849 59.431273 ## 6 C1 D2 G1 ... 85.652299 36.436300 54.654450 ## 7 C3 D5 G1 ... 102.330798 39.472464 59.208696 ## 8 C2 D5 G2 ... 116.746019 37.135305 55.702957 ## 9 C3 D1 G1 ... 101.008698 38.818135 58.227203 ## 10 C1 D2 G2 ... 96.280505 36.420073 54.630110 ## 11 C3 D4 G2 ... 96.609610 37.654842 56.482263 ## 12 C2 D3 G1 ... 93.567597 35.475367 53.213051 ## 13 C2 D2 G1 ... 87.572150 43.079369 64.619053 ## 14 C2 D1 G2 ... 87.107415 31.005340 46.508010 ## 15 C2 D3 G2 ... 124.714992 40.051479 60.077218 ## 16 C1 D4 G2 ... 101.218954 42.528193 63.792290 ## 17 C1 D5 G2 ... 70.434300 46.161762 69.242643 ## 18 C2 D1 G1 ... 93.332559 37.523796 56.285694 ## 19 C2 D2 G2 ... 111.109539 41.952910 62.929364 ## 20 C1 D5 G1 ... 115.097047 52.835547 79.253320 ## 21 C3 D4 G2 ... 91.127632 39.100540 58.650810 ## 22 C2 D4 G1 ... 107.338404 53.256403 79.884605 ## 23 C1 D2 G2 ... 103.043973 37.379572 56.069358 ## 24 C3 D2 G1 ... 94.754535 36.408204 54.612306 ## 25 C3 D3 G2 ... 113.713752 37.752045 56.628067 ## 26 C3 D1 G2 ... 108.757967 46.882699 70.324048 ## 27 C2 D5 G2 ... 92.977078 38.405014 57.607521 ## 28 C3 D2 G2 ... 122.827683 34.969141 52.453711 ## 29 C2 D3 G2 ... 95.087264 34.885163 52.327745 ## .. ... ... .. ... ... ... ... ## 170 C3 D1 G2 ... 99.405955 35.212233 52.818350 ## 171 C2 D2 G1 ... 106.887595 41.210097 61.815146 ## 172 C1 D2 G1 ... 106.215885 38.187084 57.280625 ## 173 C1 D1 G2 ... 97.824530 25.768998 38.653498 ## 174 C3 D2 G1 ... 95.253975 48.327184 72.490776 ## 175 C3 D5 G1 ... 103.267892 39.939865 59.909798 ## 176 C2 D4 G2 ... 85.639359 45.475934 68.213901 ## 177 C2 D5 G2 ... 87.406518 28.578908 42.868361 ## 178 C1 D3 G2 ... 93.335637 43.207183 64.810775 ## 179 C2 D3 G2 ... 88.336704 32.022812 48.034219 ## 180 C3 D2 G1 ... 112.727344 39.586492 59.379739 ## 181 C2 D3 G1 ... 89.292827 44.119597 66.179395 ## 182 C3 D2 G2 ... 88.805707 41.110733 61.666100 ## 183 C1 D5 G1 ... 106.308450 24.797880 37.196820 ## 184 C1 D2 G1 ... 97.754499 52.582331 78.873496 ## 185 C3 D1 G1 ... 108.570288 37.355199 56.032799 ## 186 C3 D2 G1 ... 117.509335 34.410191 51.615287 ## 187 C2 D2 G2 ... 98.641688 45.491467 68.237200 ## 188 C1 D3 G1 ... 96.466028 40.200963 60.301445 ## 189 C1 D3 G1 ... 97.740402 29.490041 44.235061 ## 190 C1 D4 G1 ... 89.253092 36.601119 54.901679 ## 191 C3 D3 G1 ... 103.779090 38.221471 57.332207 ## 192 C2 D2 G2 ... 111.732823 40.324480 60.486720 ## 193 C3 D2 G2 ... 110.617820 37.074618 55.611927 ## 194 C3 D4 G2 ... 110.775187 42.464932 63.697397 ## 195 C2 D2 G2 ... 95.573741 38.459229 57.688843 ## 196 C1 D5 G1 ... 102.285157 50.864730 76.297095 ## 197 C3 D5 G1 ... 107.383053 34.096150 51.144225 ## 198 C2 D3 G2 ... 87.398625 50.120194 75.180291 ## 199 C1 D4 G2 ... 101.160410 49.598734 74.398102 ## ## [200 rows x 8 columns] 12.2.3 Select Column(s) mydf2 = mydf &gt;&gt; define(newcol1=&#39;value1&#39;,newcol2=&#39;value2&#39;) mydf2.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 200 entries, 0 to 199 ## Data columns (total 7 columns): ## comp 200 non-null object ## dept 200 non-null object ## grp 200 non-null object ## value1 200 non-null float64 ## value2 200 non-null float64 ## newcol1 200 non-null float64 ## newcol2 200 non-null float64 ## dtypes: float64(4), object(3) ## memory usage: 11.0+ KB 12.2.3.1 By Column Names Exact Coumn Name mydf2 &gt;&gt; select (&#39;comp&#39;,&#39;dept&#39;,&#39;value1&#39;) ## comp dept value1 ## 0 C1 D3 47.461818 ## 1 C3 D3 57.851960 ## 2 C2 D3 56.761068 ## 3 C1 D2 53.452352 ## 4 C3 D4 47.701397 ## 5 C3 D4 47.583339 ## 6 C1 D2 42.826149 ## 7 C3 D5 51.165399 ## 8 C2 D5 58.373010 ## 9 C3 D1 50.504349 ## 10 C1 D2 48.140253 ## 11 C3 D4 48.304805 ## 12 C2 D3 46.783799 ## 13 C2 D2 43.786075 ## 14 C2 D1 43.553708 ## 15 C2 D3 62.357496 ## 16 C1 D4 50.609477 ## 17 C1 D5 35.217150 ## 18 C2 D1 46.666280 ## 19 C2 D2 55.554769 ## 20 C1 D5 57.548524 ## 21 C3 D4 45.563816 ## 22 C2 D4 53.669202 ## 23 C1 D2 51.521987 ## 24 C3 D2 47.377268 ## 25 C3 D3 56.856876 ## 26 C3 D1 54.378984 ## 27 C2 D5 46.488539 ## 28 C3 D2 61.413842 ## 29 C2 D3 47.543632 ## .. ... ... ... ## 170 C3 D1 49.702977 ## 171 C2 D2 53.443798 ## 172 C1 D2 53.107943 ## 173 C1 D1 48.912265 ## 174 C3 D2 47.626987 ## 175 C3 D5 51.633946 ## 176 C2 D4 42.819679 ## 177 C2 D5 43.703259 ## 178 C1 D3 46.667819 ## 179 C2 D3 44.168352 ## 180 C3 D2 56.363672 ## 181 C2 D3 44.646413 ## 182 C3 D2 44.402854 ## 183 C1 D5 53.154225 ## 184 C1 D2 48.877250 ## 185 C3 D1 54.285144 ## 186 C3 D2 58.754668 ## 187 C2 D2 49.320844 ## 188 C1 D3 48.233014 ## 189 C1 D3 48.870201 ## 190 C1 D4 44.626546 ## 191 C3 D3 51.889545 ## 192 C2 D2 55.866412 ## 193 C3 D2 55.308910 ## 194 C3 D4 55.387594 ## 195 C2 D2 47.786870 ## 196 C1 D5 51.142579 ## 197 C3 D5 53.691527 ## 198 C2 D3 43.699313 ## 199 C1 D4 50.580205 ## ## [200 rows x 3 columns] Column Name Starts With … mydf2 &gt;&gt; select (&#39;comp&#39;, startswith=&#39;val&#39;) ## comp value1 value2 ## 0 C1 47.461818 13.845507 ## 1 C3 57.851960 18.249679 ## 2 C2 56.761068 18.958356 ## 3 C1 53.452352 16.370892 ## 4 C3 47.701397 21.305608 ## 5 C3 47.583339 19.810424 ## 6 C1 42.826149 18.218150 ## 7 C3 51.165399 19.736232 ## 8 C2 58.373010 18.567652 ## 9 C3 50.504349 19.409068 ## 10 C1 48.140253 18.210037 ## 11 C3 48.304805 18.827421 ## 12 C2 46.783799 17.737684 ## 13 C2 43.786075 21.539684 ## 14 C2 43.553708 15.502670 ## 15 C2 62.357496 20.025739 ## 16 C1 50.609477 21.264097 ## 17 C1 35.217150 23.080881 ## 18 C2 46.666280 18.761898 ## 19 C2 55.554769 20.976455 ## 20 C1 57.548524 26.417773 ## 21 C3 45.563816 19.550270 ## 22 C2 53.669202 26.628202 ## 23 C1 51.521987 18.689786 ## 24 C3 47.377268 18.204102 ## 25 C3 56.856876 18.876022 ## 26 C3 54.378984 23.441349 ## 27 C2 46.488539 19.202507 ## 28 C3 61.413842 17.484570 ## 29 C2 47.543632 17.442582 ## .. ... ... ... ## 170 C3 49.702977 17.606117 ## 171 C2 53.443798 20.605049 ## 172 C1 53.107943 19.093542 ## 173 C1 48.912265 12.884499 ## 174 C3 47.626987 24.163592 ## 175 C3 51.633946 19.969933 ## 176 C2 42.819679 22.737967 ## 177 C2 43.703259 14.289454 ## 178 C1 46.667819 21.603592 ## 179 C2 44.168352 16.011406 ## 180 C3 56.363672 19.793246 ## 181 C2 44.646413 22.059798 ## 182 C3 44.402854 20.555367 ## 183 C1 53.154225 12.398940 ## 184 C1 48.877250 26.291165 ## 185 C3 54.285144 18.677600 ## 186 C3 58.754668 17.205096 ## 187 C2 49.320844 22.745733 ## 188 C1 48.233014 20.100482 ## 189 C1 48.870201 14.745020 ## 190 C1 44.626546 18.300560 ## 191 C3 51.889545 19.110736 ## 192 C2 55.866412 20.162240 ## 193 C3 55.308910 18.537309 ## 194 C3 55.387594 21.232466 ## 195 C2 47.786870 19.229614 ## 196 C1 51.142579 25.432365 ## 197 C3 53.691527 17.048075 ## 198 C2 43.699313 25.060097 ## 199 C1 50.580205 24.799367 ## ## [200 rows x 3 columns] Column Name Ends With … mydf2 &gt;&gt; select (&#39;comp&#39;,endswith=(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)) ## comp value1 value2 newcol1 newcol2 ## 0 C1 47.461818 13.845507 47.461818 13.845507 ## 1 C3 57.851960 18.249679 57.851960 18.249679 ## 2 C2 56.761068 18.958356 56.761068 18.958356 ## 3 C1 53.452352 16.370892 53.452352 16.370892 ## 4 C3 47.701397 21.305608 47.701397 21.305608 ## 5 C3 47.583339 19.810424 47.583339 19.810424 ## 6 C1 42.826149 18.218150 42.826149 18.218150 ## 7 C3 51.165399 19.736232 51.165399 19.736232 ## 8 C2 58.373010 18.567652 58.373010 18.567652 ## 9 C3 50.504349 19.409068 50.504349 19.409068 ## 10 C1 48.140253 18.210037 48.140253 18.210037 ## 11 C3 48.304805 18.827421 48.304805 18.827421 ## 12 C2 46.783799 17.737684 46.783799 17.737684 ## 13 C2 43.786075 21.539684 43.786075 21.539684 ## 14 C2 43.553708 15.502670 43.553708 15.502670 ## 15 C2 62.357496 20.025739 62.357496 20.025739 ## 16 C1 50.609477 21.264097 50.609477 21.264097 ## 17 C1 35.217150 23.080881 35.217150 23.080881 ## 18 C2 46.666280 18.761898 46.666280 18.761898 ## 19 C2 55.554769 20.976455 55.554769 20.976455 ## 20 C1 57.548524 26.417773 57.548524 26.417773 ## 21 C3 45.563816 19.550270 45.563816 19.550270 ## 22 C2 53.669202 26.628202 53.669202 26.628202 ## 23 C1 51.521987 18.689786 51.521987 18.689786 ## 24 C3 47.377268 18.204102 47.377268 18.204102 ## 25 C3 56.856876 18.876022 56.856876 18.876022 ## 26 C3 54.378984 23.441349 54.378984 23.441349 ## 27 C2 46.488539 19.202507 46.488539 19.202507 ## 28 C3 61.413842 17.484570 61.413842 17.484570 ## 29 C2 47.543632 17.442582 47.543632 17.442582 ## .. ... ... ... ... ... ## 170 C3 49.702977 17.606117 49.702977 17.606117 ## 171 C2 53.443798 20.605049 53.443798 20.605049 ## 172 C1 53.107943 19.093542 53.107943 19.093542 ## 173 C1 48.912265 12.884499 48.912265 12.884499 ## 174 C3 47.626987 24.163592 47.626987 24.163592 ## 175 C3 51.633946 19.969933 51.633946 19.969933 ## 176 C2 42.819679 22.737967 42.819679 22.737967 ## 177 C2 43.703259 14.289454 43.703259 14.289454 ## 178 C1 46.667819 21.603592 46.667819 21.603592 ## 179 C2 44.168352 16.011406 44.168352 16.011406 ## 180 C3 56.363672 19.793246 56.363672 19.793246 ## 181 C2 44.646413 22.059798 44.646413 22.059798 ## 182 C3 44.402854 20.555367 44.402854 20.555367 ## 183 C1 53.154225 12.398940 53.154225 12.398940 ## 184 C1 48.877250 26.291165 48.877250 26.291165 ## 185 C3 54.285144 18.677600 54.285144 18.677600 ## 186 C3 58.754668 17.205096 58.754668 17.205096 ## 187 C2 49.320844 22.745733 49.320844 22.745733 ## 188 C1 48.233014 20.100482 48.233014 20.100482 ## 189 C1 48.870201 14.745020 48.870201 14.745020 ## 190 C1 44.626546 18.300560 44.626546 18.300560 ## 191 C3 51.889545 19.110736 51.889545 19.110736 ## 192 C2 55.866412 20.162240 55.866412 20.162240 ## 193 C3 55.308910 18.537309 55.308910 18.537309 ## 194 C3 55.387594 21.232466 55.387594 21.232466 ## 195 C2 47.786870 19.229614 47.786870 19.229614 ## 196 C1 51.142579 25.432365 51.142579 25.432365 ## 197 C3 53.691527 17.048075 53.691527 17.048075 ## 198 C2 43.699313 25.060097 43.699313 25.060097 ## 199 C1 50.580205 24.799367 50.580205 24.799367 ## ## [200 rows x 5 columns] Column Name Contains … mydf2 &gt;&gt; select(&#39;comp&#39;, contains=(&#39;col&#39;,&#39;val&#39;)) ## comp value1 value2 newcol1 newcol2 ## 0 C1 47.461818 13.845507 47.461818 13.845507 ## 1 C3 57.851960 18.249679 57.851960 18.249679 ## 2 C2 56.761068 18.958356 56.761068 18.958356 ## 3 C1 53.452352 16.370892 53.452352 16.370892 ## 4 C3 47.701397 21.305608 47.701397 21.305608 ## 5 C3 47.583339 19.810424 47.583339 19.810424 ## 6 C1 42.826149 18.218150 42.826149 18.218150 ## 7 C3 51.165399 19.736232 51.165399 19.736232 ## 8 C2 58.373010 18.567652 58.373010 18.567652 ## 9 C3 50.504349 19.409068 50.504349 19.409068 ## 10 C1 48.140253 18.210037 48.140253 18.210037 ## 11 C3 48.304805 18.827421 48.304805 18.827421 ## 12 C2 46.783799 17.737684 46.783799 17.737684 ## 13 C2 43.786075 21.539684 43.786075 21.539684 ## 14 C2 43.553708 15.502670 43.553708 15.502670 ## 15 C2 62.357496 20.025739 62.357496 20.025739 ## 16 C1 50.609477 21.264097 50.609477 21.264097 ## 17 C1 35.217150 23.080881 35.217150 23.080881 ## 18 C2 46.666280 18.761898 46.666280 18.761898 ## 19 C2 55.554769 20.976455 55.554769 20.976455 ## 20 C1 57.548524 26.417773 57.548524 26.417773 ## 21 C3 45.563816 19.550270 45.563816 19.550270 ## 22 C2 53.669202 26.628202 53.669202 26.628202 ## 23 C1 51.521987 18.689786 51.521987 18.689786 ## 24 C3 47.377268 18.204102 47.377268 18.204102 ## 25 C3 56.856876 18.876022 56.856876 18.876022 ## 26 C3 54.378984 23.441349 54.378984 23.441349 ## 27 C2 46.488539 19.202507 46.488539 19.202507 ## 28 C3 61.413842 17.484570 61.413842 17.484570 ## 29 C2 47.543632 17.442582 47.543632 17.442582 ## .. ... ... ... ... ... ## 170 C3 49.702977 17.606117 49.702977 17.606117 ## 171 C2 53.443798 20.605049 53.443798 20.605049 ## 172 C1 53.107943 19.093542 53.107943 19.093542 ## 173 C1 48.912265 12.884499 48.912265 12.884499 ## 174 C3 47.626987 24.163592 47.626987 24.163592 ## 175 C3 51.633946 19.969933 51.633946 19.969933 ## 176 C2 42.819679 22.737967 42.819679 22.737967 ## 177 C2 43.703259 14.289454 43.703259 14.289454 ## 178 C1 46.667819 21.603592 46.667819 21.603592 ## 179 C2 44.168352 16.011406 44.168352 16.011406 ## 180 C3 56.363672 19.793246 56.363672 19.793246 ## 181 C2 44.646413 22.059798 44.646413 22.059798 ## 182 C3 44.402854 20.555367 44.402854 20.555367 ## 183 C1 53.154225 12.398940 53.154225 12.398940 ## 184 C1 48.877250 26.291165 48.877250 26.291165 ## 185 C3 54.285144 18.677600 54.285144 18.677600 ## 186 C3 58.754668 17.205096 58.754668 17.205096 ## 187 C2 49.320844 22.745733 49.320844 22.745733 ## 188 C1 48.233014 20.100482 48.233014 20.100482 ## 189 C1 48.870201 14.745020 48.870201 14.745020 ## 190 C1 44.626546 18.300560 44.626546 18.300560 ## 191 C3 51.889545 19.110736 51.889545 19.110736 ## 192 C2 55.866412 20.162240 55.866412 20.162240 ## 193 C3 55.308910 18.537309 55.308910 18.537309 ## 194 C3 55.387594 21.232466 55.387594 21.232466 ## 195 C2 47.786870 19.229614 47.786870 19.229614 ## 196 C1 51.142579 25.432365 51.142579 25.432365 ## 197 C3 53.691527 17.048075 53.691527 17.048075 ## 198 C2 43.699313 25.060097 43.699313 25.060097 ## 199 C1 50.580205 24.799367 50.580205 24.799367 ## ## [200 rows x 5 columns] 12.2.3.2 Specify Column Range mydf2 &gt;&gt; select (&#39;comp&#39;, slice(&#39;value1&#39;,&#39;newcol2&#39;)) ## comp value1 value2 newcol1 newcol2 ## 0 C1 47.461818 13.845507 47.461818 13.845507 ## 1 C3 57.851960 18.249679 57.851960 18.249679 ## 2 C2 56.761068 18.958356 56.761068 18.958356 ## 3 C1 53.452352 16.370892 53.452352 16.370892 ## 4 C3 47.701397 21.305608 47.701397 21.305608 ## 5 C3 47.583339 19.810424 47.583339 19.810424 ## 6 C1 42.826149 18.218150 42.826149 18.218150 ## 7 C3 51.165399 19.736232 51.165399 19.736232 ## 8 C2 58.373010 18.567652 58.373010 18.567652 ## 9 C3 50.504349 19.409068 50.504349 19.409068 ## 10 C1 48.140253 18.210037 48.140253 18.210037 ## 11 C3 48.304805 18.827421 48.304805 18.827421 ## 12 C2 46.783799 17.737684 46.783799 17.737684 ## 13 C2 43.786075 21.539684 43.786075 21.539684 ## 14 C2 43.553708 15.502670 43.553708 15.502670 ## 15 C2 62.357496 20.025739 62.357496 20.025739 ## 16 C1 50.609477 21.264097 50.609477 21.264097 ## 17 C1 35.217150 23.080881 35.217150 23.080881 ## 18 C2 46.666280 18.761898 46.666280 18.761898 ## 19 C2 55.554769 20.976455 55.554769 20.976455 ## 20 C1 57.548524 26.417773 57.548524 26.417773 ## 21 C3 45.563816 19.550270 45.563816 19.550270 ## 22 C2 53.669202 26.628202 53.669202 26.628202 ## 23 C1 51.521987 18.689786 51.521987 18.689786 ## 24 C3 47.377268 18.204102 47.377268 18.204102 ## 25 C3 56.856876 18.876022 56.856876 18.876022 ## 26 C3 54.378984 23.441349 54.378984 23.441349 ## 27 C2 46.488539 19.202507 46.488539 19.202507 ## 28 C3 61.413842 17.484570 61.413842 17.484570 ## 29 C2 47.543632 17.442582 47.543632 17.442582 ## .. ... ... ... ... ... ## 170 C3 49.702977 17.606117 49.702977 17.606117 ## 171 C2 53.443798 20.605049 53.443798 20.605049 ## 172 C1 53.107943 19.093542 53.107943 19.093542 ## 173 C1 48.912265 12.884499 48.912265 12.884499 ## 174 C3 47.626987 24.163592 47.626987 24.163592 ## 175 C3 51.633946 19.969933 51.633946 19.969933 ## 176 C2 42.819679 22.737967 42.819679 22.737967 ## 177 C2 43.703259 14.289454 43.703259 14.289454 ## 178 C1 46.667819 21.603592 46.667819 21.603592 ## 179 C2 44.168352 16.011406 44.168352 16.011406 ## 180 C3 56.363672 19.793246 56.363672 19.793246 ## 181 C2 44.646413 22.059798 44.646413 22.059798 ## 182 C3 44.402854 20.555367 44.402854 20.555367 ## 183 C1 53.154225 12.398940 53.154225 12.398940 ## 184 C1 48.877250 26.291165 48.877250 26.291165 ## 185 C3 54.285144 18.677600 54.285144 18.677600 ## 186 C3 58.754668 17.205096 58.754668 17.205096 ## 187 C2 49.320844 22.745733 49.320844 22.745733 ## 188 C1 48.233014 20.100482 48.233014 20.100482 ## 189 C1 48.870201 14.745020 48.870201 14.745020 ## 190 C1 44.626546 18.300560 44.626546 18.300560 ## 191 C3 51.889545 19.110736 51.889545 19.110736 ## 192 C2 55.866412 20.162240 55.866412 20.162240 ## 193 C3 55.308910 18.537309 55.308910 18.537309 ## 194 C3 55.387594 21.232466 55.387594 21.232466 ## 195 C2 47.786870 19.229614 47.786870 19.229614 ## 196 C1 51.142579 25.432365 51.142579 25.432365 ## 197 C3 53.691527 17.048075 53.691527 17.048075 ## 198 C2 43.699313 25.060097 43.699313 25.060097 ## 199 C1 50.580205 24.799367 50.580205 24.799367 ## ## [200 rows x 5 columns] 12.2.4 Drop Column(s) mydf2 &gt;&gt; select(&#39;newcol1&#39;,&#39;newcol2&#39;,drop=True) ## comp dept grp value1 value2 ## 0 C1 D3 G1 47.461818 13.845507 ## 1 C3 D3 G1 57.851960 18.249679 ## 2 C2 D3 G1 56.761068 18.958356 ## 3 C1 D2 G1 53.452352 16.370892 ## 4 C3 D4 G1 47.701397 21.305608 ## 5 C3 D4 G1 47.583339 19.810424 ## 6 C1 D2 G1 42.826149 18.218150 ## 7 C3 D5 G1 51.165399 19.736232 ## 8 C2 D5 G2 58.373010 18.567652 ## 9 C3 D1 G1 50.504349 19.409068 ## 10 C1 D2 G2 48.140253 18.210037 ## 11 C3 D4 G2 48.304805 18.827421 ## 12 C2 D3 G1 46.783799 17.737684 ## 13 C2 D2 G1 43.786075 21.539684 ## 14 C2 D1 G2 43.553708 15.502670 ## 15 C2 D3 G2 62.357496 20.025739 ## 16 C1 D4 G2 50.609477 21.264097 ## 17 C1 D5 G2 35.217150 23.080881 ## 18 C2 D1 G1 46.666280 18.761898 ## 19 C2 D2 G2 55.554769 20.976455 ## 20 C1 D5 G1 57.548524 26.417773 ## 21 C3 D4 G2 45.563816 19.550270 ## 22 C2 D4 G1 53.669202 26.628202 ## 23 C1 D2 G2 51.521987 18.689786 ## 24 C3 D2 G1 47.377268 18.204102 ## 25 C3 D3 G2 56.856876 18.876022 ## 26 C3 D1 G2 54.378984 23.441349 ## 27 C2 D5 G2 46.488539 19.202507 ## 28 C3 D2 G2 61.413842 17.484570 ## 29 C2 D3 G2 47.543632 17.442582 ## .. ... ... .. ... ... ## 170 C3 D1 G2 49.702977 17.606117 ## 171 C2 D2 G1 53.443798 20.605049 ## 172 C1 D2 G1 53.107943 19.093542 ## 173 C1 D1 G2 48.912265 12.884499 ## 174 C3 D2 G1 47.626987 24.163592 ## 175 C3 D5 G1 51.633946 19.969933 ## 176 C2 D4 G2 42.819679 22.737967 ## 177 C2 D5 G2 43.703259 14.289454 ## 178 C1 D3 G2 46.667819 21.603592 ## 179 C2 D3 G2 44.168352 16.011406 ## 180 C3 D2 G1 56.363672 19.793246 ## 181 C2 D3 G1 44.646413 22.059798 ## 182 C3 D2 G2 44.402854 20.555367 ## 183 C1 D5 G1 53.154225 12.398940 ## 184 C1 D2 G1 48.877250 26.291165 ## 185 C3 D1 G1 54.285144 18.677600 ## 186 C3 D2 G1 58.754668 17.205096 ## 187 C2 D2 G2 49.320844 22.745733 ## 188 C1 D3 G1 48.233014 20.100482 ## 189 C1 D3 G1 48.870201 14.745020 ## 190 C1 D4 G1 44.626546 18.300560 ## 191 C3 D3 G1 51.889545 19.110736 ## 192 C2 D2 G2 55.866412 20.162240 ## 193 C3 D2 G2 55.308910 18.537309 ## 194 C3 D4 G2 55.387594 21.232466 ## 195 C2 D2 G2 47.786870 19.229614 ## 196 C1 D5 G1 51.142579 25.432365 ## 197 C3 D5 G1 53.691527 17.048075 ## 198 C2 D3 G2 43.699313 25.060097 ## 199 C1 D4 G2 50.580205 24.799367 ## ## [200 rows x 5 columns] mydf &gt;&gt; rename( {&#39;val.1&#39; : &#39;value1&#39;, &#39;val.2&#39; : &#39;value2&#39; }) ## comp dept grp val.1 val.2 ## 0 C1 D3 G1 47.461818 13.845507 ## 1 C3 D3 G1 57.851960 18.249679 ## 2 C2 D3 G1 56.761068 18.958356 ## 3 C1 D2 G1 53.452352 16.370892 ## 4 C3 D4 G1 47.701397 21.305608 ## 5 C3 D4 G1 47.583339 19.810424 ## 6 C1 D2 G1 42.826149 18.218150 ## 7 C3 D5 G1 51.165399 19.736232 ## 8 C2 D5 G2 58.373010 18.567652 ## 9 C3 D1 G1 50.504349 19.409068 ## 10 C1 D2 G2 48.140253 18.210037 ## 11 C3 D4 G2 48.304805 18.827421 ## 12 C2 D3 G1 46.783799 17.737684 ## 13 C2 D2 G1 43.786075 21.539684 ## 14 C2 D1 G2 43.553708 15.502670 ## 15 C2 D3 G2 62.357496 20.025739 ## 16 C1 D4 G2 50.609477 21.264097 ## 17 C1 D5 G2 35.217150 23.080881 ## 18 C2 D1 G1 46.666280 18.761898 ## 19 C2 D2 G2 55.554769 20.976455 ## 20 C1 D5 G1 57.548524 26.417773 ## 21 C3 D4 G2 45.563816 19.550270 ## 22 C2 D4 G1 53.669202 26.628202 ## 23 C1 D2 G2 51.521987 18.689786 ## 24 C3 D2 G1 47.377268 18.204102 ## 25 C3 D3 G2 56.856876 18.876022 ## 26 C3 D1 G2 54.378984 23.441349 ## 27 C2 D5 G2 46.488539 19.202507 ## 28 C3 D2 G2 61.413842 17.484570 ## 29 C2 D3 G2 47.543632 17.442582 ## .. ... ... .. ... ... ## 170 C3 D1 G2 49.702977 17.606117 ## 171 C2 D2 G1 53.443798 20.605049 ## 172 C1 D2 G1 53.107943 19.093542 ## 173 C1 D1 G2 48.912265 12.884499 ## 174 C3 D2 G1 47.626987 24.163592 ## 175 C3 D5 G1 51.633946 19.969933 ## 176 C2 D4 G2 42.819679 22.737967 ## 177 C2 D5 G2 43.703259 14.289454 ## 178 C1 D3 G2 46.667819 21.603592 ## 179 C2 D3 G2 44.168352 16.011406 ## 180 C3 D2 G1 56.363672 19.793246 ## 181 C2 D3 G1 44.646413 22.059798 ## 182 C3 D2 G2 44.402854 20.555367 ## 183 C1 D5 G1 53.154225 12.398940 ## 184 C1 D2 G1 48.877250 26.291165 ## 185 C3 D1 G1 54.285144 18.677600 ## 186 C3 D2 G1 58.754668 17.205096 ## 187 C2 D2 G2 49.320844 22.745733 ## 188 C1 D3 G1 48.233014 20.100482 ## 189 C1 D3 G1 48.870201 14.745020 ## 190 C1 D4 G1 44.626546 18.300560 ## 191 C3 D3 G1 51.889545 19.110736 ## 192 C2 D2 G2 55.866412 20.162240 ## 193 C3 D2 G2 55.308910 18.537309 ## 194 C3 D4 G2 55.387594 21.232466 ## 195 C2 D2 G2 47.786870 19.229614 ## 196 C1 D5 G1 51.142579 25.432365 ## 197 C3 D5 G1 53.691527 17.048075 ## 198 C2 D3 G2 43.699313 25.060097 ## 199 C1 D4 G2 50.580205 24.799367 ## ## [200 rows x 5 columns] Combined Method Combine both assignment and dictionary method mydf &gt;&gt; rename( {&#39;val.1&#39; : &#39;value1&#39;, &#39;val.2&#39; : &#39;value2&#39; }, group = &#39;grp&#39; ) ## comp dept group val.1 val.2 ## 0 C1 D3 G1 47.461818 13.845507 ## 1 C3 D3 G1 57.851960 18.249679 ## 2 C2 D3 G1 56.761068 18.958356 ## 3 C1 D2 G1 53.452352 16.370892 ## 4 C3 D4 G1 47.701397 21.305608 ## 5 C3 D4 G1 47.583339 19.810424 ## 6 C1 D2 G1 42.826149 18.218150 ## 7 C3 D5 G1 51.165399 19.736232 ## 8 C2 D5 G2 58.373010 18.567652 ## 9 C3 D1 G1 50.504349 19.409068 ## 10 C1 D2 G2 48.140253 18.210037 ## 11 C3 D4 G2 48.304805 18.827421 ## 12 C2 D3 G1 46.783799 17.737684 ## 13 C2 D2 G1 43.786075 21.539684 ## 14 C2 D1 G2 43.553708 15.502670 ## 15 C2 D3 G2 62.357496 20.025739 ## 16 C1 D4 G2 50.609477 21.264097 ## 17 C1 D5 G2 35.217150 23.080881 ## 18 C2 D1 G1 46.666280 18.761898 ## 19 C2 D2 G2 55.554769 20.976455 ## 20 C1 D5 G1 57.548524 26.417773 ## 21 C3 D4 G2 45.563816 19.550270 ## 22 C2 D4 G1 53.669202 26.628202 ## 23 C1 D2 G2 51.521987 18.689786 ## 24 C3 D2 G1 47.377268 18.204102 ## 25 C3 D3 G2 56.856876 18.876022 ## 26 C3 D1 G2 54.378984 23.441349 ## 27 C2 D5 G2 46.488539 19.202507 ## 28 C3 D2 G2 61.413842 17.484570 ## 29 C2 D3 G2 47.543632 17.442582 ## .. ... ... ... ... ... ## 170 C3 D1 G2 49.702977 17.606117 ## 171 C2 D2 G1 53.443798 20.605049 ## 172 C1 D2 G1 53.107943 19.093542 ## 173 C1 D1 G2 48.912265 12.884499 ## 174 C3 D2 G1 47.626987 24.163592 ## 175 C3 D5 G1 51.633946 19.969933 ## 176 C2 D4 G2 42.819679 22.737967 ## 177 C2 D5 G2 43.703259 14.289454 ## 178 C1 D3 G2 46.667819 21.603592 ## 179 C2 D3 G2 44.168352 16.011406 ## 180 C3 D2 G1 56.363672 19.793246 ## 181 C2 D3 G1 44.646413 22.059798 ## 182 C3 D2 G2 44.402854 20.555367 ## 183 C1 D5 G1 53.154225 12.398940 ## 184 C1 D2 G1 48.877250 26.291165 ## 185 C3 D1 G1 54.285144 18.677600 ## 186 C3 D2 G1 58.754668 17.205096 ## 187 C2 D2 G2 49.320844 22.745733 ## 188 C1 D3 G1 48.233014 20.100482 ## 189 C1 D3 G1 48.870201 14.745020 ## 190 C1 D4 G1 44.626546 18.300560 ## 191 C3 D3 G1 51.889545 19.110736 ## 192 C2 D2 G2 55.866412 20.162240 ## 193 C3 D2 G2 55.308910 18.537309 ## 194 C3 D4 G2 55.387594 21.232466 ## 195 C2 D2 G2 47.786870 19.229614 ## 196 C1 D5 G1 51.142579 25.432365 ## 197 C3 D5 G1 53.691527 17.048075 ## 198 C2 D3 G2 43.699313 25.060097 ## 199 C1 D4 G2 50.580205 24.799367 ## ## [200 rows x 5 columns] 12.3 Sorting (arrange) Use ‘-colName’ for decending mydf &gt;&gt; arrange(&#39;comp&#39;, &#39;-value1&#39;) ## comp dept grp value1 value2 ## 89 C1 D1 G1 65.500153 17.642315 ## 98 C1 D5 G2 62.668581 17.086686 ## 36 C1 D4 G1 61.484751 21.557813 ## 118 C1 D4 G1 59.748916 15.727578 ## 109 C1 D3 G1 58.514556 19.821108 ## 20 C1 D5 G1 57.548524 26.417773 ## 110 C1 D3 G1 56.827667 19.895391 ## 126 C1 D2 G1 56.683559 23.778131 ## 48 C1 D3 G2 56.660960 24.321312 ## 101 C1 D3 G1 56.531692 22.270294 ## 68 C1 D2 G2 55.418481 22.846349 ## 73 C1 D1 G2 55.067317 17.387949 ## 119 C1 D3 G1 54.910741 23.965562 ## 116 C1 D1 G2 54.139490 24.211289 ## 3 C1 D2 G1 53.452352 16.370892 ## 183 C1 D5 G1 53.154225 12.398940 ## 172 C1 D2 G1 53.107943 19.093542 ## 138 C1 D3 G2 52.357910 21.510721 ## 120 C1 D1 G2 52.050164 24.858755 ## 151 C1 D1 G1 52.035373 18.196986 ## 105 C1 D2 G1 52.017132 27.608822 ## 124 C1 D1 G1 51.859442 23.349978 ## 23 C1 D2 G2 51.521987 18.689786 ## 136 C1 D1 G2 51.500843 14.105021 ## 87 C1 D1 G2 51.494965 16.695601 ## 50 C1 D3 G1 51.264859 19.593853 ## 196 C1 D5 G1 51.142579 25.432365 ## 94 C1 D2 G2 51.052075 20.046393 ## 76 C1 D2 G1 50.887151 21.015007 ## 146 C1 D2 G1 50.848053 17.275287 ## .. ... ... .. ... ... ## 170 C3 D1 G2 49.702977 17.606117 ## 130 C3 D3 G1 49.302611 17.898993 ## 84 C3 D2 G2 49.039678 18.696918 ## 61 C3 D2 G1 48.551032 23.732881 ## 11 C3 D4 G2 48.304805 18.827421 ## 152 C3 D2 G1 48.249445 20.384020 ## 74 C3 D5 G2 48.230878 26.175016 ## 148 C3 D2 G2 48.179390 19.592650 ## 4 C3 D4 G1 47.701397 21.305608 ## 174 C3 D2 G1 47.626987 24.163592 ## 5 C3 D4 G1 47.583339 19.810424 ## 38 C3 D2 G2 47.433631 20.672797 ## 24 C3 D2 G1 47.377268 18.204102 ## 60 C3 D3 G2 47.282988 26.211474 ## 143 C3 D5 G2 47.230319 21.129787 ## 88 C3 D5 G2 47.025140 20.710116 ## 112 C3 D2 G1 46.885479 24.237091 ## 132 C3 D5 G1 46.661698 15.366114 ## 156 C3 D3 G2 45.974273 24.095195 ## 139 C3 D1 G1 45.635954 20.107013 ## 21 C3 D4 G2 45.563816 19.550270 ## 81 C3 D5 G2 44.929394 25.691220 ## 182 C3 D2 G2 44.402854 20.555367 ## 106 C3 D1 G2 44.295365 23.628724 ## 157 C3 D1 G1 43.994524 19.059644 ## 96 C3 D3 G2 42.509190 20.459467 ## 100 C3 D1 G2 41.669974 12.210472 ## 111 C3 D4 G1 41.590818 20.996162 ## 123 C3 D3 G1 40.945470 21.077632 ## 125 C3 D3 G1 40.481958 24.155211 ## ## [200 rows x 5 columns] 12.4 Grouping mydf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 200 entries, 0 to 199 ## Data columns (total 5 columns): ## comp 200 non-null object ## dept 200 non-null object ## grp 200 non-null object ## value1 200 non-null float64 ## value2 200 non-null float64 ## dtypes: float64(2), object(3) ## memory usage: 7.9+ KB gdf = mydf &gt;&gt; group_by(&#39;comp&#39;,&#39;dept&#39;) type(gdf) ## &lt;class &#39;plydata.types.GroupedDataFrame&#39;&gt; 12.5 Summarization 12.5.1 Simple Method Passing Multiple Expressions gdf &gt;&gt; summarize(&#39;n()&#39;,&#39;sum(value1)&#39;,&#39;mean(value2)&#39;) ## comp dept n() sum(value1) mean(value2) ## 0 C1 D3 17 848.477327 20.783340 ## 1 C3 D3 12 590.424217 20.894833 ## 2 C2 D3 14 724.687321 19.975589 ## 3 C1 D2 18 896.396241 20.004948 ## 4 C3 D4 8 390.019865 19.526886 ## 5 C3 D5 13 663.154803 20.555770 ## 6 C2 D5 14 695.099177 18.249193 ## 7 C3 D1 16 815.054523 19.745095 ## 8 C2 D2 19 984.153604 20.362625 ## 9 C2 D1 15 731.359273 19.040476 ## 10 C1 D4 7 355.296955 19.931642 ## 11 C1 D5 7 357.578286 21.387660 ## 12 C2 D4 13 639.737496 21.716661 ## 13 C3 D2 13 659.586854 20.250741 ## 14 C1 D1 14 703.523536 19.350918 12.5.2 Specify Summarized Column Name Assignment Method - Passing colName=‘expression’** - Column name cannot contain special character gdf &gt;&gt; summarize(count=&#39;n()&#39;,v1sum=&#39;sum(value1)&#39;,v2_mean=&#39;mean(value2)&#39;) ## comp dept count v1sum v2_mean ## 0 C1 D3 17 848.477327 20.783340 ## 1 C3 D3 12 590.424217 20.894833 ## 2 C2 D3 14 724.687321 19.975589 ## 3 C1 D2 18 896.396241 20.004948 ## 4 C3 D4 8 390.019865 19.526886 ## 5 C3 D5 13 663.154803 20.555770 ## 6 C2 D5 14 695.099177 18.249193 ## 7 C3 D1 16 815.054523 19.745095 ## 8 C2 D2 19 984.153604 20.362625 ## 9 C2 D1 15 731.359273 19.040476 ## 10 C1 D4 7 355.296955 19.931642 ## 11 C1 D5 7 357.578286 21.387660 ## 12 C2 D4 13 639.737496 21.716661 ## 13 C3 D2 13 659.586854 20.250741 ## 14 C1 D1 14 703.523536 19.350918 Tuple Method (‘colName’,‘expression’) Use when the column name contain special character gdf &gt;&gt; summarize((&#39;count&#39;,&#39;n()&#39;),(&#39;v1.sum&#39;,&#39;sum(value1)&#39;),(&#39;s2.sum&#39;,&#39;sum(value2)&#39;),v2mean=np.mean(value2)) ## comp dept count v1.sum s2.sum v2mean ## 0 C1 D3 17 848.477327 353.316780 20.084368 ## 1 C3 D3 12 590.424217 250.737996 20.084368 ## 2 C2 D3 14 724.687321 279.658249 20.084368 ## 3 C1 D2 18 896.396241 360.089062 20.084368 ## 4 C3 D4 8 390.019865 156.215087 20.084368 ## 5 C3 D5 13 663.154803 267.225005 20.084368 ## 6 C2 D5 14 695.099177 255.488696 20.084368 ## 7 C3 D1 16 815.054523 315.921517 20.084368 ## 8 C2 D2 19 984.153604 386.889879 20.084368 ## 9 C2 D1 15 731.359273 285.607139 20.084368 ## 10 C1 D4 7 355.296955 139.521495 20.084368 ## 11 C1 D5 7 357.578286 149.713617 20.084368 ## 12 C2 D4 13 639.737496 282.316588 20.084368 ## 13 C3 D2 13 659.586854 263.259639 20.084368 ## 14 C1 D1 14 703.523536 270.912848 20.084368 12.5.3 Number of Rows in Group n() : total rows in group n_unique() : total of rows with unique value gdf &gt;&gt; summarize(count=&#39;n()&#39;, va11_unique=&#39;n_unique(value1)&#39;) ## comp dept count va11_unique ## 0 C1 D3 17 17 ## 1 C3 D3 12 12 ## 2 C2 D3 14 14 ## 3 C1 D2 18 18 ## 4 C3 D4 8 8 ## 5 C3 D5 13 13 ## 6 C2 D5 14 14 ## 7 C3 D1 16 16 ## 8 C2 D2 19 19 ## 9 C2 D1 15 15 ## 10 C1 D4 7 7 ## 11 C1 D5 7 7 ## 12 C2 D4 13 13 ## 13 C3 D2 13 13 ## 14 C1 D1 14 14 "],
["numpy-1.html", "Chapter 13 numpy 13.1 Environment Setup 13.2 Module Import 13.3 Data Types 13.4 Numpy Array 13.5 Random Numbers 13.6 Sampling (Integer) 13.7 NaN : Missing Numerical Data", " Chapter 13 numpy Best array data manipulation, fast numpy array allows only single data type, unlike list Support matrix operation 13.1 Environment Setup from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:75% !important; margin-left:350px; }&lt;/style&gt;&quot;)) #%matplotlib inline ## &lt;IPython.core.display.HTML object&gt; import pandas as pd import matplotlib.pyplot as plt import math pd.set_option( &#39;display.notebook_repr_html&#39;, False) # render Series and DataFrame as text, not HTML pd.set_option( &#39;display.max_column&#39;, 10) # number of columns pd.set_option( &#39;display.max_rows&#39;, 10) # number of rows pd.set_option( &#39;display.width&#39;, 90) # number of characters per row 13.2 Module Import import numpy as np np.__version__ ## other modules ## &#39;1.17.1&#39; from datetime import datetime from datetime import date from datetime import time 13.3 Data Types 13.3.1 NumPy Data Types NumPy supports a much greater variety of numerical types than Python does. This makes numpy much more powerful https://www.numpy.org/devdocs/user/basics.types.html Integer: np.int8, np.int16, np.int32, np.uint8, np.uint16, np.uint32 Float: np.float32, np.float64 13.3.2 int32/64 np.int is actually python standard int x = np.int(13) y = int(13) print( type(x) ) ## &lt;class &#39;int&#39;&gt; print( type(y) ) ## &lt;class &#39;int&#39;&gt; np.int32/64 are NumPy specific x = np.int32(13) y = np.int64(13) print( type(x) ) ## &lt;class &#39;numpy.int32&#39;&gt; print( type(y) ) ## &lt;class &#39;numpy.int64&#39;&gt; 13.3.3 float32/64 x = np.float(13) y = float(13) print( type(x) ) ## &lt;class &#39;float&#39;&gt; print( type(y) ) ## &lt;class &#39;float&#39;&gt; x = np.float32(13) y = np.float64(13) print( type(x) ) ## &lt;class &#39;numpy.float32&#39;&gt; print( type(y) ) ## &lt;class &#39;numpy.float64&#39;&gt; 13.3.4 bool np.bool is actually python standard bool x = np.bool(True) print( type(x) ) ## &lt;class &#39;bool&#39;&gt; print( type(True) ) ## &lt;class &#39;bool&#39;&gt; 13.3.5 str np.str is actually python standard str x = np.str(&quot;ali&quot;) print( type(x) ) ## &lt;class &#39;str&#39;&gt; x = np.str_(&quot;ali&quot;) print( type(x) ) ## &lt;class &#39;numpy.str_&#39;&gt; 13.3.6 datetime64 Unlike python standard datetime library, there is no seperation of date, datetime and time. There is no time equivalent object NumPy only has one object: datetime64 object . 13.3.6.1 Constructor From String Note that the input string cannot be ISO8601 compliance, meaning any timezone related information at the end of the string (such as Z or +8) will result in error. np.datetime64(&#39;2005-02&#39;) ## numpy.datetime64(&#39;2005-02&#39;) np.datetime64(&#39;2005-02-25&#39;) ## numpy.datetime64(&#39;2005-02-25&#39;) np.datetime64(&#39;2005-02-25T03:30&#39;) ## numpy.datetime64(&#39;2005-02-25T03:30&#39;) From datetime np.datetime64( date.today() ) ## numpy.datetime64(&#39;2019-10-27&#39;) np.datetime64( datetime.now() ) ## numpy.datetime64(&#39;2019-10-27T20:46:07.347721&#39;) 13.3.6.2 Instance Method Convert to datetime using astype() dt64 = np.datetime64(&quot;2019-01-31&quot; ) dt64.astype(datetime) ## datetime.date(2019, 1, 31) 13.4 Numpy Array 13.4.1 Concept Structure - NumPy provides an N-dimensional array type, the ndarray - ndarray is homogenous: every item takes up the same size block of memory, and all blocks - For each ndarray, there is a seperate dtype object, which describe ndarray data type - An item extracted from an array, e.g., by indexing, is represented by a Python object whose type is one of the array scalar types built in NumPy. The array scalars allow easy manipulation of also more complicated arrangements of data. 13.4.2 Constructor By default, numpy.array autodetect its data types based on most common denominator 13.4.2.1 dType: int, float Notice example below auto detected as int32 data type x = np.array( (1,2,3,4,5) ) print(x) ## [1 2 3 4 5] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: int32 Notice example below auto detected as float64 data type x = np.array( (1,2,3,4.5,5) ) print(x) ## [1. 2. 3. 4.5 5. ] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: float64 You can specify dtype to specify desired data types. NumPy will auto convert the data into specifeid types. Observe below that we convert float into integer x = np.array( (1,2,3,4.5,5), dtype=&#39;int&#39; ) print(x) ## [1 2 3 4 5] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: int32 13.4.2.2 dType: datetime64 Specify dtype is necessary to ensure output is datetime type. If not, output is generic object type. From str x = np.array([&#39;2007-07-13&#39;, &#39;2006-01-13&#39;, &#39;2010-08-13&#39;], dtype=&#39;datetime64&#39;) print(x) ## [&#39;2007-07-13&#39; &#39;2006-01-13&#39; &#39;2010-08-13&#39;] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: datetime64[D] From datetime x = np.array([datetime(2019,1,12), datetime(2019,1,14),datetime(2019,3,3)], dtype=&#39;datetime64&#39;) print(x) ## [&#39;2019-01-12T00:00:00.000000&#39; &#39;2019-01-14T00:00:00.000000&#39; ## &#39;2019-03-03T00:00:00.000000&#39;] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: datetime64[us] print(&#39;\\nElement Type:&#39;,type(x[1])) ## ## Element Type: &lt;class &#39;numpy.datetime64&#39;&gt; 13.4.2.3 2D Array x = np.array([range(10),np.arange(10)]) x ## array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], ## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) 13.4.3 Dimensions 13.4.3.1 Differentiating Dimensions 1-D array is array of single list 2-D array is array made of list containing lists (each row is a list) 2-D single row array is array with list containing just one list 13.4.3.2 1-D Array Observe that the shape of the array is (5,). It seems like an array with 5 rows, empty columns ! What it really means is 5 items single dimension. arr = np.array(range(5)) print (arr) ## [0 1 2 3 4] print (arr.shape) ## (5,) print (arr.ndim) ## 1 13.4.3.3 2-D Array arr = np.array([range(5),range(5,10),range(10,15)]) print (arr) ## [[ 0 1 2 3 4] ## [ 5 6 7 8 9] ## [10 11 12 13 14]] print (arr.shape) ## (3, 5) print (arr.ndim) ## 2 13.4.3.4 2-D Array - Single Row arr = np.array([range(5)]) print (arr) ## [[0 1 2 3 4]] print (arr.shape) ## (1, 5) print (arr.ndim) ## 2 13.4.3.5 2-D Array : Single Column Using array slicing method with newaxis at COLUMN, will turn 1D array into 2D of single column arr = np.arange(5)[:, np.newaxis] print (arr) ## [[0] ## [1] ## [2] ## [3] ## [4]] print (arr.shape) ## (5, 1) print (arr.ndim) ## 2 Using array slicing method with newaxis at ROW, will turn 1D array into 2D of single row arr = np.arange(5)[np.newaxis,:] print (arr) ## [[0 1 2 3 4]] print (arr.shape) ## (1, 5) print (arr.ndim) ## 2 13.4.4 Class Method 13.4.4.1 arange() Generate array with a sequence of numbers np.arange(10) ## array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 13.4.4.2 ones() np.ones(10) # One dimension, default is float ## array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]) np.ones((2,5),&#39;int&#39;) #Two dimensions ## array([[1, 1, 1, 1, 1], ## [1, 1, 1, 1, 1]]) 13.4.4.3 zeros() np.zeros( 10 ) # One dimension, default is float ## array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) np.zeros((2,5),&#39;int&#39;) # 2 rows, 5 columns of ZERO ## array([[0, 0, 0, 0, 0], ## [0, 0, 0, 0, 0]]) 13.4.4.4 where() On 1D array numpy.where() returns the items matching the criteria ar1 = np.array(range(10)) print( ar1 ) ## [0 1 2 3 4 5 6 7 8 9] print( np.where(ar1&gt;5) ) ## (array([6, 7, 8, 9], dtype=int64),) On 2D array, where() return array of row index and col index for matching elements ar = np.array([(1,2,3,4,5),(11,12,13,14,15),(21,22,23,24,25)]) print (&#39;Data : \\n&#39;, ar) ## Data : ## [[ 1 2 3 4 5] ## [11 12 13 14 15] ## [21 22 23 24 25]] np.where(ar&gt;13) ## (array([1, 1, 2, 2, 2, 2, 2], dtype=int64), array([3, 4, 0, 1, 2, 3, 4], dtype=int64)) 13.4.4.5 Logical Methods numpy.logical_or Perform or operation on two boolean array, generate new resulting boolean arrays ar = np.arange(10) print( ar==3 ) # boolean array 1 ## [False False False True False False False False False False] print( ar==6 ) # boolean array 2 ## [False False False False False False True False False False] print( np.logical_or(ar==3,ar==6 ) ) # resulting boolean ## [False False False True False False True False False False] numpy.logical_and Perform and operation on two boolean array, generate new resulting boolean arrays ar = np.arange(10) print( ar==3 ) # boolean array 1 ## [False False False True False False False False False False] print( ar==6 ) # boolean array 2 ## [False False False False False False True False False False] print( np.logical_and(ar==3,ar==6 ) ) # resulting boolean ## [False False False False False False False False False False] 13.4.5 Instance Method 13.4.5.1 astype() conversion Convert to from datetime64 to datetime ar1 = np.array([&#39;2007-07-13&#39;, &#39;2006-01-13&#39;, &#39;2010-08-13&#39;], dtype=&#39;datetime64&#39;) print( type(ar1) ) ## a numpy array ## &lt;class &#39;numpy.ndarray&#39;&gt; print( ar1.dtype ) ## dtype is a numpy data type ## datetime64[D] After convert to datetime (non-numpy object, the dtype becomes generic ‘object’. ar2 = ar1.astype(datetime) print( type(ar2) ) ## still a numpy array ## &lt;class &#39;numpy.ndarray&#39;&gt; print( ar2.dtype ) ## dtype becomes generic &#39;object&#39; ## object 13.4.5.2 reshape() reshape ( row numbers, col numbers ) Sample Data a = np.array([range(5), range(10,15), range(20,25), range(30,35)]) a ## array([[ 0, 1, 2, 3, 4], ## [10, 11, 12, 13, 14], ## [20, 21, 22, 23, 24], ## [30, 31, 32, 33, 34]]) Resphepe 1-Dim to 2-Dim np.arange(12) # 1-D Array ## array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) np.arange(12).reshape(3,4) # 2-D Array ## array([[ 0, 1, 2, 3], ## [ 4, 5, 6, 7], ## [ 8, 9, 10, 11]]) Respahe 2-Dim to 2-Dim np.array([range(5), range(10,15)]) # 2-D Array ## array([[ 0, 1, 2, 3, 4], ## [10, 11, 12, 13, 14]]) np.array([range(5), range(10,15)]).reshape(5,2) # 2-D Array ## array([[ 0, 1], ## [ 2, 3], ## [ 4, 10], ## [11, 12], ## [13, 14]]) Reshape 2-Dimension to 2-Dim (of single row) - Change 2x10 to 1x10 - Observe [[ ]], and the number of dimension is stll 2, don’t be fooled np.array( [range(0,5), range(5,10)]) # 2-D Array ## array([[0, 1, 2, 3, 4], ## [5, 6, 7, 8, 9]]) np.array( [range(0,5), range(5,10)]).reshape(1,10) # 2-D Array ## array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) Reshape 1-Dim Array to 2-Dim Array (single column) np.arange(8) ## array([0, 1, 2, 3, 4, 5, 6, 7]) np.arange(8).reshape(8,1) ## array([[0], ## [1], ## [2], ## [3], ## [4], ## [5], ## [6], ## [7]]) A better method, use newaxis, easier because no need to input row number as parameter np.arange(8)[:,np.newaxis] ## array([[0], ## [1], ## [2], ## [3], ## [4], ## [5], ## [6], ## [7]]) Reshape 1-Dim Array to 2-Dim Array (single row) np.arange(8) ## array([0, 1, 2, 3, 4, 5, 6, 7]) np.arange(8)[np.newaxis,:] ## array([[0, 1, 2, 3, 4, 5, 6, 7]]) 13.4.6 Element Selection 13.4.6.1 Sample Data x1 = np.array( (0,1,2,3,4,5,6,7,8)) x2 = np.array(( (1,2,3,4,5), (11,12,13,14,15), (21,22,23,24,25))) print(x1) ## [0 1 2 3 4 5 6 7 8] print(x2) ## [[ 1 2 3 4 5] ## [11 12 13 14 15] ## [21 22 23 24 25]] 13.4.6.2 1-Dimension All indexing starts from 0 (not 1) Choosing Single Element does not return array print( x1[0] ) ## first element ## 0 print( x1[-1] ) ## last element ## 8 print( x1[3] ) ## third element from start 3 ## 3 print( x1[-3] ) ## third element from end ## 6 Selecting multiple elments return ndarray print( x1[:3] ) ## first 3 elements ## [0 1 2] print( x1[-3:]) ## last 3 elements ## [6 7 8] print( x1[3:] ) ## all except first 3 elements ## [3 4 5 6 7 8] print( x1[:-3] ) ## all except last 3 elements ## [0 1 2 3 4 5] print( x1[1:4] ) ## elemnt 1 to 4 (not including 4) ## [1 2 3] 13.4.6.3 2-Dimension Indexing with [ row_positoins, row_positions ], index starts with 0 x[1:3, 1:4] # row 1 to 2 column 1 to 3 ## array([[1, 2, 3]]) 13.4.7 Attributes 13.4.7.1 dtype ndarray contain a property called dtype, whcih tell us the type of underlying items a = np.array( (1,2,3,4,5), dtype=&#39;float&#39; ) a.dtype ## dtype(&#39;float64&#39;) print(a.dtype) ## float64 print( type(a[1])) ## &lt;class &#39;numpy.float64&#39;&gt; 13.4.7.2 dim dim returns the number of dimensions of the NumPy array. Example below shows 2-D array x = np.array(( (1,2,3,4,5), (11,12,13,14,15), (21,22,23,24,25))) x.ndim ## 2 13.4.7.3 shape shape return a type of (rows, cols) x = np.array(( (1,2,3,4,5), (11,12,13,14,15), (21,22,23,24,25))) x.shape ## (3, 5) np.identity(5) ## array([[1., 0., 0., 0., 0.], ## [0., 1., 0., 0., 0.], ## [0., 0., 1., 0., 0.], ## [0., 0., 0., 1., 0.], ## [0., 0., 0., 0., 1.]]) 13.4.8 Operations 13.4.8.1 Arithmetic Sample Date ar = np.arange(10) print( ar ) ## [0 1 2 3 4 5 6 7 8 9] * ar = np.arange(10) print (ar) ## [0 1 2 3 4 5 6 7 8 9] print (ar*2) ## [ 0 2 4 6 8 10 12 14 16 18] **+ and -** ar = np.arange(10) print (ar+2) ## [ 2 3 4 5 6 7 8 9 10 11] print (ar-2) ## [-2 -1 0 1 2 3 4 5 6 7] 13.4.8.2 Comparison Sample Data ar = np.arange(10) print( ar ) ## [0 1 2 3 4 5 6 7 8 9] == print( ar==3 ) ## [False False False True False False False False False False] &gt;, &gt;=, &lt;, &lt;= print( ar&gt;3 ) ## [False False False False True True True True True True] print( ar&lt;=3 ) ## [ True True True True False False False False False False] 13.5 Random Numbers 13.5.1 Uniform Distribution 13.5.1.1 Random Integer (with Replacement) randint() Return random integers from low (inclusive) to high (exclusive) np.random.randint( low ) # generate an integer, i, which i &lt; low np.random.randint( low, high ) # generate an integer, i, which low &lt;= i &lt; high np.random.randint( low, high, size=1) # generate an ndarray of integer, single dimension np.random.randint( low, high, size=(r,c)) # generate an ndarray of integer, two dimensions np.random.randint( 10 ) ## 3 np.random.randint( 10, 20 ) ## 11 np.random.randint( 10, high=20, size=5) # single dimension ## array([18, 19, 13, 11, 17]) np.random.randint( 10, 20, (3,5) ) # two dimensions ## array([[12, 12, 16, 12, 14], ## [12, 16, 14, 15, 19], ## [14, 15, 16, 13, 18]]) 13.5.1.2 Random Integer (with or without replacement) numpy.random .choice( a, size, replace=True) # sampling from a, # if a is integer, then it is assumed sampling from arange(a) # if a is an 1-D array, then sampling from this array np.random.choice(10,5, replace=False) # take 5 samples from 0:19, without replacement ## array([0, 7, 3, 8, 2]) np.random.choice( np.arange(10,20), 5, replace=False) ## array([16, 18, 10, 11, 13]) 13.5.1.3 Random Float randf() Generate float numbers in between 0.0 and 1.0 np.random.ranf(size=None) np.random.ranf(4) ## array([0.26327674, 0.17340686, 0.91011871, 0.40335263]) uniform() Return random float from low (inclusive) to high (exclusive) np.random.uniform( low ) # generate an float, i, which f &lt; low np.random.uniform( low, high ) # generate an float, i, which low &lt;= f &lt; high np.random.uniform( low, high, size=1) # generate an array of float, single dimension np.random.uniform( low, high, size=(r,c)) # generate an array of float, two dimensions np.random.uniform( 2 ) ## 1.1894549061308417 np.random.uniform( 2,5, size=(4,4) ) ## array([[3.98573024, 3.33445224, 2.5259979 , 2.26402677], ## [2.69913422, 4.49466044, 3.00077233, 4.62315672], ## [2.12275665, 4.7720013 , 3.23402336, 2.44381207], ## [3.81821967, 4.60186471, 2.10786123, 4.09995396]]) 13.5.2 Normal Distribution numpy. random.randn (n_items) # 1-D standard normal (mean=0, stdev=1) numpy. random.randn (nrows, ncols) # 2-D standard normal (mean=0, stdev=1) numpy. random.standard_normal( size=None ) # default to mean = 0, stdev = 1, non-configurable numpy. random.normal ( loc=0, scale=1, size=None) # loc = mean, scale = stdev, size = dimension 13.5.2.1 Standard Normal Distribution Generate random normal numbers with gaussion distribution (mean=0, stdev=1) One Dimension np.random.standard_normal(3) ## array([ 0.95946383, 0.17716628, -0.18554665]) np.random.randn(3) ## array([0.76592721, 1.07381413, 0.55311585]) Two Dimensions np.random.randn(2,4) ## array([[-0.69526865, 1.0650257 , -0.3394779 , 1.07897045], ## [-1.57697837, 0.5257284 , -1.01372477, 0.08094151]]) np.random.standard_normal((2,4)) ## array([[ 1.83180597, 0.506084 , -2.20204626, -0.98197507], ## [-0.28739961, -0.46913762, -0.96834655, 0.88615463]]) Observe: randn(), standard_normal() and normal() are able to generate standard normal numbers np.random.seed(15) print (np.random.randn(5)) ## [-0.31232848 0.33928471 -0.15590853 -0.50178967 0.23556889] np.random.seed(15) print (np.random.normal ( size = 5 )) # stdev and mean not specified, default to standard normal ## [-0.31232848 0.33928471 -0.15590853 -0.50178967 0.23556889] np.random.seed(15) print (np.random.standard_normal (size=5)) ## [-0.31232848 0.33928471 -0.15590853 -0.50178967 0.23556889] 13.5.2.2 Normal Distribution (Non-Standard) np.random.seed(125) np.random.normal( loc = 12, scale=1.25, size=(3,3)) ## array([[11.12645382, 12.01327885, 10.81651695], ## [12.41091248, 12.39383072, 11.49647195], ## [ 8.70837035, 12.25246312, 11.49084235]]) 13.5.2.3 Linear Spacing numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) # endpoint: If True, stop is the last sample, otherwise it is not included Include Endpoint Step = Gap divide by (number of elements minus 1) (2/(10-1)) np.linspace(1,3,10) #default endpont=True ## array([1. , 1.22222222, 1.44444444, 1.66666667, 1.88888889, ## 2.11111111, 2.33333333, 2.55555556, 2.77777778, 3. ]) Does Not Include Endpoint Step = Gap divide by (number of elements minus 1) (2/(101)) np.linspace(1,3,10,endpoint=False) ## array([1. , 1.2, 1.4, 1.6, 1.8, 2. , 2.2, 2.4, 2.6, 2.8]) 13.6 Sampling (Integer) random.choice( a, size=None, replace=True, p=None) # a=integer, return &lt;size&gt; integers &lt; a random.choice( a, size=None, replace=True, p=None) # a=array-like, return &lt;size&gt; integers picked from list a np.random.choice (100, size=10) ## array([58, 0, 84, 50, 89, 32, 87, 30, 66, 92]) np.random.choice( [1,3,5,7,9,11,13,15,17,19,21,23], size=10, replace=False) ## array([ 5, 1, 23, 17, 3, 13, 15, 9, 21, 7]) 13.7 NaN : Missing Numerical Data You should be aware that NaN is a bit like a data virus?it infects any other object it touches t = np.array([1, np.nan, 3, 4]) t.dtype ## dtype(&#39;float64&#39;) Regardless of the operation, the result of arithmetic with NaN will be another NaN 1 + np.nan ## nan t.sum(), t.mean(), t.max() ## (nan, nan, nan) np.nansum(t), np.nanmean(t), np.nanmax(t) ## (8.0, 2.6666666666666665, 4.0) "],
["pandas-1.html", "Chapter 14 pandas 14.1 Environment Setup 14.2 Modules Import 14.3 Pandas Objects 14.4 Class Method 14.5 Timestamp 14.6 Series 14.7 DataFrame 14.8 Categories 14.9 Dummies 14.10 Getting External Data 14.11 GroupBy 14.12 Concat 14.13 Fundamental Analysis 14.14 Missing Data 14.15 Pandas DateTime 14.16 DateTimeIndex", " Chapter 14 pandas 14.1 Environment Setup from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:70% !important; margin-left:350px; }&lt;/style&gt;&quot;)) ## &lt;IPython.core.display.HTML object&gt; 14.2 Modules Import import pandas as pd ## Other Libraries import numpy as np import datetime as dt from datetime import datetime from datetime import date 14.2.1 Display Setup It is good idea to configure output setup as prefered pd.set_option( &#39;display.notebook_repr_html&#39;, False) # render Series and DataFrame as text, not HTML pd.set_option( &#39;display.max_column&#39;, 10) # number of columns pd.set_option( &#39;display.max_rows&#39;, 10) # number of rows pd.set_option( &#39;display.width&#39;, 80) # number of characters per row 14.3 Pandas Objects 14.3.1 Pandas Data Types pandas.Timestamp pandas.Timedelta pandas.Period pandas.Interval pandas.DateTimeIndex 14.3.2 Pandas Data Structure Type Dimension Size Value Constructor Series 1 Immutable Mutable pandas.DataFrame( data, index, dtype, copy) DataFrame 2 Mutable Mutable pandas.DataFrame( data, index, columns, dtype, copy) Panel 3 Mutable Mutable data can be ndarray, list, constants index must be unique and same length as data. Can be integer or string dtype if none, it will be inferred copy copy data. Default false 14.4 Class Method 14.4.1 Conversion: to_datetime() Source can be string, date, datetime object 14.4.1.1 From List to DateTimeIndex dti = pd.to_datetime([&#39;2011-01-03&#39;, # from string date(2018,4,13), # from date datetime(2018,3,1,7,30)] # from datetime ) print(dti) ## DatetimeIndex([&#39;2011-01-03 00:00:00&#39;, &#39;2018-04-13 00:00:00&#39;, ## &#39;2018-03-01 07:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=None) print(&#39;\\nObject Type: &#39;,type(dti)) ## ## Object Type: &lt;class &#39;pandas.core.indexes.datetimes.DatetimeIndex&#39;&gt; print(&#39;Object dtype: &#39;, dti.dtype) ## Object dtype: datetime64[ns] print(&#39;\\nElement Type: &#39;,type(dti[1])) ## ## Element Type: &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 14.4.1.2 From List to Series to Series sdt = pd.to_datetime(pd.Series([&#39;2011-01-03&#39;, # from string date(2018,4,13), # from date datetime(2018,3,1,7,30)]# from datetime )) print(sdt) ## 0 2011-01-03 00:00:00 ## 1 2018-04-13 00:00:00 ## 2 2018-03-01 07:30:00 ## dtype: datetime64[ns] print(&#39;\\nObject Type: &#39;,type(sdt)) ## ## Object Type: &lt;class &#39;pandas.core.series.Series&#39;&gt; print(&#39;Object dtype: &#39;, sdt.dtype) ## Object dtype: datetime64[ns] print(&#39;\\nElement Type: &#39;,type(sdt[1])) ## ## Element Type: &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 14.4.1.3 From Scalar to Timestamp print( pd.to_datetime(&#39;2011-01-03&#39;)) # from string ## 2011-01-03 00:00:00 print( pd.to_datetime(date(2011,1,3))) # from date ## 2011-01-03 00:00:00 print( pd.to_datetime(datetime(2011,1,3,5,30))) # from datetime ## 2011-01-03 05:30:00 print(&#39;\\nElement Type: &#39;, type(pd.to_datetime(datetime(2011,1,3,5,30)))) ## ## Element Type: &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 14.4.2 Generate Timestamp Sequence 14.4.2.1 date_range() Return DateTimeIndex object Generate sequence of HOURS ## Specify start, Periods, Frequency ## Start from Date Only pd.date_range(&#39;2018-01-01&#39;, periods=3, freq=&#39;H&#39;) ## DatetimeIndex([&#39;2018-01-01 00:00:00&#39;, &#39;2018-01-01 01:00:00&#39;, ## &#39;2018-01-01 02:00:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;H&#39;) ## Start from DateTime dti = pd.date_range(datetime(2018,1,1,12,30), periods=3, freq=&#39;H&#39;) print(dti) ## DatetimeIndex([&#39;2018-01-01 12:30:00&#39;, &#39;2018-01-01 13:30:00&#39;, ## &#39;2018-01-01 14:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;H&#39;) print(type(dti)) ## &lt;class &#39;pandas.core.indexes.datetimes.DatetimeIndex&#39;&gt; print(dti.dtype) ## datetime64[ns] print(type(dti[1])) ## &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; ## Specify start, End and Frequency dti = pd.date_range(start=&#39;2018-01-03-1230&#39;, end=&#39;2018-01-03-18:30&#39;, freq=&#39;H&#39;) print(dti) ## DatetimeIndex([&#39;2018-01-03 12:30:00&#39;, &#39;2018-01-03 13:30:00&#39;, ## &#39;2018-01-03 14:30:00&#39;, &#39;2018-01-03 15:30:00&#39;, ## &#39;2018-01-03 16:30:00&#39;, &#39;2018-01-03 17:30:00&#39;, ## &#39;2018-01-03 18:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;H&#39;) Generate sequence of DAYS pd.date_range(date(2018,1,2), periods=3, freq=&#39;D&#39;) ## DatetimeIndex([&#39;2018-01-02&#39;, &#39;2018-01-03&#39;, &#39;2018-01-04&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) pd.date_range(&#39;2018-01-01-1230&#39;, periods=4, freq=&#39;D&#39;) ## DatetimeIndex([&#39;2018-01-01 12:30:00&#39;, &#39;2018-01-02 12:30:00&#39;, ## &#39;2018-01-03 12:30:00&#39;, &#39;2018-01-04 12:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) Generate sequence of Start of Month pd.date_range(&#39;2018-01&#39;, periods=4, freq=&#39;MS&#39;) ## DatetimeIndex([&#39;2018-01-01&#39;, &#39;2018-02-01&#39;, &#39;2018-03-01&#39;, &#39;2018-04-01&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;MS&#39;) pd.date_range(datetime(2018,1,3,12,30), periods=4, freq=&#39;MS&#39;) ## DatetimeIndex([&#39;2018-02-01 12:30:00&#39;, &#39;2018-03-01 12:30:00&#39;, ## &#39;2018-04-01 12:30:00&#39;, &#39;2018-05-01 12:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;MS&#39;) Generate sequence of End of Month dti = pd.date_range(&#39;2018-02&#39;, periods=4, freq=&#39;M&#39;) dti ## DatetimeIndex([&#39;2018-02-28&#39;, &#39;2018-03-31&#39;, &#39;2018-04-30&#39;, &#39;2018-05-31&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;M&#39;) 14.4.3 Frequency Table (crosstab) crosstab returns Dataframe Object crosstab( index = &lt;SeriesObj&gt;, columns = &lt;new_colName&gt; ) # one dimension table crosstab( index = &lt;SeriesObj&gt;, columns = &lt;SeriesObj&gt; ) # two dimension table crosstab( index = &lt;SeriesObj&gt;, columns = [&lt;SeriesObj1&gt;, &lt;SeriesObj2&gt;] ) # multi dimension table crosstab( index = &lt;SeriesObj&gt;, columns = &lt;SeriesObj&gt;, margines=True ) # add column and row margins 14.4.3.1 Sample Data n = 200 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,6, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,3, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2, &#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 value3 ## 0 C1 D2 G2 63.434839 24.762085 14.037684 ## 1 C3 D2 G1 48.319613 18.965650 -30.215550 ## 2 C2 D1 G1 52.776620 21.003838 49.610150 ## 3 C3 D5 G1 44.648475 23.730746 20.963278 ## 4 C2 D5 G2 45.309311 16.353753 15.269688 14.4.3.2 One DimensionTable print( pd.crosstab(index=mydf.comp, columns=&#39;counter&#39;) ) ## col_0 counter ## comp ## C1 76 ## C2 57 ## C3 67 type ( pd.crosstab(index=mydf.comp, columns=&#39;counter&#39;)) ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; 14.4.3.3 Two Dimension Table pd.crosstab(index=mydf.comp, columns=mydf.dept) ## dept D1 D2 D3 D4 D5 ## comp ## C1 19 20 12 12 13 ## C2 11 17 10 7 12 ## C3 11 14 13 13 16 14.4.3.4 Higher Dimension Table tb = pd.crosstab(index=mydf.comp, columns=[mydf.dept, mydf.grp]) print( tb ) ## dept D1 D2 D3 D4 D5 ## grp G1 G2 G1 G2 G1 G2 G1 G2 G1 G2 ## comp ## C1 10 9 9 11 3 9 4 8 9 4 ## C2 4 7 7 10 4 6 5 2 2 10 ## C3 3 8 5 9 3 10 6 7 9 7 tb.columns ## MultiIndex(levels=[[&#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;, &#39;D4&#39;, &#39;D5&#39;], [&#39;G1&#39;, &#39;G2&#39;]], ## labels=[[0, 0, 1, 1, 2, 2, 3, 3, 4, 4], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]], ## names=[&#39;dept&#39;, &#39;grp&#39;]) Get the subdataframe under D2 tb[&#39;D2&#39;] ## grp G1 G2 ## comp ## C1 9 11 ## C2 7 10 ## C3 5 9 14.4.3.5 Getting Margin Sum of each row and each column is created at the end. tb = pd.crosstab(index=mydf.dept, columns=mydf.grp, margins=True) tb ## grp G1 G2 All ## dept ## D1 17 24 41 ## D2 21 30 51 ## D3 10 25 35 ## D4 15 17 32 ## D5 20 21 41 ## All 83 117 200 print(tb.loc[:,&#39;All&#39;] ) # row total, return a Series ## dept ## D1 41 ## D2 51 ## D3 35 ## D4 32 ## D5 41 ## All 200 ## Name: All, dtype: int64 print(type(tb.loc[:,&#39;All&#39;])) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; print(tb.loc[&#39;All&#39;]) # column total, return a Series ## grp ## G1 83 ## G2 117 ## All 200 ## Name: All, dtype: int64 print(type(tb.loc[&#39;All&#39;])) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; 14.4.3.6 Getting Proportion Use matrix operation divide for each cells over the margin tb/tb.loc[&#39;All&#39;] ## grp G1 G2 All ## dept ## D1 0.204819 0.205128 0.205 ## D2 0.253012 0.256410 0.255 ## D3 0.120482 0.213675 0.175 ## D4 0.180723 0.145299 0.160 ## D5 0.240964 0.179487 0.205 ## All 1.000000 1.000000 1.000 14.4.3.7 Reseting Index When creating a crosstab, column specified by index will become index To convert it to normal column, use reset_index() DataFrameObj.reset_index( inpalce=False ) 14.5 Timestamp This is an enhanced version to datetime standard library. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html#pandas.Timestamp 14.5.1 Constructor 14.5.1.1 From Number print( pd.Timestamp(year=2017, month=1, day=1) ) #date-like numbers ## 2017-01-01 00:00:00 print( pd.Timestamp(2017,1,1) ) # date-like numbers ## 2017-01-01 00:00:00 print( pd.Timestamp(2017,12,11,5,45)) # datetime-like numbers ## 2017-12-11 05:45:00 print( pd.Timestamp(2017,12,11,5,45,55,999)) # + microseconds ## 2017-12-11 05:45:55.000999 print( pd.Timestamp(2017,12,11,5,45,55,999,8)) # + nanoseconds ## 2017-12-11 05:45:55.000999008 print( type(pd.Timestamp(2017,12,11,5,45,55,999,8))) ## &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 14.5.1.2 From String Observe that pandas support many string input format Year Month Day, default no timezone print( pd.Timestamp(&#39;2017-12-11&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 print( pd.Timestamp(&#39;2017 12 11&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 print( pd.Timestamp(&#39;2017 Dec 11&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 print( pd.Timestamp(&#39;Dec 11, 2017&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 YMD Hour Minute Second Ms print( pd.Timestamp(&#39;2017-12-11 0545&#39;)) ## hour minute ## 2017-12-11 05:45:00 print( pd.Timestamp(&#39;2017-12-11-05:45&#39;)) ## 2017-12-11 05:45:00 print( pd.Timestamp(&#39;2017-12-11T0545&#39;)) ## 2017-12-11 05:45:00 print( pd.Timestamp(&#39;2017-12-11 054533&#39;)) ## hour minute seconds ## 2017-12-11 05:45:33 print( pd.Timestamp(&#39;2017-12-11 05:45:33&#39;)) ## 2017-12-11 05:45:33 Timezone print( pd.Timestamp(&#39;2017-01-01T0545Z&#39;)) # GMT ## 2017-01-01 05:45:00+00:00 print( pd.Timestamp(&#39;2017-01-01T0545+9&#39;)) # GMT+9 ## 2017-01-01 05:45:00+09:00 print( pd.Timestamp(&#39;2017-01-01T0545+0800&#39;)) # GMT+0800 ## 2017-01-01 05:45:00+08:00 14.5.1.3 From Standard Library datetime and date Object print( pd.Timestamp(date(2017,3,5)) ) # from date ## 2017-03-05 00:00:00 print( pd.Timestamp(datetime(2017,3,5,4,30))) # from datetime ## 2017-03-05 04:30:00 print( pd.Timestamp(datetime(2017,3,5,4,30), tz=&#39;Asia/Kuala_Lumpur&#39;)) # from datetime, + tz ## 2017-03-05 04:30:00+08:00 14.5.2 Attributes ts = pd.Timestamp(&#39;2017-01-01T054533+0800&#39;) # GMT+0800 print( ts.month ) ## 1 print( ts.day ) ## 1 print( ts.year ) ## 2017 print( ts.hour ) ## 5 print( ts.minute) ## 45 print( ts.second) ## 33 print( ts.microsecond) ## 0 print( ts.nanosecond) ## 0 print( ts.tz) ## pytz.FixedOffset(480) ts1 = pd.Timestamp(datetime(2017,3,5,4,30), tz=&#39;Asia/Kuala_Lumpur&#39;) # from datetime, + tz ts2 = pd.Timestamp(&#39;2017-01-01T054533+0800&#39;) # GMT+0800 ts3 = pd.Timestamp(&#39;2017-01-01T0545&#39;) print( ts1.tz ) ## Asia/Kuala_Lumpur print( ts2.tz ) ## pytz.FixedOffset(480) print( ts3.tz ) ## None 14.5.3 Operator 14.5.4 Instance Methods 14.5.4.1 Useful Methods ts = pd.Timestamp(2017,1,1) print( ts.weekday() ) ## 6 print( ts.isoweekday() ) ## 7 14.5.4.2 Convert To datetime Use to_pydatetime() to convert into standard library datetime.datetime, optionally to datetime.date ts = pd.Timestamp(2017,1,10,7,30,52) # to datetime.datetime ts.to_pydatetime() ## datetime.datetime(2017, 1, 10, 7, 30, 52) ts = pd.Timestamp(2017,1,10,7,30,52) # to datetime.date ts.to_pydatetime().date() ## datetime.date(2017, 1, 10) 14.5.4.3 Convert To numpy Use to_datetime64() to convert into numpy.datetime64 ts = pd.Timestamp(2017,1,10,7,30,52) ts.to_datetime64() ## numpy.datetime64(&#39;2017-01-10T07:30:52.000000000&#39;) 14.5.4.4 Formatting with strftime Use strftime() to customize string format. For complete directive, see below: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior ts = pd.Timestamp(2017,1,10,7,30,52) ts.strftime(&quot;%m/%d&quot;) ## &#39;01/10&#39; 14.5.4.5 Add Timezone Add timezone to tz-naive or tz-non-existance object. Clock will not be shifted as there is no original offset ts = pd.Timestamp(2017,1,10,10,34) ## No timezone ts = ts.tz_localize(&#39;Asia/Kuala_Lumpur&#39;) ## Add timezone ts ## Timestamp(&#39;2017-01-10 10:34:00+0800&#39;, tz=&#39;Asia/Kuala_Lumpur&#39;) 14.5.4.6 Convert Timezone Convert timezone to tz-aware object. The clock will be shifted according to the offset ts = pd.Timestamp(2017,1,10,10,34) ## No timezone ts = ts.tz_localize(&#39;Asia/Kuala_Lumpur&#39;) ## Add timezone ts = ts.tz_convert(&#39;UTC&#39;) ## Convert timezone ts ## Timestamp(&#39;2017-01-10 02:34:00+0000&#39;, tz=&#39;UTC&#39;) 14.5.4.7 Removing TImezone ts = pd.Timestamp(2017,1,10,10,34) ## No timezone ts = ts.tz_localize(&#39;Asia/Kuala_Lumpur&#39;) ## Add timezone ts = ts.tz_localize(None) ## Convert timezone ts ## Timestamp(&#39;2017-01-10 10:34:00&#39;) 14.5.4.8 Formatting with isoformat Use isoformat() to format ISO string (without timezone) ts.isoformat() ## &#39;2017-01-10T10:34:00&#39; 14.5.4.9 ceil print( ts.ceil(freq=&#39;D&#39;) ) # ceiling to day ## 2017-01-11 00:00:00 14.5.4.10 replace() ts.replace(year=2000, month=1,day=1) ## Timestamp(&#39;2000-01-01 10:34:00&#39;) 14.6 Series Series allows different data types (object class) as its element 14.6.1 Constructor 14.6.1.1 Empty Series Passing empty parameter result in empty series s = pd.Series() print (s) ## Series([], dtype: float64) type(s) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; 14.6.1.2 From Scalar If data is a scalar value, an index must be provided. The value will be repeated to match the length of index pd.Series( 99, index = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]) ## a 99 ## b 99 ## c 99 ## d 99 ## dtype: int64 14.6.1.3 From array-like From list pd.Series([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]) # from Python list ## 0 a ## 1 b ## 2 c ## 3 d ## 4 e ## dtype: object From numpy.array If index is not specified, default to 0 and continue incrementally pd.Series(np.array([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;])) # from np.array ## 0 a ## 1 b ## 2 c ## 3 d ## 4 e ## dtype: object From DateTimeIndex dti = pd.date_range(&#39;2011-1-1&#39;,&#39;2011-1-3&#39;) dti ## DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) pd.Series(pd.date_range(&#39;2011-1-1&#39;,&#39;2011-1-3&#39;)) ## 0 2011-01-01 ## 1 2011-01-02 ## 2 2011-01-03 ## dtype: datetime64[ns] 14.6.1.4 From Dictionary The dictionary key will be the index If index sequence is not specified, then the Series will be automatically sorted according to the key pd.Series({&#39;a&#39; : 0., &#39;c&#39; : 1., &#39;b&#39; : 2.}) # from Python dict, autosort by default key ## a 0.0 ## c 1.0 ## b 2.0 ## dtype: float64 If index sequence is specifeid, then Series will forllow the index order Objerve that missing data (index without value) will be marked as NaN pd.Series({&#39;a&#39; : 0., &#39;c&#39; : 1., &#39;b&#39; : 2.},index = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]) # from Python Dict, index specified, no auto sort ## a 0.0 ## b 2.0 ## c 1.0 ## d NaN ## dtype: float64 14.6.1.5 Specify Index pd.Series([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;], index=[10,20,30,40,50]) ## 10 a ## 20 b ## 30 c ## 40 d ## 50 e ## dtype: object 14.6.1.6 Mix Element Types dType will be ‘object’ when there were mixture of classes ser = pd.Series([&#39;a&#39;,1,2,3]) print(&#39;Object Type : &#39;, type(ser)) ## Object Type : &lt;class &#39;pandas.core.series.Series&#39;&gt; print(&#39;Object dType: &#39;, ser.dtype) ## Object dType: object print(&#39;Element 1 Type: &#39;,type(ser[0])) ## Element 1 Type: &lt;class &#39;str&#39;&gt; print(&#39;Elmeent 2 Type: &#39;,type(ser[1])) ## Elmeent 2 Type: &lt;class &#39;int&#39;&gt; 14.6.1.7 Specify Data Types ser1 = pd.Series([1,2,3]) ser2 = pd.Series([1,2,3], dtype=&quot;int8&quot;) ser3 = pd.Series([1,2,3], dtype=&quot;object&quot;) print(ser1, ser1.dtype) ## 0 1 ## 1 2 ## 2 3 ## dtype: int64 int64 print(ser2, ser2.dtype) ## 0 1 ## 1 2 ## 2 3 ## dtype: int8 int8 print(ser3, ser3.dtype) ## 0 1 ## 1 2 ## 2 3 ## dtype: object object 14.6.2 Accessing Series series ( single/list/range_of_row_label/number ) # can cause confusion series.loc ( single/list/range_of_row_label ) series.iloc( single/list/range_of_row_number ) 14.6.2.1 Sample Data s = pd.Series([1,2,3,4,5],index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]) s ## a 1 ## b 2 ## c 3 ## d 4 ## e 5 ## dtype: int64 14.6.2.2 by Row Number(s) Single Item s.iloc[1] ## 2 Multiple Items s.iloc[[1,3]] ## b 2 ## d 4 ## dtype: int64 Range (First 3) s.iloc[:3] ## a 1 ## b 2 ## c 3 ## dtype: int64 Range (Last 3) s.iloc[-3:] ## c 3 ## d 4 ## e 5 ## dtype: int64 Range (in between) s.iloc[2:3] ## c 3 ## dtype: int64 14.6.2.3 by Index(es) Single Label s.loc[&#39;c&#39;] # or ... s[[&#39;c&#39;]] ## 3 Multiple Labels s.loc[[&#39;b&#39;,&#39;c&#39;]] ## b 2 ## c 3 ## dtype: int64 ** Range of Labels ** s.loc[&#39;b&#39;:&#39;d&#39;] ## b 2 ## c 3 ## d 4 ## dtype: int64 14.6.2.4 Filtering Criteria Use logical array to filter s = pd.Series(range(1,8)) s[s&lt;5] ## 0 1 ## 1 2 ## 2 3 ## 3 4 ## dtype: int64 Use logical array with where s.where(s&gt;4) ## 0 NaN ## 1 NaN ## 2 NaN ## 3 NaN ## 4 5.0 ## 5 6.0 ## 6 7.0 ## dtype: float64 s.where(s&gt;4,None) ## 0 None ## 1 None ## 2 None ## 3 None ## 4 5 ## 5 6 ## 6 7 ## dtype: object 14.6.3 Modifying Series 14.6.3.1 by Row Number(s) s = pd.Series(range(1,7), index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;]) s[2] = 999 s[[3,4]] = 888,777 s ## a 1 ## b 2 ## c 999 ## d 888 ## e 777 ## f 6 ## dtype: int64 14.6.3.2 by Index(es) s = pd.Series(range(1,7), index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;]) s[&#39;e&#39;] = 888 s[[&#39;c&#39;,&#39;d&#39;]] = 777,888 s ## a 1 ## b 2 ## c 777 ## d 888 ## e 888 ## f 6 ## dtype: int64 14.6.4 Series Attributes 14.6.4.1 The Data s = pd.Series([1,2,3,4,5],index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;],name=&#39;SuperHero&#39;) 14.6.4.2 index s.index ## Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;], dtype=&#39;object&#39;) 14.6.4.3 dtype s.dtype ## dtype(&#39;int64&#39;) 14.6.4.4 Dimensions print(s) ## a 1 ## b 2 ## c 3 ## d 4 ## e 5 ## Name: SuperHero, dtype: int64 print( s.size ) ## 5 print( s.shape ) ## (5,) print( s.ndim ) ## 1 14.6.4.5 .name s.name ## &#39;SuperHero&#39; 14.6.5 Instance Methods 14.6.5.1 .reset_index () Resetting index will: - Convert index to a normal column, header is ‘index’ - Index renumbered to ,1,2,3 - Retrun DataFrame (became two columns) print(s) ## a 1 ## b 2 ## c 3 ## d 4 ## e 5 ## Name: SuperHero, dtype: int64 print(s.reset_index()) ## index SuperHero ## 0 a 1 ## 1 b 2 ## 2 c 3 ## 3 d 4 ## 4 e 5 14.6.5.2 Structure Conversion Use values() to convert into `numpy.ndarray type(s.values) ## &lt;class &#39;numpy.ndarray&#39;&gt; Use to_list() to convert into standard python `list ## 14.6.5.3 DataType Conversion Use astype() to convert to another numpy supproted datatypes Warning: casting to incompatible type will result in error ser = pd.Series([1, 2], dtype=&#39;int32&#39;) ser ## 0 1 ## 1 2 ## dtype: int32 ser.astype(&#39;int8&#39;) ## 0 1 ## 1 2 ## dtype: int8 14.6.6 Series Operators The result of applying operator (arithmetic or logic) to Series object returns a new Series object 14.6.6.1 Arithmetic Operator s1 = pd.Series( [100,200,300,400,500] ) s2 = pd.Series( [10, 20, 30, 40, 50] ) Apply To One Series Object 100 - s2 ## 0 90 ## 1 80 ## 2 70 ## 3 60 ## 4 50 ## dtype: int64 Apply To Two Series Objects s1 - s2 ## 0 90 ## 1 180 ## 2 270 ## 3 360 ## 4 450 ## dtype: int64 14.6.6.2 Logic Operator Apply logic operator to a Series return a new Series of boolean result This can be used for Series or DataFrame filtering bs = pd.Series(range(0,10)) bs ## 0 0 ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 ## 8 8 ## 9 9 ## dtype: int64 print (bs&gt;3) ## 0 False ## 1 False ## 2 False ## 3 False ## 4 True ## 5 True ## 6 True ## 7 True ## 8 True ## 9 True ## dtype: bool print (type (bs&gt;3)) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; ~((bs&gt;3) &amp; (bs&lt;8)) ## 0 True ## 1 True ## 2 True ## 3 True ## 4 False ## 5 False ## 6 False ## 7 False ## 8 True ## 9 True ## dtype: bool 14.6.7 Series String Accesor .str If the underlying data is str type, then pandas exposed various properties and methos through str accessor. This chapter focus on various functions that can be applied to entire Series data SeriesObj.str.operatorFunction() Pandas str Method Nearly all Python’s built-in string methods are mirrored by a Pandas vectorized string method. Here is a list of Pandas str methods that mirror Python string methods: len() lower() translate() islower() ljust() upper() startswith() isupper() rjust() find() endswith() isnumeric() center() rfind() isalnum() isdecimal() zfill() index() isalpha() split() strip() rindex() isdigit() rsplit() rstrip() capitalize() isspace() partition() lstrip() swapcase() istitle() rpartition() 14.6.7.1 Splitting s = pd.Series([&#39;a_b_c&#39;, &#39;c_d_e&#39;, np.nan, &#39;f_g_h_i_j&#39;]) s ## 0 a_b_c ## 1 c_d_e ## 2 NaN ## 3 f_g_h_i_j ## dtype: object str.split() By default, split will split the string into array s.str.split(&#39;_&#39;) ## 0 [a, b, c] ## 1 [c, d, e] ## 2 NaN ## 3 [f, g, h, i, j] ## dtype: object After split, select rows to return print( s.str.split(&#39;_&#39;).get(1) ) ## [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;] print( s.str.split(&#39;_&#39;)[1] ) ## [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;] str.split( expand=True, n= ) split and expand=True will return a dataframe instead of series print( s.str.split(&#39;_&#39;, expand=True) ) ## 0 1 2 3 4 ## 0 a b c None None ## 1 c d e None None ## 2 NaN NaN NaN NaN NaN ## 3 f g h i j It is possible to limit the number of columns splitted print( s.str.split(&#39;_&#39;, expand=True, n=1) ) ## 0 1 ## 0 a b_c ## 1 c d_e ## 2 NaN NaN ## 3 f g_h_i_j str.rsplit() rsplit stands for reverse split, it works the same way, except it is reversed print( s.str.rsplit(&#39;_&#39;, expand=True, n=1) ) ## 0 1 ## 0 a_b c ## 1 c_d e ## 2 NaN NaN ## 3 f_g_h_i j 14.6.7.2 Matching monte = pd.Series([&#39;Graham Chapman&#39;, &#39;John Cleese&#39;, &#39;Terry Gilliam&#39;, &#39;Eric Idle&#39;, &#39;Terry Jones&#39;, &#39;Michael Palin&#39;]) monte ## 0 Graham Chapman ## 1 John Cleese ## 2 Terry Gilliam ## 3 Eric Idle ## 4 Terry Jones ## 5 Michael Palin ## dtype: object startwith monte.str.startswith(&#39;T&#39;) ## 0 False ## 1 False ## 2 True ## 3 False ## 4 True ## 5 False ## dtype: bool monte.str.split() ## 0 [Graham, Chapman] ## 1 [John, Cleese] ## 2 [Terry, Gilliam] ## 3 [Eric, Idle] ## 4 [Terry, Jones] ## 5 [Michael, Palin] ## dtype: object Slicing monte.str[0:3] ## 0 Gra ## 1 Joh ## 2 Ter ## 3 Eri ## 4 Ter ## 5 Mic ## dtype: object monte.str[0:-1] ## 0 Graham Chapma ## 1 John Clees ## 2 Terry Gillia ## 3 Eric Idl ## 4 Terry Jone ## 5 Michael Pali ## dtype: object s = pd.Series([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;Aaba&#39;, &#39;Baca&#39;, np.nan, &#39;CABA&#39;, &#39;dog&#39;, &#39;cat&#39;]) 14.6.7.3 Case Conversion SeriesObj.str.upper() SeriesObj.str.lower() s.str.upper() ## 0 A ## 1 B ## 2 C ## 3 AABA ## 4 BACA ## 5 NaN ## 6 CABA ## 7 DOG ## 8 CAT ## dtype: object 14.6.7.4 Number of Characters s.str.len() ## 0 1.0 ## 1 1.0 ## 2 1.0 ## 3 4.0 ## 4 4.0 ## 5 NaN ## 6 4.0 ## 7 3.0 ## 8 3.0 ## dtype: float64 d=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] names = pd.Series(data=d) names.str.capitalize() ## 0 A ## 1 B ## 2 C ## dtype: object 14.6.7.5 String Indexing s = pd.Series([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;Aaba&#39;, &#39;Baca&#39;, np.nan,&#39;CABA&#39;, &#39;dog&#39;, &#39;cat&#39;]) s ## 0 A ## 1 B ## 2 C ## 3 Aaba ## 4 Baca ## 5 NaN ## 6 CABA ## 7 dog ## 8 cat ## dtype: object s.str[1] # return char-1 (second char) of every item ## 0 NaN ## 1 NaN ## 2 NaN ## 3 a ## 4 a ## 5 NaN ## 6 A ## 7 o ## 8 a ## dtype: object 14.6.7.6 Splitting Sample Data s = pd.Series([&#39;a_b_c&#39;, &#39;c_d_e&#39;, np.nan, &#39;f_g_h&#39;]) Splitting base on a a delimieter Result is a SeriesObj with list of splitted characters sp = s.str.split(&#39;_&#39;) sp ## 0 [a, b, c] ## 1 [c, d, e] ## 2 NaN ## 3 [f, g, h] ## dtype: object Retrieving Split Result Use .str.get() to retrieve splitted elments sp.str.get(-1) ## 0 c ## 1 e ## 2 NaN ## 3 h ## dtype: object Alternatively, use str[ ] for the same result sp.str[-1] ## 0 c ## 1 e ## 2 NaN ## 3 h ## dtype: object 14.6.7.7 Split and Expand Into DataFrame s.str.split(&#39;_&#39;,expand=True, n=5) # limit expansion into n columns ## 0 1 2 ## 0 a b c ## 1 c d e ## 2 NaN NaN NaN ## 3 f g h 14.6.7.8 Series Substring Extraction Sample Data s = pd.Series([&#39;a1&#39;, &#39;b2&#39;, &#39;c3&#39;]) s ## 0 a1 ## 1 b2 ## 2 c3 ## dtype: object Extract absed on regex matching … to improve … type(s.str.extract(&#39;([ab])(\\d)&#39;, expand=False)) ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; 14.6.8 Series DateTime Accessor .dt If the underlying data is datetime64 type, then pandas exposed various properties and methos through dt accessor. 14.6.8.1 Sample Data s = pd.Series([ datetime(2000,1,1,0,0,0), datetime(1999,12,15,12,34,55), datetime(2020,3,8,5,7,12), datetime(2018,1,1,0,0,0), datetime(2003,3,4,5,6,7) ]) s ## 0 2000-01-01 00:00:00 ## 1 1999-12-15 12:34:55 ## 2 2020-03-08 05:07:12 ## 3 2018-01-01 00:00:00 ## 4 2003-03-04 05:06:07 ## dtype: datetime64[ns] 14.6.8.2 Convert To datetime.datetime Use to_pydatetime() to convert into numpy.array of standard library datetime.datetime pdt = s.dt.to_pydatetime() print( type(pdt) ) ## &lt;class &#39;numpy.ndarray&#39;&gt; pdt ## array([datetime.datetime(2000, 1, 1, 0, 0), ## datetime.datetime(1999, 12, 15, 12, 34, 55), ## datetime.datetime(2020, 3, 8, 5, 7, 12), ## datetime.datetime(2018, 1, 1, 0, 0), ## datetime.datetime(2003, 3, 4, 5, 6, 7)], dtype=object) datetime.date Use dt.date to convert into pandas.Series of standard library datetime.date Is it possible to have a pandas.Series of datetime.datetime ? No, because Pandas want it as its own Timestamp. sdt = s.dt.date print( type(sdt[1] )) ## &lt;class &#39;datetime.date&#39;&gt; print( type(sdt)) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; sdt ## 0 2000-01-01 ## 1 1999-12-15 ## 2 2020-03-08 ## 3 2018-01-01 ## 4 2003-03-04 ## dtype: object 14.6.8.3 Timestamp Attributes A Series::DateTime object support below properties: - date - month - day - year - dayofweek - dayofyear - weekday - weekday_name - quarter - daysinmonth - hour - minute Full list below: https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetimelike-properties s.dt.date ## 0 2000-01-01 ## 1 1999-12-15 ## 2 2020-03-08 ## 3 2018-01-01 ## 4 2003-03-04 ## dtype: object s.dt.month ## 0 1 ## 1 12 ## 2 3 ## 3 1 ## 4 3 ## dtype: int64 s.dt.dayofweek ## 0 5 ## 1 2 ## 2 6 ## 3 0 ## 4 1 ## dtype: int64 s.dt.weekday ## 0 5 ## 1 2 ## 2 6 ## 3 0 ## 4 1 ## dtype: int64 s.dt.weekday_name ## 0 Saturday ## 1 Wednesday ## 2 Sunday ## 3 Monday ## 4 Tuesday ## dtype: object s.dt.quarter ## 0 1 ## 1 4 ## 2 1 ## 3 1 ## 4 1 ## dtype: int64 s.dt.daysinmonth ## 0 31 ## 1 31 ## 2 31 ## 3 31 ## 4 31 ## dtype: int64 s.dt.time # extract time as time Object ## 0 00:00:00 ## 1 12:34:55 ## 2 05:07:12 ## 3 00:00:00 ## 4 05:06:07 ## dtype: object s.dt.hour # extract hour as integer ## 0 0 ## 1 12 ## 2 5 ## 3 0 ## 4 5 ## dtype: int64 s.dt.minute # extract minute as integer ## 0 0 ## 1 34 ## 2 7 ## 3 0 ## 4 6 ## dtype: int64 14.7 DataFrame 14.7.1 Constructor 14.7.1.1 From Row Oriented Data (List of Lists) Create from List of Lists DataFrame( [row_list1, row_list2, row_list3] ) DataFrame( [row_list1, row_list2, row_list3], column=columnName_list ) DataFrame( [row_list1, row_list2, row_list3], index=row_label_list ) Basic DataFrame with default Row Label and Column Header pd.DataFrame ([[101,&#39;Alice&#39;,40000,2017], [102,&#39;Bob&#39;, 24000, 2017], [103,&#39;Charles&#39;,31000,2017]] ) ## 0 1 2 3 ## 0 101 Alice 40000 2017 ## 1 102 Bob 24000 2017 ## 2 103 Charles 31000 2017 Specify Column Header during Creation pd.DataFrame ([[101,&#39;Alice&#39;,40000,2017], [102,&#39;Bob&#39;, 24000, 2017], [103,&#39;Charles&#39;,31000,2017]], columns = [&#39;empID&#39;,&#39;name&#39;,&#39;salary&#39;,&#39;year&#39;]) ## empID name salary year ## 0 101 Alice 40000 2017 ## 1 102 Bob 24000 2017 ## 2 103 Charles 31000 2017 Specify Row Label during Creation pd.DataFrame ([[101,&#39;Alice&#39;,40000,2017], [102,&#39;Bob&#39;, 24000, 2017], [103,&#39;Charles&#39;,31000,2017]], index = [&#39;r1&#39;,&#39;r2&#39;,&#39;r3&#39;] ) ## 0 1 2 3 ## r1 101 Alice 40000 2017 ## r2 102 Bob 24000 2017 ## r3 103 Charles 31000 2017 14.7.1.2 From Row Oriented Data (List of Dictionary) DataFrame( [dict1, dict2, dict3] ) DataFrame( [row_list1, row_list2, row_list3], column=np.arrange ) DataFrame( [row_list1, row_list2, row_list3], index=row_label_list ) by default,keys will become collumn names, and autosorted Default Column Name Follow Dictionary Key Note missing info as NaN pd.DataFrame ([{&quot;name&quot;:&quot;Yong&quot;, &quot;id&quot;:1,&quot;zkey&quot;:101},{&quot;name&quot;:&quot;Gan&quot;,&quot;id&quot;:2}]) ## id name zkey ## 0 1 Yong 101.0 ## 1 2 Gan NaN Specify Index pd.DataFrame ([{&quot;name&quot;:&quot;Yong&quot;, &quot;id&quot;:&#39;wd1&#39;},{&quot;name&quot;:&quot;Gan&quot;,&quot;id&quot;:&#39;wd2&#39;}], index = (1,2)) ## id name ## 1 wd1 Yong ## 2 wd2 Gan Specify Column Header during Creation, can acts as column filter and manual arrangement Note missing info as NaN pd.DataFrame ([{&quot;name&quot;:&quot;Yong&quot;, &quot;id&quot;:1, &quot;zkey&quot;:101},{&quot;name&quot;:&quot;Gan&quot;,&quot;id&quot;:2}], columns=(&quot;name&quot;,&quot;id&quot;,&quot;zkey&quot;)) ## name id zkey ## 0 Yong 1 101.0 ## 1 Gan 2 NaN 14.7.1.3 From Column Oriented Data Create from Dictrionary of List DataFrame( { &#39;column1&#39;: list1, &#39;column2&#39;: list2, &#39;column3&#39;: list3 } , index = row_label_list, columns = column_list) By default, DataFrame will arrange the columns alphabetically, unless columns is specified Default Row Label data = {&#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year&#39;: [2017, 2017, 2017, 2018, 2018], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;, &#39;David&#39;, &#39;Eric&#39;]} pd.DataFrame(data) ## empID year salary name ## 0 100 2017 40000 Alice ## 1 101 2017 24000 Bob ## 2 102 2017 31000 Charles ## 3 103 2018 20000 David ## 4 104 2018 30000 Eric Specify Row Label during Creation data = {&#39;empID&#39;: [100, 101, 102, 103, 104], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;, &#39;David&#39;, &#39;Eric&#39;], &#39;year&#39;: [2017, 2017, 2017, 2018, 2018], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000] } pd.DataFrame (data, index=[&#39;r1&#39;,&#39;r2&#39;,&#39;r3&#39;,&#39;r4&#39;,&#39;r5&#39;]) ## empID name year salary ## r1 100 Alice 2017 40000 ## r2 101 Bob 2017 24000 ## r3 102 Charles 2017 31000 ## r4 103 David 2018 20000 ## r5 104 Eric 2018 30000 Manualy Choose Columns and Arrangement data = {&#39;empID&#39;: [100, 101, 102, 103, 104], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;, &#39;David&#39;, &#39;Eric&#39;], &#39;year&#39;: [2017, 2017, 2017, 2018, 2018], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000] } pd.DataFrame (data, columns=(&#39;empID&#39;,&#39;name&#39;,&#39;salary&#39;), index=[&#39;r1&#39;,&#39;r2&#39;,&#39;r3&#39;,&#39;r4&#39;,&#39;r5&#39;]) ## empID name salary ## r1 100 Alice 40000 ## r2 101 Bob 24000 ## r3 102 Charles 31000 ## r4 103 David 20000 ## r5 104 Eric 30000 14.7.2 Attributes df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]) 14.7.2.1 Dimensions df.shape ## (5, 5) 14.7.2.2 Index df.index ## RangeIndex(start=0, stop=5, step=1) Underlying Index values are numpy object df.index.values ## array([0, 1, 2, 3, 4], dtype=int64) 14.7.2.3 Columns df.columns ## Index([&#39;year1&#39;, &#39;salary&#39;, &#39;year2&#39;, &#39;empID&#39;, &#39;name&#39;], dtype=&#39;object&#39;) Underlying Index values are numpy object df.columns.values ## array([&#39;year1&#39;, &#39;salary&#39;, &#39;year2&#39;, &#39;empID&#39;, &#39;name&#39;], dtype=object) 14.7.2.4 Values Underlying Column values are numpy object df.values ## array([[2017, 40000, 2001, 100, &#39;Alice&#39;], ## [2017, 24000, 1907, 101, &#39;Bob&#39;], ## [2017, 31000, 2003, 102, &#39;Charles&#39;], ## [2018, 20000, 1998, 103, &#39;David&#39;], ## [2018, 30000, 2011, 104, &#39;Eric&#39;]], dtype=object) 14.7.3 Index Manipulation index and row label are used interchangeably in this book 14.7.3.1 Sample Data Columns are intentionaly ordered in a messy way df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]) print (df, &#39;\\n&#39;) ## year1 salary year2 empID name ## 0 2017 40000 2001 100 Alice ## 1 2017 24000 1907 101 Bob ## 2 2017 31000 2003 102 Charles ## 3 2018 20000 1998 103 David ## 4 2018 30000 2011 104 Eric print (df.index) ## RangeIndex(start=0, stop=5, step=1) 14.7.3.2 Convert Column To Index set_index(&#39;column_name&#39;, inplace=False) inplace=True means don’t create a new dataframe. Modify existing dataframe inplace=False means return a new dataframe print(df) ## year1 salary year2 empID name ## 0 2017 40000 2001 100 Alice ## 1 2017 24000 1907 101 Bob ## 2 2017 31000 2003 102 Charles ## 3 2018 20000 1998 103 David ## 4 2018 30000 2011 104 Eric print(df.index,&#39;\\n&#39;) ## RangeIndex(start=0, stop=5, step=1) df.set_index(&#39;empID&#39;,inplace=True) print(df) ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric print(df.index) # return new DataFrameObj ## Int64Index([100, 101, 102, 103, 104], dtype=&#39;int64&#39;, name=&#39;empID&#39;) 14.7.3.3 Convert Index Back To Column Reseting index will resequence the index as 0,1,2 etc Old index column will be converted back as normal column Operation support inplace** option df.reset_index(inplace=True) print(df) ## empID year1 salary year2 name ## 0 100 2017 40000 2001 Alice ## 1 101 2017 24000 1907 Bob ## 2 102 2017 31000 2003 Charles ## 3 103 2018 20000 1998 David ## 4 104 2018 30000 2011 Eric 14.7.3.4 Updating Index ( .index= ) Warning: - Updating index doesn’t reorder the data sequence - Number of elements before and after reorder must match, otherwise error - Same label are allowed to repeat - Not reversable df.index = [101, 101, 101, 102, 103] print( df ) ## empID year1 salary year2 name ## 101 100 2017 40000 2001 Alice ## 101 101 2017 24000 1907 Bob ## 101 102 2017 31000 2003 Charles ## 102 103 2018 20000 1998 David ## 103 104 2018 30000 2011 Eric 14.7.3.5 Reordering Index (. reindex ) Reindex will reorder the rows according to new index The operation is not reversable Start from this original dataframe Change the order of Index, always return a new dataframe df.index = [101,102,103,104,105] print( df ) ## original sequence ## empID year1 salary year2 name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob ## 103 102 2017 31000 2003 Charles ## 104 103 2018 20000 1998 David ## 105 104 2018 30000 2011 Eric print( df.reindex([103,102,101,104,105]) ) ## new sequence, new dataframe ## empID year1 salary year2 name ## 103 102 2017 31000 2003 Charles ## 102 101 2017 24000 1907 Bob ## 101 100 2017 40000 2001 Alice ## 104 103 2018 20000 1998 David ## 105 104 2018 30000 2011 Eric 14.7.4 Subsetting Columns Select Single Column Return Series dataframe.columnName # single column, name based, return Series object dataframe[ single_col_name ] # single column, name based, return Series object dataframe[ [single_col_name] ] # single column, name based, return DataFrame object Select Single/Multiple Columns Return DataFrame dataframe[ single/list_of_col_names ] # name based, return Dataframe object dataframe.loc[ : , single_col_name ] # single column, series dataframe.loc[ : , col_name_list ] # multiple columns, dataframe dataframe.loc[ : , col_name_ranage ] # multiple columns, dataframe dataframe.iloc[ : , col_number ] # single column, series dataframe.iloc[ : , col_number_list ] # multiple columns, dataframe dataframe.iloc[ : , number_range ] # multiple columns, dataframe 14.7.4.1 Select Single Column Selecting single column always return as panda::Series df.name ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric ## Name: name, dtype: object df[&#39;name&#39;] ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric ## Name: name, dtype: object df.loc[:, &#39;name&#39;] ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric ## Name: name, dtype: object df.iloc[:, 3] ## 101 2001 ## 102 1907 ## 103 2003 ## 104 1998 ## 105 2011 ## Name: year2, dtype: int64 14.7.4.2 Select Multiple Columns Multiple columns return as panda::Dataframe object` df[[&#39;name&#39;]] # return one column dataframe ## name ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric print(df.columns) ## Index([&#39;empID&#39;, &#39;year1&#39;, &#39;salary&#39;, &#39;year2&#39;, &#39;name&#39;], dtype=&#39;object&#39;) df[[&#39;name&#39;,&#39;year1&#39;]] ## name year1 ## 101 Alice 2017 ## 102 Bob 2017 ## 103 Charles 2017 ## 104 David 2018 ## 105 Eric 2018 df.loc[:,[&#39;name&#39;,&#39;year1&#39;]] ## name year1 ## 101 Alice 2017 ## 102 Bob 2017 ## 103 Charles 2017 ## 104 David 2018 ## 105 Eric 2018 df.loc[:,&#39;year1&#39;:&#39;year2&#39;] # range of columns ## year1 salary year2 ## 101 2017 40000 2001 ## 102 2017 24000 1907 ## 103 2017 31000 2003 ## 104 2018 20000 1998 ## 105 2018 30000 2011 df.iloc[:,[0,3]] ## empID year2 ## 101 100 2001 ## 102 101 1907 ## 103 102 2003 ## 104 103 1998 ## 105 104 2011 df.iloc[:,0:3] ## empID year1 salary ## 101 100 2017 40000 ## 102 101 2017 24000 ## 103 102 2017 31000 ## 104 103 2018 20000 ## 105 104 2018 30000 14.7.4.3 Selection by Data Type df.select_dtypes(include=None, exclude=None) Always return panda::DataFrame, even though only single column matches. Allowed types are: - number (integer and float) - integer / float - datetime - timedelta - category df.get_dtype_counts() ## int64 4 ## object 1 ## dtype: int64 df.select_dtypes(exclude=&#39;number&#39;) ## name ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric df.select_dtypes(exclude=(&#39;number&#39;,&#39;object&#39;)) ## Empty DataFrame ## Columns: [] ## Index: [101, 102, 103, 104, 105] 14.7.4.4 Subset by filter() .filter(items=None, like=None, regex=None, axis=1) like = Substring Matches df.filter( like=&#39;year&#39;, axis=&#39;columns&#39;) ## or axis = 1 ## year1 year2 ## 101 2017 2001 ## 102 2017 1907 ## 103 2017 2003 ## 104 2018 1998 ## 105 2018 2011 items = list of column names df.filter( items=(&#39;year1&#39;,&#39;year2&#39;), axis=1) ## or axis = 1 ## year1 year2 ## 101 2017 2001 ## 102 2017 1907 ## 103 2017 2003 ## 104 2018 1998 ## 105 2018 2011 regex = Regular Expression Select column names that contain integer df.filter(regex=&#39;\\d&#39;) ## default axis=1 if DataFrame ## year1 year2 ## 101 2017 2001 ## 102 2017 1907 ## 103 2017 2003 ## 104 2018 1998 ## 105 2018 2011 14.7.5 Column Manipulation 14.7.5.1 Sample Data df ## empID year1 salary year2 name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob ## 103 102 2017 31000 2003 Charles ## 104 103 2018 20000 1998 David ## 105 104 2018 30000 2011 Eric 14.7.5.2 Renaming Columns Method 1 : Rename All Columns (.columns =) - Construct the new column names, check if there is no missing column names - Missing columns will return error - Direct Assignment to column property result in change to dataframe new_columns = [&#39;year.1&#39;,&#39;salary&#39;,&#39;year.2&#39;,&#39;empID&#39;,&#39;name&#39;] df.columns = new_columns df.head(2) ## year.1 salary year.2 empID name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob Method 2 : Renaming Specific Column (.rename (columns=) ) - Change column name through rename function - Support inpalce option for original dataframe change - Missing column is OK df.rename( columns={&#39;year.1&#39;:&#39;year1&#39;, &#39;year.2&#39;:&#39;year2&#39;}, inplace=True) df.head(2) ## year1 salary year2 empID name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob 14.7.5.3 Reordering Columns Always return a new dataframe. There is no inplace option for reordering columns Method 1 - reindex(columns = ) - reindex may sounds like operation on row labels, but it works - Missmatch column names will result in NA for the unfound column new_colorder = [ &#39;empID&#39;, &#39;name&#39;, &#39;salary&#39;, &#39;year1&#39;, &#39;year2&#39;] df.reindex(columns = new_colorder).head(2) ## empID name salary year1 year2 ## 101 2001 Alice 2017 100 40000 ## 102 1907 Bob 2017 101 24000 Method 2 - [ ] notation - Missmatch column will result in ERROR new_colorder = [ &#39;empID&#39;, &#39;name&#39;, &#39;salary&#39;, &#39;year1&#39;, &#39;year2&#39;] df[new_colorder] ## empID name salary year1 year2 ## 101 2001 Alice 2017 100 40000 ## 102 1907 Bob 2017 101 24000 ## 103 2003 Charles 2017 102 31000 ## 104 1998 David 2018 103 20000 ## 105 2011 Eric 2018 104 30000 14.7.5.4 Duplicating or Replacing Column New Column will be created instantly using [] notation DO NOT USE dot Notation because it is view only attribute df[&#39;year3&#39;] = df.year1 df ## year1 salary year2 empID name year3 ## 101 100 2017 40000 2001 Alice 100 ## 102 101 2017 24000 1907 Bob 101 ## 103 102 2017 31000 2003 Charles 102 ## 104 103 2018 20000 1998 David 103 ## 105 104 2018 30000 2011 Eric 104 14.7.5.5 Dropping Columns (.drop) dataframe.drop( columns=&#39;column_name&#39;, inplace=True/False) # delete single column dataframe.drop( columns=list_of_colnames, inplace=True/False) # delete multiple column dataframe.drop( index=&#39;row_label&#39;, inplace=True/False) # delete single row dataframe.drop( index= list_of_row_labels, inplace=True/False) # delete multiple rows inplace=True means column will be deleted from original dataframe. Default is False, which return a copy of dataframe By Column Name(s) df.drop( columns=&#39;year1&#39;) # drop single column ## salary year2 empID name year3 ## 101 2017 40000 2001 Alice 100 ## 102 2017 24000 1907 Bob 101 ## 103 2017 31000 2003 Charles 102 ## 104 2018 20000 1998 David 103 ## 105 2018 30000 2011 Eric 104 df.drop(columns=[&#39;year2&#39;,&#39;year3&#39;]) # drop multiple columns ## year1 salary empID name ## 101 100 2017 2001 Alice ## 102 101 2017 1907 Bob ## 103 102 2017 2003 Charles ## 104 103 2018 1998 David ## 105 104 2018 2011 Eric By Column Number(s) Use dataframe.columns to produce interim list of column names df.drop( columns=df.columns[[3,4,5]] ) # delete columns by list of column number ## year1 salary year2 ## 101 100 2017 40000 ## 102 101 2017 24000 ## 103 102 2017 31000 ## 104 103 2018 20000 ## 105 104 2018 30000 df.drop( columns=df.columns[3:6] ) # delete columns by range of column number ## year1 salary year2 ## 101 100 2017 40000 ## 102 101 2017 24000 ## 103 102 2017 31000 ## 104 103 2018 20000 ## 105 104 2018 30000 14.7.6 Subsetting Rows dataframe.loc[ row_label ] # return series, single row dataframe.loc[ row_label_list ] # multiple rows dataframe.loc[ boolean_list ] # multiple rows dataframe.iloc[ row_number ] # return series, single row dataframe.iloc[ row_number_list ] # multiple rows dataframe.iloc[ number_range ] # multiple rows dataframe.sample(frac=) # frac = 0.6 means sampling 60% of rows randomly 14.7.6.1 Sample Data df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]).set_index([&#39;empID&#39;]) df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 14.7.6.2 By Index or Boolean Single Index return Series df.loc[101] # by single row label, return series ## year1 2017 ## salary 24000 ## year2 1907 ## name Bob ## Name: 101, dtype: object List or Range of Indexes returns DataFrame df.loc[ [100,103] ] # by multiple row labels ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 103 2018 20000 1998 David df.loc[ 100:103 ] # by range of row labels ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David List of Boolean returns DataFrame criteria = (df.salary &gt; 30000) &amp; (df.year1==2017) print (criteria) ## empID ## 100 True ## 101 False ## 102 True ## 103 False ## 104 False ## dtype: bool print (df.loc[criteria]) ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 102 2017 31000 2003 Charles 14.7.6.3 By Row Number Single Row return Series df.iloc[1] # by single row number ## year1 2017 ## salary 24000 ## year2 1907 ## name Bob ## Name: 101, dtype: object Multiple rows returned as dataframe object df.iloc[ [0,3] ] # by row numbers ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 103 2018 20000 1998 David df.iloc[ 0:3 ] # by row number range ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles 14.7.6.4 query() .query(expr, inplace=False) df.query(&#39;salary&lt;=31000 and year1 == 2017&#39;) ## year1 salary year2 name ## empID ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles 14.7.6.5 sample() np.random.seed(15) df.sample(frac=0.6) #randomly pick 60% of rows, without replacement ## year1 salary year2 name ## empID ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 14.7.7 Row Manipulation 14.7.7.1 Sample Data 14.7.7.2 Dropping Rows (.drop) .drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise') By Row Label(s) df.drop(index=100) # single row ## year1 salary year2 name ## empID ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric df.drop(index=[100,103]) # multiple rows ## year1 salary year2 name ## empID ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 104 2018 30000 2011 Eric 14.7.8 Slicing 14.7.8.1 Sample Data df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 14.7.8.2 Getting One Cell By Row Label and Column Name (loc) dataframe.loc [ row_label , col_name ] # by row label and column names dataframe.loc [ bool_list , col_name ] # by row label and column names dataframe.iloc[ row_number, col_number ] # by row and column number print (df.loc[100,&#39;year1&#39;]) ## 2017 By Row Number and Column Number (iloc) print (df.iloc[1,2]) ## 1907 14.7.8.3 Getting Multiple Cells Specify rows and columns (by individual or range) dataframe.loc [ list/range_of_row_labels , list/range_col_names ] # by row label and column names dataframe.iloc[ list/range_row_numbers, list/range_col_numbers ] # by row number By Index and Column Name (loc) print (df.loc[ [101,103], [&#39;name&#39;,&#39;year1&#39;] ], &#39;\\n&#39;) # by list of row label and column names ## name year1 ## empID ## 101 Bob 2017 ## 103 David 2018 print (df.loc[ 101:104 , &#39;year1&#39;:&#39;year2&#39; ], &#39;\\n&#39;) # by range of row label and column names ## year1 salary year2 ## empID ## 101 2017 24000 1907 ## 102 2017 31000 2003 ## 103 2018 20000 1998 ## 104 2018 30000 2011 By Boolean Row and Column Names (loc) df.loc[df.year1==2017, &#39;year1&#39;:&#39;year2&#39;] ## year1 salary year2 ## empID ## 100 2017 40000 2001 ## 101 2017 24000 1907 ## 102 2017 31000 2003 By Row and Column Number (iloc) print (df.iloc[ [1,4], [0,3]],&#39;\\n&#39; ) # by individual rows/columns ## year1 name ## empID ## 101 2017 Bob ## 104 2018 Eric print (df.iloc[ 1:4 , 0:3], &#39;\\n&#39;) # by range ## year1 salary year2 ## empID ## 101 2017 24000 1907 ## 102 2017 31000 2003 ## 103 2018 20000 1998 14.7.9 Chained Indexing Chained Index Method creates a copy of dataframe, any modification of data on original dataframe does not affect the copy dataframe.loc [...] [...] dataframe.iloc [...] [...] Suggesting, never use chain indexing df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]).set_index([&#39;empID&#39;]) df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric df.loc[100][&#39;year&#39;] =2000 ## C:\\PROGRA~3\\ANACON~1\\python.exe:1: SettingWithCopyWarning: ## A value is trying to be set on a copy of a slice from a DataFrame ## ## See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\pandas\\core\\series.py:915: SettingWithCopyWarning: ## A value is trying to be set on a copy of a slice from a DataFrame ## ## See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy ## self.loc[key] = value df ## notice row label 100 had not been updated, because data was updated on a copy due to chain indexing ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 14.7.10 Data Structure 14.7.10.1 Instance Methods - Structure Find out the column names, data type in a summary. Output is for display only, not a data object df.info() # return text output ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## Int64Index: 5 entries, 100 to 104 ## Data columns (total 4 columns): ## year1 5 non-null int64 ## salary 5 non-null int64 ## year2 5 non-null int64 ## name 5 non-null object ## dtypes: int64(3), object(1) ## memory usage: 360.0+ bytes df.get_dtype_counts() # return Series ## int64 3 ## object 1 ## dtype: int64 14.7.10.2 Conversion To Other Format df.to_json() ## &#39;{&quot;year1&quot;:{&quot;100&quot;:2017,&quot;101&quot;:2017,&quot;102&quot;:2017,&quot;103&quot;:2018,&quot;104&quot;:2018},&quot;salary&quot;:{&quot;100&quot;:40000,&quot;101&quot;:24000,&quot;102&quot;:31000,&quot;103&quot;:20000,&quot;104&quot;:30000},&quot;year2&quot;:{&quot;100&quot;:2001,&quot;101&quot;:1907,&quot;102&quot;:2003,&quot;103&quot;:1998,&quot;104&quot;:2011},&quot;name&quot;:{&quot;100&quot;:&quot;Alice&quot;,&quot;101&quot;:&quot;Bob&quot;,&quot;102&quot;:&quot;Charles&quot;,&quot;103&quot;:&quot;David&quot;,&quot;104&quot;:&quot;Eric&quot;}}&#39; df.to_records() ## rec.array([(100, 2017, 40000, 2001, &#39;Alice&#39;), ## (101, 2017, 24000, 1907, &#39;Bob&#39;), ## (102, 2017, 31000, 2003, &#39;Charles&#39;), ## (103, 2018, 20000, 1998, &#39;David&#39;), ## (104, 2018, 30000, 2011, &#39;Eric&#39;)], ## dtype=[(&#39;empID&#39;, &#39;&lt;i8&#39;), (&#39;year1&#39;, &#39;&lt;i8&#39;), (&#39;salary&#39;, &#39;&lt;i8&#39;), (&#39;year2&#39;, &#39;&lt;i8&#39;), (&#39;name&#39;, &#39;O&#39;)]) df.to_csv() ## &#39;empID,year1,salary,year2,name\\n100,2017,40000,2001,Alice\\n101,2017,24000,1907,Bob\\n102,2017,31000,2003,Charles\\n103,2018,20000,1998,David\\n104,2018,30000,2011,Eric\\n&#39; 14.7.11 Exploratory Analysis 14.7.11.1 Sample Data df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 14.7.11.2 All Stats in One - .describe() df.describe(include=&#39;number&#39;) # default df.describe(include=&#39;object&#39;) # display for non-numeric columns df.describe(include=&#39;all&#39;) # display both numeric and non-numeric When applied to DataFrame object, describe shows all basic statistic for all numeric columns: - Count (non-NA) - Unique (for string) - Top (for string) - Frequency (for string) - Percentile - Mean - Min / Max - Standard Deviation For Numeric Columns only You can customize the percentiles requred. Notice 0.5 percentile is always there although not specified df.describe() ## year1 salary year2 ## count 5.000000 5.000000 5.000000 ## mean 2017.400000 29000.000000 1984.000000 ## std 0.547723 7615.773106 43.312816 ## min 2017.000000 20000.000000 1907.000000 ## 25% 2017.000000 24000.000000 1998.000000 ## 50% 2017.000000 30000.000000 2001.000000 ## 75% 2018.000000 31000.000000 2003.000000 ## max 2018.000000 40000.000000 2011.000000 df.describe(percentiles=[0.9,0.3,0.2,0.1]) ## year1 salary year2 ## count 5.000000 5.000000 5.000000 ## mean 2017.400000 29000.000000 1984.000000 ## std 0.547723 7615.773106 43.312816 ## min 2017.000000 20000.000000 1907.000000 ## 10% 2017.000000 21600.000000 1943.400000 ## 20% 2017.000000 23200.000000 1979.800000 ## 30% 2017.000000 25200.000000 1998.600000 ## 50% 2017.000000 30000.000000 2001.000000 ## 90% 2018.000000 36400.000000 2007.800000 ## max 2018.000000 40000.000000 2011.000000 For both Numeric and Object df.describe(include=&#39;all&#39;) ## year1 salary year2 name ## count 5.0 5.0 5.0 5 ## unique NaN NaN NaN 5 ## top NaN NaN NaN David ## freq NaN NaN NaN 1 ## mean 2017.4 29000.0 1984.0 NaN ## ... ... ... ... ... ## min 2017.0 20000.0 1907.0 NaN ## 25% 2017.0 24000.0 1998.0 NaN ## 50% 2017.0 30000.0 2001.0 NaN ## 75% 2018.0 31000.0 2003.0 NaN ## max 2018.0 40000.0 2011.0 NaN ## ## [11 rows x 4 columns] 14.7.11.3 min/max/mean/median df.min() # default axis=0, column-wise ## year1 2017 ## salary 20000 ## year2 1907 ## name Alice ## dtype: object df.min(axis=1) # axis=1, row-wise ## empID ## 100 2001 ## 101 1907 ## 102 2003 ## 103 1998 ## 104 2011 ## dtype: int64 Observe, sum on string will concatenate column-wise, whereas row-wise only sum up numeric fields df.sum(0) ## year1 10087 ## salary 145000 ## year2 9920 ## name AliceBobCharlesDavidEric ## dtype: object df.sum(1) ## empID ## 100 44018 ## 101 27924 ## 102 35020 ## 103 24016 ## 104 34029 ## dtype: int64 14.7.12 Plotting 14.8 Categories 14.8.1 Creating 14.8.1.1 From List Basic (Auto Category Mapping) Basic syntax return categorical index with sequence with code 0,1,2,3… mapping to first found category In this case, low(0), high(1), medium(2) temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [high, low, medium] type( temp_cat ) ## &lt;class &#39;pandas.core.arrays.categorical.Categorical&#39;&gt; Manual Category Mapping During creation, we can specify mapping of codes to category: low(0), medium(1), high(2) temp_cat = pd.Categorical(temp, categories=[&#39;low&#39;,&#39;medium&#39;,&#39;high&#39;]) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [low, medium, high] 14.8.1.2 From Series We can ‘add’ categorical structure into a Series. With these methods, additional property (.cat) is added as a categorical accessor Through this accessor, you gain access to various properties of the category such as .codes, .categories. But not .get_values() as the information is in the Series itself Can we manual map category ????? temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Series(temp, dtype=&#39;category&#39;) print (type(temp_cat)) # Series object ## &lt;class &#39;pandas.core.series.Series&#39;&gt; print (type(temp_cat.cat)) # Categorical Accessor ## &lt;class &#39;pandas.core.arrays.categorical.CategoricalAccessor&#39;&gt; Method below has the same result as above by using .astype(‘category’) It is useful adding category structure into existing series. temp_ser = pd.Series(temp) temp_cat = pd.Series(temp).astype(&#39;category&#39;) print (type(temp_cat)) # Series object ## &lt;class &#39;pandas.core.series.Series&#39;&gt; print (type(temp_cat.cat)) # Categorical Accessor ## &lt;class &#39;pandas.core.arrays.categorical.CategoricalAccessor&#39;&gt; temp_cat.cat.categories ## Index([&#39;high&#39;, &#39;low&#39;, &#39;medium&#39;], dtype=&#39;object&#39;) 14.8.1.3 Ordering Category temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp, categories=[&#39;low&#39;,&#39;medium&#39;,&#39;high&#39;], ordered=True) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [low &lt; medium &lt; high] temp_cat.get_values() ## array([&#39;low&#39;, &#39;high&#39;, &#39;medium&#39;, &#39;high&#39;, &#39;high&#39;, &#39;low&#39;, &#39;medium&#39;, &#39;medium&#39;, ## &#39;high&#39;], dtype=object) temp_cat.codes ## array([0, 2, 1, 2, 2, 0, 1, 1, 2], dtype=int8) temp_cat[0] &lt; temp_cat[3] ## False 14.8.2 Properties 14.8.2.1 .categories first element’s code = 0 second element’s code = 1 third element’s code = 2 temp_cat.categories ## Index([&#39;low&#39;, &#39;medium&#39;, &#39;high&#39;], dtype=&#39;object&#39;) 14.8.2.2 .codes Codes are actual integer value stored as array. 1 represent ‘high’, temp_cat.codes ## array([0, 2, 1, 2, 2, 0, 1, 1, 2], dtype=int8) 14.8.3 Rename Category 14.8.3.1 Renamce To New Category Object .rename_categories() method return a new category object with new changed categories temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] new_temp_cat = temp_cat.rename_categories([&#39;sejuk&#39;,&#39;sederhana&#39;,&#39;panas&#39;]) new_temp_cat ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (3, object): [sejuk &lt; sederhana &lt; panas] temp_cat # original category object categories not changed ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [low &lt; medium &lt; high] 14.8.3.2 Rename Inplace Observe the original categories had been changed using .rename() temp_cat.categories = [&#39;sejuk&#39;,&#39;sederhana&#39;,&#39;panas&#39;] temp_cat # original category object categories is changed ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (3, object): [sejuk &lt; sederhana &lt; panas] 14.8.4 Adding New Category This return a new category object with added categories temp_cat_more = temp_cat.add_categories([&#39;susah&#39;,&#39;senang&#39;]) temp_cat_more ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (5, object): [sejuk &lt; sederhana &lt; panas &lt; susah &lt; senang] 14.8.5 Removing Category This is not in place, hence return a new categorical object 14.8.5.1 Remove Specific Categor(ies) Elements with its category removed will become NaN temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp) temp_cat_removed = temp_cat.remove_categories(&#39;low&#39;) temp_cat_removed ## [NaN, high, medium, high, high, NaN, medium, medium, high] ## Categories (2, object): [high, medium] 14.8.5.2 Remove Unused Category Since categories removed are not used, there is no impact to the element print (temp_cat_more) ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (5, object): [sejuk &lt; sederhana &lt; panas &lt; susah &lt; senang] temp_cat_more.remove_unused_categories() ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (3, object): [sejuk &lt; sederhana &lt; panas] 14.8.6 Add and Remove Categories In One Step - Set() temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp, ordered=True) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [high &lt; low &lt; medium] temp_cat.set_categories([&#39;low&#39;,&#39;medium&#39;,&#39;sederhana&#39;,&#39;susah&#39;,&#39;senang&#39;]) ## [low, NaN, medium, NaN, NaN, low, medium, medium, NaN] ## Categories (5, object): [low &lt; medium &lt; sederhana &lt; susah &lt; senang] 14.8.7 Categorical Descriptive Analysis 14.8.7.1 At One Glance temp_cat.describe() ## counts freqs ## categories ## high 4 0.444444 ## low 2 0.222222 ## medium 3 0.333333 14.8.7.2 Frequency Count temp_cat.value_counts() ## high 4 ## low 2 ## medium 3 ## dtype: int64 14.8.7.3 Least Frequent Category, Most Frequent Category, and Most Frequent Category ( temp_cat.min(), temp_cat.max(), temp_cat.mode() ) ## (&#39;high&#39;, &#39;medium&#39;, [high] ## Categories (3, object): [high &lt; low &lt; medium]) 14.8.8 Other Methods 14.8.8.1 .get_values() Since actual value stored by categorical object are integer codes, get_values() function return values translated from *.codes** property temp_cat.get_values() #array ## array([&#39;low&#39;, &#39;high&#39;, &#39;medium&#39;, &#39;high&#39;, &#39;high&#39;, &#39;low&#39;, &#39;medium&#39;, &#39;medium&#39;, ## &#39;high&#39;], dtype=object) 14.9 Dummies get_dummies creates columns for each categories The underlying data can be string or pd.Categorical It produces a new pd.DataFrame 14.9.1 Sample Data df = pd.DataFrame ( {&#39;A&#39;: [&#39;A1&#39;, &#39;A2&#39;, &#39;A3&#39;,&#39;A1&#39;,&#39;A3&#39;,&#39;A1&#39;], &#39;B&#39;: [&#39;B1&#39;,&#39;B2&#39;,&#39;B3&#39;,&#39;B1&#39;,&#39;B1&#39;,&#39;B3&#39;], &#39;C&#39;: [&#39;C1&#39;,&#39;C2&#39;,&#39;C3&#39;,&#39;C1&#39;,np.nan,np.nan]}) df ## A B C ## 0 A1 B1 C1 ## 1 A2 B2 C2 ## 2 A3 B3 C3 ## 3 A1 B1 C1 ## 4 A3 B1 NaN ## 5 A1 B3 NaN 14.9.2 Dummies on Array-Like Data pd.get_dummies(df.A) ## A1 A2 A3 ## 0 1 0 0 ## 1 0 1 0 ## 2 0 0 1 ## 3 1 0 0 ## 4 0 0 1 ## 5 1 0 0 14.9.3 Dummies on DataFrame (multiple columns) 14.9.3.1 All Columns pd.get_dummies(df) ## A_A1 A_A2 A_A3 B_B1 B_B2 B_B3 C_C1 C_C2 C_C3 ## 0 1 0 0 1 0 0 1 0 0 ## 1 0 1 0 0 1 0 0 1 0 ## 2 0 0 1 0 0 1 0 0 1 ## 3 1 0 0 1 0 0 1 0 0 ## 4 0 0 1 1 0 0 0 0 0 ## 5 1 0 0 0 0 1 0 0 0 14.9.3.2 Selected Columns cols = [&#39;A&#39;,&#39;B&#39;] pd.get_dummies(df[cols]) ## A_A1 A_A2 A_A3 B_B1 B_B2 B_B3 ## 0 1 0 0 1 0 0 ## 1 0 1 0 0 1 0 ## 2 0 0 1 0 0 1 ## 3 1 0 0 1 0 0 ## 4 0 0 1 1 0 0 ## 5 1 0 0 0 0 1 14.9.4 Dummies with na By default, nan values are ignored pd.get_dummies(df.C) ## C1 C2 C3 ## 0 1 0 0 ## 1 0 1 0 ## 2 0 0 1 ## 3 1 0 0 ## 4 0 0 0 ## 5 0 0 0 Make NaN as a dummy variable pd.get_dummies(df.C,dummy_na=True) ## C1 C2 C3 NaN ## 0 1 0 0 0 ## 1 0 1 0 0 ## 2 0 0 1 0 ## 3 1 0 0 0 ## 4 0 0 0 1 ## 5 0 0 0 1 14.9.5 Specify Prefixes pd.get_dummies(df.A, prefix=&#39;col&#39;) ## col_A1 col_A2 col_A3 ## 0 1 0 0 ## 1 0 1 0 ## 2 0 0 1 ## 3 1 0 0 ## 4 0 0 1 ## 5 1 0 0 pd.get_dummies(df[cols], prefix=[&#39;colA&#39;,&#39;colB&#39;]) ## colA_A1 colA_A2 colA_A3 colB_B1 colB_B2 colB_B3 ## 0 1 0 0 1 0 0 ## 1 0 1 0 0 1 0 ## 2 0 0 1 0 0 1 ## 3 1 0 0 1 0 0 ## 4 0 0 1 1 0 0 ## 5 1 0 0 0 0 1 14.9.6 Dropping First Column Dummies cause colinearity issue for regression as it has redundant column. Dropping a column does not loose any information technically pd.get_dummies(df[cols],drop_first=True) ## A_A2 A_A3 B_B2 B_B3 ## 0 0 0 0 0 ## 1 1 0 1 0 ## 2 0 1 0 1 ## 3 0 0 0 0 ## 4 0 1 0 0 ## 5 0 0 0 1 14.10 Getting External Data 14.10.1 html_table parser Read the web page, create a list: which contain one or more dataframes that maps to each html table found Auto detect column header Auto create index using number starting from 0 read_html(url) # return list of dataframe(s) that maps to web table(s) structure #df_list = pd.read_html(&#39;https://www.bloomberg.com/markets/currencies&#39;) #print (&#39;Total Table(s) Found : &#39;, len(df_list)) #df = df_list[0] #print (df) 14.10.2 CSV Import 14.10.2.1 Syntax pandas.read_csv( &#39;url or filePath&#39;, # path to file or url encoding = &#39;utf_8&#39;, # optional: default is &#39;utf_8&#39; index_col = [&#39;colName1&#39;, ...], # optional: specify one or more index column parse_dates = [&#39;dateCol1&#39;, ...], # optional: specify multiple string column to convert to date na_values = [&#39;.&#39;,&#39;na&#39;,&#39;NA&#39;,&#39;N/A&#39;], # optional: values that is considered NA names = [&#39;newColName1&#39;, ... ], # optional: overwrite column names thousands = &#39;.&#39;, # optional: thousand seperator symbol nrows = n, # optional: load only first n rows skiprows = 0 # optional: don&#39;t load first n rows ) Refer to full codec Python Codec. 14.10.2.2 Default Import By default: - index is sequence of integer 0,1,2… - only two data type: number and string (auto detection) - date is not parsed, hence stayed as string goo = pd.read_csv(&#39;data/goog.csv&#39;, encoding=&#39;utf_8&#39;) goo.head() ## Date Open High Low Close Volume ## 0 12/19/2016 790.219971 797.659973 786.270020 794.200012 1225900 ## 1 12/20/2016 796.760010 798.650024 793.270020 796.419983 925100 ## 2 12/21/2016 795.840027 796.676025 787.099976 794.559998 1208700 ## 3 12/22/2016 792.359985 793.320007 788.580017 791.260010 969100 ## 4 12/23/2016 790.900024 792.739990 787.280029 789.909973 623400 goo.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 61 entries, 0 to 60 ## Data columns (total 6 columns): ## Date 61 non-null object ## Open 61 non-null float64 ## High 61 non-null float64 ## Low 61 non-null float64 ## Close 61 non-null float64 ## Volume 61 non-null int64 ## dtypes: float64(4), int64(1), object(1) ## memory usage: 2.9+ KB 14.10.2.3 Specify Data Types By default read_csv only import data types of float64 and object(str). This is done through auto detection. To customize the data type, use dtype parameter with a dict of definition. d_types = {&#39;Volume&#39;: str} pd.read_csv(&#39;data/goog.csv&#39;, dtype=d_types).head() ## Date Open High Low Close Volume ## 0 12/19/2016 790.219971 797.659973 786.270020 794.200012 1225900 ## 1 12/20/2016 796.760010 798.650024 793.270020 796.419983 925100 ## 2 12/21/2016 795.840027 796.676025 787.099976 794.559998 1208700 ## 3 12/22/2016 792.359985 793.320007 788.580017 791.260010 969100 ## 4 12/23/2016 790.900024 792.739990 787.280029 789.909973 623400 pd.read_csv(&#39;data/goog.csv&#39;, dtype=d_types).info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 61 entries, 0 to 60 ## Data columns (total 6 columns): ## Date 61 non-null object ## Open 61 non-null float64 ## High 61 non-null float64 ## Low 61 non-null float64 ## Close 61 non-null float64 ## Volume 61 non-null object ## dtypes: float64(4), object(2) ## memory usage: 2.9+ KB 14.10.2.4 On The Fly Date Parsing and Indexing You can specify multiple date-alike column for parsing pd.read_csv(&#39;data/goog.csv&#39;, parse_dates=[&#39;Date&#39;]).head() ## Date Open High Low Close Volume ## 0 2016-12-19 790.219971 797.659973 786.270020 794.200012 1225900 ## 1 2016-12-20 796.760010 798.650024 793.270020 796.419983 925100 ## 2 2016-12-21 795.840027 796.676025 787.099976 794.559998 1208700 ## 3 2016-12-22 792.359985 793.320007 788.580017 791.260010 969100 ## 4 2016-12-23 790.900024 792.739990 787.280029 789.909973 623400 pd.read_csv(&#39;data/goog.csv&#39;, parse_dates=[&#39;Date&#39;]).info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 61 entries, 0 to 60 ## Data columns (total 6 columns): ## Date 61 non-null datetime64[ns] ## Open 61 non-null float64 ## High 61 non-null float64 ## Low 61 non-null float64 ## Close 61 non-null float64 ## Volume 61 non-null int64 ## dtypes: datetime64[ns](1), float64(4), int64(1) ## memory usage: 2.9 KB 14.10.2.5 Parse Date, Then Set as Index When date is set as index, the type is DateTimeIndex goo3 = pd.read_csv(&#39;data/goog.csv&#39;,index_col=&#39;Date&#39;, parse_dates=[&#39;Date&#39;]) goo3.head() ## Open High Low Close Volume ## Date ## 2016-12-19 790.219971 797.659973 786.270020 794.200012 1225900 ## 2016-12-20 796.760010 798.650024 793.270020 796.419983 925100 ## 2016-12-21 795.840027 796.676025 787.099976 794.559998 1208700 ## 2016-12-22 792.359985 793.320007 788.580017 791.260010 969100 ## 2016-12-23 790.900024 792.739990 787.280029 789.909973 623400 Observe index is now DateTime data type type(goo3.index) ## &lt;class &#39;pandas.core.indexes.datetimes.DatetimeIndex&#39;&gt; tb.reset_index() ## grp dept G1 G2 All ## 0 D1 17 24 41 ## 1 D2 21 30 51 ## 2 D3 10 25 35 ## 3 D4 15 17 32 ## 4 D5 20 21 41 ## 5 All 83 117 200 14.11 GroupBy Aggretation and summarization require creating DataFrameGroupBy object from existing DataFrame The GroupBy object is a very flexible abstraction. In many ways, you can simply treat it as if it’s a collection of DataFrames, and it does the difficult things under the hood company = pd.read_csv(&#39;data/company.csv&#39;) company.head() ## Company Department Name Age Salary Birthdate ## 0 C1 D1 Yong 45 15000 1/1/1970 ## 1 C1 D1 Chew 35 12000 2/1/1980 ## 2 C1 D2 Lim 34 8000 2/19/1977 ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 14.11.1 Creating Groups com_grp = company.groupby([&#39;Company&#39;,&#39;Department&#39;]) com_grp ## &lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x000000002E3B3BE0&gt; 14.11.2 Properties 14.11.2.1 Number of Groups Created com_grp.ngroups ## 9 14.11.2.2 Row Numbers Associated For Each Group com_grp.groups # return Dictionary ## {(&#39;C1&#39;, &#39;D1&#39;): Int64Index([0, 1], dtype=&#39;int64&#39;), (&#39;C1&#39;, &#39;D2&#39;): Int64Index([2], dtype=&#39;int64&#39;), (&#39;C1&#39;, &#39;D3&#39;): Int64Index([3, 4, 5], dtype=&#39;int64&#39;), (&#39;C2&#39;, &#39;D1&#39;): Int64Index([6], dtype=&#39;int64&#39;), (&#39;C2&#39;, &#39;D2&#39;): Int64Index([7, 8, 9], dtype=&#39;int64&#39;), (&#39;C2&#39;, &#39;D3&#39;): Int64Index([10, 11, 12], dtype=&#39;int64&#39;), (&#39;C3&#39;, &#39;D1&#39;): Int64Index([14], dtype=&#39;int64&#39;), (&#39;C3&#39;, &#39;D2&#39;): Int64Index([15], dtype=&#39;int64&#39;), (&#39;C3&#39;, &#39;D3&#39;): Int64Index([13, 16, 17], dtype=&#39;int64&#39;)} 14.11.3 Methods 14.11.3.1 Number of Rows In Each Group com_grp.size() # return panda Series object ## Company Department ## C1 D1 2 ## D2 1 ## D3 3 ## C2 D1 1 ## D2 3 ## D3 3 ## C3 D1 1 ## D2 1 ## D3 3 ## dtype: int64 14.11.3.2 Valid (not Null) Data Count For Each Fields In The Group com_grp.count() # return panda DataFrame object ## Name Age Salary Birthdate ## Company Department ## C1 D1 2 2 2 2 ## D2 1 1 1 1 ## D3 3 3 3 3 ## C2 D1 1 1 1 1 ## D2 3 3 3 3 ## D3 3 3 3 3 ## C3 D1 1 1 1 1 ## D2 1 1 1 1 ## D3 3 3 3 3 14.11.4 Retrieve Rows All row retrieval operations return a dataframe 14.11.4.1 Retrieve N Rows For Each Groups Example below retrieve 2 rows from each group com_grp.head(2) ## Company Department Name Age Salary Birthdate ## 0 C1 D1 Yong 45 15000 1/1/1970 ## 1 C1 D1 Chew 35 12000 2/1/1980 ## 2 C1 D2 Lim 34 8000 2/19/1977 ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 ## .. ... ... ... ... ... ... ## 11 C2 D3 Jeannie 30 12500 12/31/1980 ## 13 C3 D3 Chang 32 7900 7/26/1973 ## 14 C3 D1 Ong 44 17500 8/21/1980 ## 15 C3 D2 Lily 41 15300 7/17/1990 ## 16 C3 D3 Sally 54 21000 7/19/1968 ## ## [14 rows x 6 columns] 14.11.4.2 Retrieve Rows In One Specific Group com_grp.get_group((&#39;C1&#39;,&#39;D3&#39;)) ## Company Department Name Age Salary Birthdate ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 ## 5 C1 D3 Sui Wei 56 3000 6/15/1990 14.11.4.3 Retrieve n-th Row From Each Group Row number is 0-based com_grp.nth(-1) # retireve last row from each group ## Age Birthdate Name Salary ## Company Department ## C1 D1 35 2/1/1980 Chew 12000 ## D2 34 2/19/1977 Lim 8000 ## D3 56 6/15/1990 Sui Wei 3000 ## C2 D1 18 7/15/1997 Anne 400 ## D2 46 10/31/1988 Jimmy 14000 ## D3 29 12/1/1963 Bernard 9800 ## C3 D1 44 8/21/1980 Ong 17500 ## D2 41 7/17/1990 Lily 15300 ## D3 37 3/16/1969 Esther 13500 14.11.5 Iteration DataFrameGroupBy object can be thought as a collection of named groups def print_groups (g): for name,group in g: print (name) print (group[:2]) print_groups (com_grp) ## (&#39;C1&#39;, &#39;D1&#39;) ## Company Department Name Age Salary Birthdate ## 0 C1 D1 Yong 45 15000 1/1/1970 ## 1 C1 D1 Chew 35 12000 2/1/1980 ## (&#39;C1&#39;, &#39;D2&#39;) ## Company Department Name Age Salary Birthdate ## 2 C1 D2 Lim 34 8000 2/19/1977 ## (&#39;C1&#39;, &#39;D3&#39;) ## Company Department Name Age Salary Birthdate ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 ## (&#39;C2&#39;, &#39;D1&#39;) ## Company Department Name Age Salary Birthdate ## 6 C2 D1 Anne 18 400 7/15/1997 ## (&#39;C2&#39;, &#39;D2&#39;) ## Company Department Name Age Salary Birthdate ## 7 C2 D2 Deborah 30 8600 8/15/1984 ## 8 C2 D2 Nikalus 51 12000 9/18/2000 ## (&#39;C2&#39;, &#39;D3&#39;) ## Company Department Name Age Salary Birthdate ## 10 C2 D3 Michael 38 17000 11/30/1997 ## 11 C2 D3 Jeannie 30 12500 12/31/1980 ## (&#39;C3&#39;, &#39;D1&#39;) ## Company Department Name Age Salary Birthdate ## 14 C3 D1 Ong 44 17500 8/21/1980 ## (&#39;C3&#39;, &#39;D2&#39;) ## Company Department Name Age Salary Birthdate ## 15 C3 D2 Lily 41 15300 7/17/1990 ## (&#39;C3&#39;, &#39;D3&#39;) ## Company Department Name Age Salary Birthdate ## 13 C3 D3 Chang 32 7900 7/26/1973 ## 16 C3 D3 Sally 54 21000 7/19/1968 com_grp ## &lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x000000002E3B3BE0&gt; 14.11.6 Apply Aggregate Functions to Groups Aggregate apply functions to columns in every groups, and return a summary data for each group 14.11.6.1 Apply One Function to One or More Columns com_grp[&#39;Age&#39;].sum() ## Company Department ## C1 D1 80 ## D2 34 ## D3 134 ## C2 D1 18 ## D2 127 ## D3 97 ## C3 D1 44 ## D2 41 ## D3 123 ## Name: Age, dtype: int64 com_grp[[&#39;Age&#39;,&#39;Salary&#39;]].sum() ## Age Salary ## Company Department ## C1 D1 80 27000 ## D2 34 8000 ## D3 134 30500 ## C2 D1 18 400 ## D2 127 34600 ## D3 97 39300 ## C3 D1 44 17500 ## D2 41 15300 ## D3 123 42400 14.11.6.2 Apply One or More Functions To All Columns com_grp.agg(np.mean) ## Age Salary ## Company Department ## C1 D1 40.000000 13500.000000 ## D2 34.000000 8000.000000 ## D3 44.666667 10166.666667 ## C2 D1 18.000000 400.000000 ## D2 42.333333 11533.333333 ## D3 32.333333 13100.000000 ## C3 D1 44.000000 17500.000000 ## D2 41.000000 15300.000000 ## D3 41.000000 14133.333333 com_grp.agg([np.mean,np.sum]) ## Age Salary ## mean sum mean sum ## Company Department ## C1 D1 40.000000 80 13500.000000 27000 ## D2 34.000000 34 8000.000000 8000 ## D3 44.666667 134 10166.666667 30500 ## C2 D1 18.000000 18 400.000000 400 ## D2 42.333333 127 11533.333333 34600 ## D3 32.333333 97 13100.000000 39300 ## C3 D1 44.000000 44 17500.000000 17500 ## D2 41.000000 41 15300.000000 15300 ## D3 41.000000 123 14133.333333 42400 14.11.6.3 Apply Different Functions To Different Columns com_grp.agg({&#39;Age&#39;:np.mean, &#39;Salary&#39;: [np.min,np.max]}) ## Age Salary ## mean amin amax ## Company Department ## C1 D1 40.000000 12000 15000 ## D2 34.000000 8000 8000 ## D3 44.666667 2500 25000 ## C2 D1 18.000000 400 400 ## D2 42.333333 8600 14000 ## D3 32.333333 9800 17000 ## C3 D1 44.000000 17500 17500 ## D2 41.000000 15300 15300 ## D3 41.000000 7900 21000 14.11.7 Transform Transform is an operation used combined with DataFrameGroupBy object transform() return a new DataFrame object grp = company.groupby(&#39;Company&#39;) grp.size() ## Company ## C1 6 ## C2 7 ## C3 5 ## dtype: int64 transform() perform a function to a group, and expands and replicate it to multiple rows according to original DataFrame grp[[&#39;Age&#39;,&#39;Salary&#39;]].transform(&#39;sum&#39;) ## Age Salary ## 0 248 65500 ## 1 248 65500 ## 2 248 65500 ## 3 248 65500 ## 4 248 65500 ## .. ... ... ## 13 208 75200 ## 14 208 75200 ## 15 208 75200 ## 16 208 75200 ## 17 208 75200 ## ## [18 rows x 2 columns] grp.transform( lambda x:x+10 ) ## Age Salary ## 0 55 15010 ## 1 45 12010 ## 2 44 8010 ## 3 33 2510 ## 4 65 25010 ## .. ... ... ## 13 42 7910 ## 14 54 17510 ## 15 51 15310 ## 16 64 21010 ## 17 47 13510 ## ## [18 rows x 2 columns] 14.12 Concat 14.12.1 Sample Data s1 = pd.Series([&#39;A1&#39;,&#39;A2&#39;,&#39;A3&#39;,&#39;A4&#39;]) s2 = pd.Series([&#39;B1&#39;,&#39;B2&#39;,&#39;B3&#39;,&#39;B4&#39;]) s3 = pd.Series([&#39;C1&#39;,&#39;C2&#39;,&#39;C3&#39;,&#39;C4&#39;]) df = pd.DataFrame({ &#39;A&#39;: s1, &#39;B&#39;: s2}) df ## A B ## 0 A1 B1 ## 1 A2 B2 ## 2 A3 B3 ## 3 A4 B4 14.12.2 Column-Wise 14.12.2.1 Multiple Arrays/Series Added series will have 0,1,2,… column names pd.concat([s1,s2,s3],axis=1) ## 0 1 2 ## 0 A1 B1 C1 ## 1 A2 B2 C2 ## 2 A3 B3 C3 ## 3 A4 B4 C4 14.12.2.2 DataFrame and Series No change to original data frame column name Added columns from series will have 0,1,2,3,.. column name pd.concat([df,s3,s1],axis=1) ## A B 0 1 ## 0 A1 B1 C1 A1 ## 1 A2 B2 C2 A2 ## 2 A3 B3 C3 A3 ## 3 A4 B4 C4 A4 14.12.3 Row-Wise 14.13 Fundamental Analysis 14.13.1 Structure of the Dataframe (.info()) info() is a function that print information to screen. It doesn’t return any object dataframe.info() # display columns and number of rows (that has no missing data) df.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 4 entries, 0 to 3 ## Data columns (total 2 columns): ## A 4 non-null object ## B 4 non-null object ## dtypes: object(2) ## memory usage: 144.0+ bytes 14.13.2 First Few Rows (.head()) dataframe.head (n) # return dataframe of first n rows, default n = 5 df.head() ## A B ## 0 A1 B1 ## 1 A2 B2 ## 2 A3 B3 ## 3 A4 B4 14.14 Missing Data 14.14.1 What Is Considered Missing Data ? 14.14.2 Sample Data df = pd.DataFrame( np.random.randn(5, 3), index =[&#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;f&#39;, &#39;h&#39;], columns =[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]) df[&#39;four&#39;] = &#39;bar&#39; df[&#39;five&#39;] = df[&#39;one&#39;] &gt; 0 df ## one two three four five ## a -0.155909 -0.501790 0.235569 bar False ## c -1.763605 -1.095862 -1.087766 bar False ## e -0.305170 -0.473748 -0.200595 bar False ## f 0.355197 0.689518 0.410590 bar True ## h -0.564978 0.599391 -0.162936 bar False df.reindex([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]) ## one two three four five ## a -0.155909 -0.501790 0.235569 bar False ## b NaN NaN NaN NaN NaN ## c -1.763605 -1.095862 -1.087766 bar False ## d NaN NaN NaN NaN NaN ## e -0.305170 -0.473748 -0.200595 bar False ## f 0.355197 0.689518 0.410590 bar True ## g NaN NaN NaN NaN NaN ## h -0.564978 0.599391 -0.162936 bar False How Missing Data For Each Column ? df.count() ## one 5 ## two 5 ## three 5 ## four 5 ## five 5 ## dtype: int64 len(df.index) - df.count() ## one 0 ## two 0 ## three 0 ## four 0 ## five 0 ## dtype: int64 df.isnull() ## one two three four five ## a False False False False False ## c False False False False False ## e False False False False False ## f False False False False False ## h False False False False False df.describe() ## one two three ## count 5.000000 5.000000 5.000000 ## mean -0.486893 -0.156498 -0.161028 ## std 0.788635 0.772882 0.579752 ## min -1.763605 -1.095862 -1.087766 ## 25% -0.564978 -0.501790 -0.200595 ## 50% -0.305170 -0.473748 -0.162936 ## 75% -0.155909 0.599391 0.235569 ## max 0.355197 0.689518 0.410590 14.15 Pandas DateTime pandas contains extensive capabilities and features for working with time series data for all domains. Using the NumPy datetime64 and timedelta64 dtypes panda.Timestamp, a subclass of datetime.datetime, is pandas? scalar type for timezone-naive or timezone-aware datetime data. It mimics datetime.datime 14.16 DateTimeIndex 14.16.1 Creating Source can be string, date, datetime object 14.16.1.1 Convert From When the input is list-like, to_datetime convert to DateTimeIndex dti = pd.to_datetime([&#39;2011-01-03&#39;, # from string date(2018,4,13), # from date datetime(2018,3,1,7,30)]# from datetime ) dti ## DatetimeIndex([&#39;2011-01-03 00:00:00&#39;, &#39;2018-04-13 00:00:00&#39;, ## &#39;2018-03-01 07:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=None) dti[1] ## Timestamp(&#39;2018-04-13 00:00:00&#39;) 14.16.2 Instance Method 14.16.2.1 Conversion to: datetime.datetime Use to_pydatetime to convert into python standard datetime object print(dti.to_pydatetime()) ## [datetime.datetime(2011, 1, 3, 0, 0) datetime.datetime(2018, 4, 13, 0, 0) ## datetime.datetime(2018, 3, 1, 7, 30)] print(type(dti.to_pydatetime())) ## &lt;class &#39;numpy.ndarray&#39;&gt; 14.16.2.2 Converion: to_series This creates index and data with the same value dti = pd.date_range(&#39;2018-02&#39;, periods=4, freq=&#39;M&#39;) dts = dti.to_series() print( dts) ## 2018-02-28 2018-02-28 ## 2018-03-31 2018-03-31 ## 2018-04-30 2018-04-30 ## 2018-05-31 2018-05-31 ## Freq: M, dtype: datetime64[ns] print(type(dts)) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; 14.16.2.3 Converion: to_frame() This convert to single column dataframe with index as the same value dtf = dti.to_frame() dtf ## 0 ## 2018-02-28 2018-02-28 ## 2018-03-31 2018-03-31 ## 2018-04-30 2018-04-30 ## 2018-05-31 2018-05-31 dtf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## DatetimeIndex: 4 entries, 2018-02-28 to 2018-05-31 ## Freq: M ## Data columns (total 1 columns): ## 0 4 non-null datetime64[ns] ## dtypes: datetime64[ns](1) ## memory usage: 64.0 bytes 14.16.3 Properties dti = pd.date_range(&#39;2018-02&#39;, periods=4, freq=&#39;D&#39;) print( dti.weekday ) ## Int64Index([3, 4, 5, 6], dtype=&#39;int64&#39;) print( dti.month ) ## Int64Index([2, 2, 2, 2], dtype=&#39;int64&#39;) "],
["matplotlib-2.html", "Chapter 15 matplotlib 15.1 Library 15.2 Sample Data 15.3 MATLAB-like API 15.4 Object-Oriented API 15.5 Histogram 15.6 Scatter Plot 15.7 Bar Chart", " Chapter 15 matplotlib from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:75% !important; margin-left:350px; }&lt;/style&gt;&quot;)) #%matplotlib inline ## &lt;IPython.core.display.HTML object&gt; import numpy as np import pandas as pd import matplotlib.pyplot as plt import math import seaborn as sns pd.set_option( &#39;display.notebook_repr_html&#39;, False) # render Series and DataFrame as text, not HTML pd.set_option( &#39;display.max_column&#39;, 10) # number of columns pd.set_option( &#39;display.max_rows&#39;, 10) # number of rows pd.set_option( &#39;display.width&#39;, 90) # number of characters per row 15.1 Library import matplotlib import matplotlib.pyplot as plt from plydata import define, query, select, group_by, summarize, arrange, head, rename import plotnine from plotnine import * import os os.environ[&#39;QT_QPA_PLATFORM_PLUGIN_PATH&#39;] = &quot;C:\\ProgramData\\Anaconda3\\Library\\plugins\\platforms&quot; 15.2 Sample Data This chapter uses the sample data generate with below code. The idea is to simulate two categorical-alike feature, and two numeric value feature: com is random character between ?C1?, ?C2? and ?C3? dept is random character between ?D1?, ?D2?, ?D3?, ?D4? and ?D5? grp is random character with randomly generated ?G1?, ?G2? value1 represents numeric value, normally distributed at mean 50 value2 is numeric value, normally distributed at mean 25 n = 200 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,6, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,3, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2, &#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 value3 ## 0 C3 D1 G2 58.001073 20.797796 4.565181 ## 1 C2 D4 G2 47.122054 20.691133 36.084163 ## 2 C3 D5 G1 49.497686 15.715835 7.232685 ## 3 C1 D3 G2 50.129623 26.790262 -6.875583 ## 4 C3 D3 G1 51.620032 23.704337 11.909618 mydf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 200 entries, 0 to 199 ## Data columns (total 6 columns): ## comp 200 non-null object ## dept 200 non-null object ## grp 200 non-null object ## value1 200 non-null float64 ## value2 200 non-null float64 ## value3 200 non-null float64 ## dtypes: float64(3), object(3) ## memory usage: 9.5+ KB 15.3 MATLAB-like API The good thing about the pylab MATLAB-style API is that it is easy to get started with if you are familiar with MATLAB, and it has a minumum of coding overhead for simple plots. However, I’d encourrage not using the MATLAB compatible API for anything but the simplest figures. Instead, I recommend learning and using matplotlib’s object-oriented plotting API. It is remarkably powerful. For advanced figures with subplots, insets and other components it is very nice to work with. 15.3.1 Sample Data # Sample Data x = np.linspace(0,5,10) y = x ** 2 15.3.2 Single Plot #plt.figure() #plt.xlabel(&#39;x&#39;) #plt.ylabel(&#39;y&#39;) #plt.plot(x,y,&#39;red&#39;) #plt.title(&#39;My Good Data&#39;) #plt.show() 15.3.3 Multiple Subplots Each call lto subplot() will create a new container for subsequent plot command plt.figure() ## &lt;Figure size 267.36x250 with 0 Axes&gt; plt.subplot(1,2,1) # 1 row, 2 cols, at first box ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000002E2B4DD8&gt; plt.plot(x,y,&#39;r--&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000008671E80&gt;] plt.subplot(1,2,2) # 1 row, 2 cols, at second box ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000008671CC0&gt; plt.plot(y,x,&#39;g*-&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000009685898&gt;] plt.show() 15.4 Object-Oriented API 15.4.1 Sample Data # Sample Data x = np.linspace(0,5,10) y = x ** 2 15.4.2 Single Plot One figure, one axes fig = plt.figure() axes = fig.add_axes([0,0,1,1]) # left, bottom, width, height (range 0 to 1) axes.plot(x, y, &#39;r&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x00000000086A9908&gt;] axes.set_xlabel(&#39;x&#39;) ## Text(0.5, 0, &#39;x&#39;) axes.set_ylabel(&#39;y&#39;) ## Text(0, 0.5, &#39;y&#39;) axes.set_title(&#39;title&#39;) ## Text(0.5, 1.0, &#39;title&#39;) plt.show() 15.4.3 Multiple Axes In One Plot This is still considered a single plot, but with multiple axes fig = plt.figure() ax1 = fig.add_axes([0, 0, 1, 1]) # main axes ax2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes ax1.plot(x,y,&#39;r&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x000000000972A588&gt;] ax1.set_xlabel(&#39;x&#39;) ## Text(0.5, 0, &#39;x&#39;) ax1.set_ylabel(&#39;y&#39;) ## Text(0, 0.5, &#39;y&#39;) ax2.plot(y, x, &#39;g&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x000000000975FEB8&gt;] ax2.set_xlabel(&#39;y&#39;) ## Text(0.5, 0, &#39;y&#39;) ax2.set_ylabel(&#39;x&#39;) ## Text(0, 0.5, &#39;x&#39;) ax2.set_title(&#39;insert title&#39;) ## Text(0.5, 1.0, &#39;insert title&#39;) plt.show() 15.4.4 Multiple Subplots One figure can contain multiple subplots Each subplot has one axes 15.4.4.1 Simple Subplots - all same size subplots() function return axes object that is iterable. Single Row Grid Single row grid means axes is an 1-D array. Hence can use for to iterate through axes fig, axes = plt.subplots( nrows=1,ncols=3 ) print (axes.shape) ## (3,) for ax in axes: ax.plot(x, y, &#39;r&#39;) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;y&#39;) ax.set_title(&#39;title&#39;) ax.text(0.2,0.5,&#39;One&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x00000000098116A0&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## Text(0.2, 0.5, &#39;One&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000009811B70&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## Text(0.2, 0.5, &#39;One&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x000000000981E128&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## Text(0.2, 0.5, &#39;One&#39;) plt.show() Multiple Row Grid Multile row grid means axes is an 2-D array. Hence can use two levels of for loop to iterate through each row and column fig, axes = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) print (axes.shape) ## (2, 3) for i in range(axes.shape[0]): for j in range(axes.shape[1]): axes[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;(0, 0)&#39;) ## Text(0.5, 0.5, &#39;(0, 1)&#39;) ## Text(0.5, 0.5, &#39;(0, 2)&#39;) ## Text(0.5, 0.5, &#39;(1, 0)&#39;) ## Text(0.5, 0.5, &#39;(1, 1)&#39;) ## Text(0.5, 0.5, &#39;(1, 2)&#39;) plt.show() 15.4.4.2 Complicated Subplots - different size GridSpec specify grid size of the figure Manually specify each subplot and their relevant grid position and size plt.figure(figsize=(5,5)) ## &lt;Figure size 500x500 with 0 Axes&gt; grid = plt.GridSpec(2, 3, hspace=0.4, wspace=0.4) plt.subplot(grid[0, 0]) #row 0, col 0 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000099D0DA0&gt; plt.subplot(grid[0, 1:]) #row 0, col 1 to : ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000099F4160&gt; plt.subplot(grid[1, :2]) #row 1, col 0:2 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009A27358&gt; plt.subplot(grid[1, 2]); #row 1, col 2 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009A56978&gt; plt.show() plt.figure(figsize=(5,5)) ## &lt;Figure size 500x500 with 0 Axes&gt; grid = plt.GridSpec(4, 4, hspace=0.8, wspace=0.4) plt.subplot(grid[:3, 0]) # row 0:3, col 0 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009ABFCC0&gt; plt.subplot(grid[:3, 1: ]) # row 0:3, col 1: ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009ACFA58&gt; plt.subplot(grid[3, 1: ]); # row 3, col 1: ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009AD9F60&gt; plt.show() -1 means last row or column plt.figure(figsize=(6,6)) ## &lt;Figure size 600x600 with 0 Axes&gt; grid = plt.GridSpec(4, 4, hspace=0.4, wspace=1.2) plt.subplot(grid[:-1, 0 ]) # row 0 till last row (not including last row), col 0 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009A73C18&gt; plt.subplot(grid[:-1, 1:]) # row 0 till last row (not including last row), col 1 till end ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000099D0860&gt; plt.subplot(grid[-1, 1: ]); # row last row, col 1 till end ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009A89898&gt; plt.show() 15.4.5 Figure Customization 15.4.5.1 Avoid Overlap - Use tight_layout() Sometimes when the figure size is too small, plots will overlap each other. - tight_layout() will introduce extra white space in between the subplots to avoid overlap. - The figure became wider. fig, axes = plt.subplots( nrows=1,ncols=2) for ax in axes: ax.plot(x, y, &#39;r&#39;) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;y&#39;) ax.set_title(&#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x00000000097A2A90&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x00000000097C0EF0&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) fig.tight_layout() # adjust the positions of axes so that there is no overlap plt.show() 15.4.5.2 Avoid Overlap - Change Figure Size fig, axes = plt.subplots( nrows=1,ncols=2,figsize=(12,3)) for ax in axes: ax.plot(x, y, &#39;r&#39;) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;y&#39;) ax.set_title(&#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x000000000978ED30&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x00000000096FB3C8&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) plt.show() 15.4.5.3 Text Within Figure fig = plt.figure() fig.text(0.5, 0.5, &#39;This Is A Sample&#39;,fontsize=18, ha=&#39;center&#39;); ## Text(0.5, 0.5, &#39;This Is A Sample&#39;) axes = fig.add_axes([0,0,1,1]) # left, bottom, width, height (range 0 to 1) plt.show() 15.4.6 Axes Customization 15.4.6.1 Y-Axis Limit fig = plt.figure() fig.add_axes([0,0,1,1], ylim=(-2,5)); ## &lt;matplotlib.axes._axes.Axes object at 0x0000000009A5CBE0&gt; plt.show() 15.4.6.2 Text Within Axes fig, ax = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) for i in range(2): for j in range(3): ax[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;(0, 0)&#39;) ## Text(0.5, 0.5, &#39;(0, 1)&#39;) ## Text(0.5, 0.5, &#39;(0, 2)&#39;) ## Text(0.5, 0.5, &#39;(1, 0)&#39;) ## Text(0.5, 0.5, &#39;(1, 1)&#39;) ## Text(0.5, 0.5, &#39;(1, 2)&#39;) plt.show() plt.text(0.5, 0.5, &#39;one&#39;,fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;one&#39;) plt.show() 15.4.6.3 Share Y Axis Label fig, ax = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) # removed inner label plt.show() 15.4.6.4 Create Subplot Individually Each call lto subplot() will create a new container for subsequent plot command plt.subplot(2,4,1) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009B70FD0&gt; plt.text(0.5, 0.5, &#39;one&#39;,fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;one&#39;) plt.subplot(2,4,8) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000A05A7F0&gt; plt.text(0.5, 0.5, &#39;eight&#39;,fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;eight&#39;) plt.show() Iterate through subplots (ax) to populate them fig, ax = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) for i in range(2): for j in range(3): ax[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;(0, 0)&#39;) ## Text(0.5, 0.5, &#39;(0, 1)&#39;) ## Text(0.5, 0.5, &#39;(0, 2)&#39;) ## Text(0.5, 0.5, &#39;(1, 0)&#39;) ## Text(0.5, 0.5, &#39;(1, 1)&#39;) ## Text(0.5, 0.5, &#39;(1, 2)&#39;) plt.show() 15.5 Histogram plt.hist(mydf.value1, bins=12); ## (array([ 2., 4., 10., 16., 35., 38., 31., 27., 22., 6., 6., 3.]), array([37.09329803, 39.25349925, 41.41370047, 43.57390169, 45.73410291, ## 47.89430413, 50.05450535, 52.21470657, 54.37490779, 56.53510901, ## 58.69531023, 60.85551145, 63.01571267]), &lt;a list of 12 Patch objects&gt;) plt.show() 15.6 Scatter Plot plt.scatter(mydf.value1, mydf.value2) ## &lt;matplotlib.collections.PathCollection object at 0x0000000009F35438&gt; plt.show() 15.7 Bar Chart com_grp = mydf.groupby(&#39;comp&#39;) grpdf = com_grp[&#39;value1&#39;].sum().reset_index() grpdf ## comp value1 ## 0 C1 3988.891405 ## 1 C2 3007.230028 ## 2 C3 3017.883718 plt.bar(grpdf.comp, grpdf.value1); ## &lt;BarContainer object of 3 artists&gt; plt.xlabel(&#39;Company&#39;) ## Text(0.5, 0, &#39;Company&#39;) plt.ylabel(&#39;Sum of Value 1&#39;) ## Text(0, 0.5, &#39;Sum of Value 1&#39;) plt.show() "],
["seaborn.html", "Chapter 16 seaborn 16.1 Seaborn and Matplotlib 16.2 Sample Data 16.3 Scatter Plot 16.4 Histogram 16.5 Bar Chart 16.6 Faceting 16.7 Pair Grid", " Chapter 16 seaborn 16.1 Seaborn and Matplotlib seaborn returns a matplotlib object that can be modified by the options in the pyplot module Often, these options are wrapped by seaborn and .plot() in pandas and available as arguments 16.2 Sample Data n = 100 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2, &#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 value3 ## 0 C2 D2 G1 58.413310 17.257990 8.308861 ## 1 C2 D2 G1 40.941753 15.972926 -40.682326 ## 2 C1 D1 G2 50.870315 19.156772 11.312435 ## 3 C2 D1 G2 34.040375 20.682569 -2.149571 ## 4 C3 D2 G1 43.585637 20.666183 59.560983 16.3 Scatter Plot 16.3.1 2x Numeric sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009D93EF0&gt; plt.show() sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, fit_reg=False, data=mydf); #hide regresion line ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009FEC0B8&gt; plt.show() 16.3.2 2xNumeric + 1x Categorical Use hue to represent additional categorical feature sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, data=mydf, hue=&#39;comp&#39;, fit_reg=False); ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009F4B668&gt; plt.show() 16.3.3 2xNumeric + 2x Categorical Use col and hue to represent two categorical features sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, fit_reg=False, data=mydf); ## &lt;seaborn.axisgrid.FacetGrid object at 0x000000000970DD68&gt; plt.show() 16.3.4 2xNumeric + 3x Categorical Use row, col and hue to represent three categorical features sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, row=&#39;dept&#39;,col=&#39;comp&#39;, hue=&#39;grp&#39;, fit_reg=False, data=mydf); ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009A89B00&gt; plt.show() 16.3.5 Customization 16.3.5.1 size size: height in inch for each facet sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, size=3,fit_reg=False, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009D316D8&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\seaborn\\regression.py:546: UserWarning: The `size` paramter has been renamed to `height`; please update your code. ## warnings.warn(msg, UserWarning) ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\seaborn\\axisgrid.py:311: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## fig, axes = plt.subplots(nrow, ncol, **kwargs) plt.show() Observe that even size is very large, lmplot will fit (shrink) everything into one row by deafult. See example below. sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, size=5,fit_reg=False, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009B01B70&gt; plt.show() 16.3.5.2 col_wrap To avoid lmplot from shrinking the chart, we use col_wrap=&lt;col_number to wrap the output. Compare the size (height of each facet) with the above without col_wrap. Below chart is larger. sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, size=5, col_wrap=2, fit_reg=False, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000006E1BC50&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\seaborn\\axisgrid.py:320: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## fig = plt.figure(figsize=figsize) plt.show() 16.4 Histogram seaborn.distplot( a, # Series, 1D Array or List bins=None, hist=True, rug = False, vertical=False ) 16.4.1 1x Numeric sns.distplot(mydf.value1) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009A56400&gt; plt.show() sns.distplot(mydf.value1,hist=True,rug=True,vertical=True, bins=30,color=&#39;g&#39;) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009FF5A90&gt; plt.show() 16.5 Bar Chart com_grp = mydf.groupby(&#39;comp&#39;) grpdf = com_grp[&#39;value1&#39;].sum().reset_index() grpdf ## comp value1 ## 0 C1 1343.247772 ## 1 C2 1871.515883 ## 2 C3 1783.986137 16.5.1 1x Categorical, 1x Numeric sns.barplot(x=&#39;comp&#39;,y=&#39;value1&#39;,data=grpdf) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000006BBA8D0&gt; plt.show() 16.5.2 Customization 16.5.2.1 Ordering sns.barplot(x=&#39;comp&#39;,y=&#39;value2&#39;, hue=&#39;grp&#39;, order=[&#39;C3&#39;,&#39;C2&#39;,&#39;C1&#39;], hue_order=[&#39;G1&#39;,&#39;G2&#39;,&#39;G3&#39;], data=mydf ) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000A255940&gt; plt.show() 16.5.2.2 Flipping X/Y Axis sns.barplot(x=&#39;value2&#39;,y=&#39;comp&#39;, hue=&#39;grp&#39;,data=mydf) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009FB6A90&gt; plt.show() 16.6 Faceting Faceting in Seaborn is a generic function that works with matplotlib various plot utility. It support matplotlib as well as seaborn plotting utility. 16.6.1 Faceting Histogram g = sns.FacetGrid(mydf, col=&quot;comp&quot;, row=&#39;dept&#39;) g.map(plt.hist, &quot;value1&quot;) ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000006774550&gt; plt.show() g = sns.FacetGrid(mydf, col=&quot;comp&quot;, row=&#39;dept&#39;) g.map(plt.hist, &quot;value1&quot;) ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000006774D30&gt; plt.show() 16.6.2 Faceting Scatter Plot g = sns.FacetGrid(mydf, col=&quot;comp&quot;, row=&#39;dept&#39;,hue=&#39;grp&#39;) g.map(plt.scatter, &quot;value1&quot;,&quot;value2&quot;,alpha=0.7); ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000006EF4DA0&gt; g.add_legend() ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000006EF4DA0&gt; plt.show() 16.7 Pair Grid 16.7.1 Simple Pair Grid g = sns.PairGrid(mydf, hue=&#39;comp&#39;) ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\seaborn\\axisgrid.py:1270: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## squeeze=False) g.map(plt.scatter); ## &lt;seaborn.axisgrid.PairGrid object at 0x000000000983E470&gt; g.add_legend() ## &lt;seaborn.axisgrid.PairGrid object at 0x000000000983E470&gt; plt.show() 16.7.2 Different Diag and OffDiag g = sns.PairGrid(mydf, hue=&#39;comp&#39;) g.map_diag(plt.hist, bins=15) ## &lt;seaborn.axisgrid.PairGrid object at 0x0000000009B547B8&gt; g.map_offdiag(plt.scatter) ## &lt;seaborn.axisgrid.PairGrid object at 0x0000000009B547B8&gt; g.add_legend() ## &lt;seaborn.axisgrid.PairGrid object at 0x0000000009B547B8&gt; plt.show() "],
["plotnine.html", "Chapter 17 plotnine 17.1 Histogram 17.2 Scatter Plot 17.3 Line Chart 17.4 Bar Chart", " Chapter 17 plotnine 17.1 Histogram 17.1.1 1xNumeric plotnine.ggplot( dataframe, aex(x=&#39;colName&#39;)) + geom_histogram( bins=10 ) plotnine.ggplot( dataframe, aex(x=&#39;colName&#39;)) + geom_histogram( binwidth=? ) plotnine.options.figure_size = (3, 3) ggplot(mydf, aes(x=&#39;value1&#39;)) + geom_histogram() # default bins = 10 ## &lt;ggplot: (10165831)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\stats\\stat_bin.py:93: UserWarning: &#39;stat_bin()&#39; using &#39;bins = 10&#39;. Pick better value with &#39;binwidth&#39;. ## warn(msg.format(params[&#39;bins&#39;])) ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;)) + geom_histogram(bins = 15) ## &lt;ggplot: (-9223372036844388941)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;)) + geom_histogram(binwidth = 3) ## &lt;ggplot: (9931128)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.1.2 1xNumeric + 1xCategorical plotnine.ggplot( dataframe, aes(x=&#39;colName&#39;), fill=&#39;categorical-alike-colName&#39;) + geom_histogram() ggplot(mydf, aes(x=&#39;value1&#39;, fill=&#39;grp&#39;)) + geom_histogram(bins=15) ## &lt;ggplot: (10033910)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.2 Scatter Plot 17.2.1 2x Numeric ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + geom_point() ## &lt;ggplot: (-9223372036844741660)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.2.2 2x Numeric + 1x Categorical ggplot( DataFrame, aes(x=&#39;colName1&#39;,y=&#39;colName2&#39;)) + geom_point( aes( color=&#39;categorical-alike-colName&#39;, size=&#39;numberColName&#39; )) ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + geom_point(aes(color=&#39;grp&#39;)) ## &lt;ggplot: (-9223372036847546887)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;,color=&#39;grp&#39;)) + geom_point() ## &lt;ggplot: (-9223372036847532200)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + \\ geom_point(aes( color=&#39;grp&#39; )) ## &lt;ggplot: (-9223372036844749126)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.2.3 2x Numeric + 1x Numeric + 1x Categorical ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + \\ geom_point(aes( color=&#39;grp&#39;, size=&#39;value3&#39; )) ## &lt;ggplot: (9986778)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.2.4 Overlay Smooth Line ggplot(mydf, aes(x=&#39;value1&#39;, y=&#39;value2&#39;)) + \\ geom_point() + \\ geom_smooth() # default method=&#39;loess&#39; ## &lt;ggplot: (-9223372036844286369)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\stats\\smoothers.py:146: UserWarning: Confidence intervals are not yet implementedfor lowess smoothings. ## warnings.warn(&quot;Confidence intervals are not yet implemented&quot; ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;, y=&#39;value2&#39;,fill=&#39;grp&#39;)) + \\ geom_point() + \\ geom_smooth( se=True, color=&#39;red&#39;, method=&#39;lm&#39;, level=0.75) ## &lt;ggplot: (-9223372036847293454)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.3 Line Chart 17.3.1 2x Numeric Data ggplot (mydf.head(15), aes(x=&#39;value1&#39;, y=&#39;value2&#39;)) + geom_line() ## &lt;ggplot: (-9223372036844277518)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.3.2 1x Numeric, 1x Categorical ggplot (mydf.head(15), aes(x=&#39;dept&#39;, y=&#39;value1&#39;)) + geom_line() ## &lt;ggplot: (10038192)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot (mydf.head(30), aes(x=&#39;dept&#39;, y=&#39;value1&#39;)) + geom_line( aes(group=1)) ## &lt;ggplot: (-9223372036847120068)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\layer.py:517: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return not cbook.iterable(value) and (cbook.is_numlike(value) or ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\layer.py:517: MatplotlibDeprecationWarning: ## The is_numlike function was deprecated in Matplotlib 3.0 and will be removed in 3.2. Use isinstance(..., numbers.Number) instead. ## return not cbook.iterable(value) and (cbook.is_numlike(value) or ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.3.3 2x Numeric, 1x Categorical ggplot (mydf.head(15), aes(x=&#39;value1&#39;, y=&#39;value2&#39;)) + geom_line( aes(color=&#39;grp&#39;),size=2) ## &lt;ggplot: (7482351)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 17.4 Bar Chart 17.4.0.1 1x Categorical Single categorical variable produces frequency chart. tmpdf = mydf.groupby([&#39;comp&#39;],as_index=False).count() tmpdf ## comp dept grp value1 value2 value3 ## 0 C1 27 27 27 27 27 ## 1 C2 37 37 37 37 37 ## 2 C3 36 36 36 36 36 tmpdf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## Int64Index: 3 entries, 0 to 2 ## Data columns (total 6 columns): ## comp 3 non-null object ## dept 3 non-null int64 ## grp 3 non-null int64 ## value1 3 non-null int64 ## value2 3 non-null int64 ## value3 3 non-null int64 ## dtypes: int64(5), object(1) ## memory usage: 168.0+ bytes ggplot (tmpdf, aes(x=&#39;comp&#39;, y=&#39;grp&#39;)) +geom_col() ## &lt;ggplot: (-9223372036844589017)&gt; ## ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) "],
["sklearn.html", "Chapter 18 sklearn 18.1 Setup (hidden) 18.2 The Library 18.3 Model Fitting 18.4 Model Tuning 18.5 High Level ML Process 18.6 Built-in Datasets 18.7 Train Test Data Splitting 18.8 Polynomial Transform 18.9 Imputation of Missing Data 18.10 Scaling 18.11 Pipeline 18.12 Cross Validation", " Chapter 18 sklearn This is a machine learning library. 18.1 Setup (hidden) from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:75% !important; margin-left:350px; }&lt;/style&gt;&quot;)) #matplotlib inline ## &lt;IPython.core.display.HTML object&gt; import numpy as np import pandas as pd import matplotlib.pyplot as plt import math pd.set_option( &#39;display.notebook_repr_html&#39;, False) # render Series and DataFrame as text, not HTML pd.set_option( &#39;display.max_column&#39;, 10) # number of columns pd.set_option( &#39;display.max_rows&#39;, 10) # number of rows pd.set_option( &#39;display.width&#39;, 90) # number of characters per row import matplotlib.pyplot as plt 18.2 The Library sklearn does not automatically import its subpackages. Therefore all subpakcages must be specifically loaded before use. # Sample Data from sklearn import datasets # Model Selection from sklearn.model_selection import train_test_split from sklearn.model_selection import KFold from sklearn.model_selection import LeaveOneOut from sklearn.model_selection import cross_validate # Preprocessing from sklearn.preprocessing import Imputer from sklearn.preprocessing import MinMaxScaler from sklearn.preprocessing import StandardScaler from sklearn.preprocessing import Normalizer from sklearn.preprocessing import PolynomialFeatures # Model and Pipeline from sklearn.linear_model import LinearRegression,Lasso from sklearn.pipeline import make_pipeline # Measurement from sklearn.metrics import * import statsmodels.formula.api as smf 18.3 Model Fitting split 18.3.1 Underfitting The model does not fit the training data and therefore misses the trends in the data The model cannot be generalized to new data, this is usually the result of a very simple model (not enough predictors/independent variables) The model will have poor predictive ability For example, we fit a linear model (like linear regression) to data that is not linear 18.3.2 Overfitting The model has trained ?too well? and is now, well, fit too closely to the training dataset The model is too complex (i.e. too many features/variables compared to the number of observations) The model will be very accurate on the training data but will probably be very not accurate on untrained or new data The model is not generalized (or not AS generalized), meaning you can generalize the results The model learns or describes the ?noise? in the training data instead of the actual relationships between variables in the data 18.3.3 Just Right It is worth noting the underfitting is not as prevalent as overfitting Nevertheless, we want to avoid both of those problems in data analysis We want to find the middle ground between under and overfitting our model 18.4 Model Tuning A highly complex model tend to overfit A too flexible model tend to underfit Complexity can be reduced by: - Less features - Less degree of polynomial features - Apply generalization (tuning hyperparameters) split 18.5 High Level ML Process split 18.6 Built-in Datasets sklearn included some popular datasets to play with Each dataset is of type Bunch. It has useful data (array) in the form of properties: - keys (display all data availabe within the dataset) - data (common) - target (common) - DESCR (common) - feature_names (some dataset) - target_names (some dataset) - images (some dataset) 18.6.1 diabetes (regression) 18.6.1.1 Load Dataset diabetes = datasets.load_diabetes() print (type(diabetes)) ## &lt;class &#39;sklearn.utils.Bunch&#39;&gt; 18.6.1.2 keys diabetes.keys() ## dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;data_filename&#39;, &#39;target_filename&#39;]) 18.6.1.3 Features and Target .data = features - two dimension array .target = target - one dimension array print (type(diabetes.data)) ## &lt;class &#39;numpy.ndarray&#39;&gt; print (type(diabetes.target)) ## &lt;class &#39;numpy.ndarray&#39;&gt; print (diabetes.data.shape) ## (442, 10) print (diabetes.target.shape) ## (442,) 18.6.1.4 Load with X,y (Convenient Method) using return_X_y = True, data is loaded into X, target is loaded into y X,y = datasets.load_diabetes(return_X_y=True) print (X.shape) ## (442, 10) print (y.shape) ## (442,) 18.6.2 digits (Classification) This is a copy of the test set of the UCI ML hand-written digits datasets digits = datasets.load_digits() print (type(digits)) ## &lt;class &#39;sklearn.utils.Bunch&#39;&gt; print (type(digits.data)) ## &lt;class &#39;numpy.ndarray&#39;&gt; digits.keys() ## dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;target_names&#39;, &#39;images&#39;, &#39;DESCR&#39;]) digits.target_names ## array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 18.6.2.1 data digits.data.shape # features ## (1797, 64) digits.target.shape # target ## (1797,) 18.6.2.2 Images images is 3 dimensional array There are 1797 samples, each sample is 8x8 pixels digits.images.shape ## (1797, 8, 8) type(digits.images) ## &lt;class &#39;numpy.ndarray&#39;&gt; Each element represent the data that make its target print (digits.target[100]) ## 4 print (digits.images[100]) ## [[ 0. 0. 0. 2. 13. 0. 0. 0.] ## [ 0. 0. 0. 8. 15. 0. 0. 0.] ## [ 0. 0. 5. 16. 5. 2. 0. 0.] ## [ 0. 0. 15. 12. 1. 16. 4. 0.] ## [ 0. 4. 16. 2. 9. 16. 8. 0.] ## [ 0. 0. 10. 14. 16. 16. 4. 0.] ## [ 0. 0. 0. 0. 13. 8. 0. 0.] ## [ 0. 0. 0. 0. 13. 6. 0. 0.]] plt.matshow(digits.images[100]) ## &lt;matplotlib.image.AxesImage object at 0x0000000006898320&gt; ## ## C:\\PROGRA~3\\ANACON~1\\python.exe:1: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). 18.6.2.3 Loading Into X,y (Convenient Method) X,y = datasets.load_digits(return_X_y=True) X.shape ## (1797, 64) y.shape ## (1797,) 18.6.3 iris (Classification) iris = datasets.load_iris() iris.keys() ## dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;]) 18.6.3.1 Feature Names iris.feature_names ## [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;] 18.6.3.2 target iris.target_names ## array([&#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;], dtype=&#39;&lt;U10&#39;) iris.target ## array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ## 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ## 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ## 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ## 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ## 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ## 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) 18.7 Train Test Data Splitting 18.7.1 Sample Data Generate 100 rows of data, with 3x features (X1,X2,X3), and one dependant variable (Y) n = 21 # number of samples I = 5 # intercept value E = np.random.randint( 1,20, n) # Error x1 = np.random.randint( 1,n+1, n) x2 = np.random.randint( 1,n+1, n) x3 = np.random.randint( 1,n+1, n) y = 0.1*x1 + 0.2*x2 + 0.3*x3 + E + I mydf = pd.DataFrame({ &#39;y&#39;:y, &#39;x1&#39;:x1, &#39;x2&#39;:x2, &#39;x3&#39;:x3 }) mydf.shape ## (21, 4) 18.7.2 One Time Split sklearn::train_test_split() has two forms: - Take one DF, split into 2 DF (most of sklearn modeling use this method - Take two DFs, split into 4 DF mydf.head() ## y x1 x2 x3 ## 0 14.4 14 7 12 ## 1 14.3 18 5 5 ## 2 26.4 14 11 6 ## 3 14.8 3 21 1 ## 4 11.5 4 13 5 18.7.2.1 Method 1: Split One Dataframe Into Two (Train &amp; Test) traindf, testdf = train_test_split( df, test_size=, random_state= ) # random_state : seed number (integer), optional # test_size : fraction of 1, 0.2 means 20% split traindf, testdf = train_test_split(mydf,test_size=0.2, random_state=25) print (len(traindf)) ## 16 print (len(testdf)) ## 5 18.7.2.2 Method 2: Split Two DataFrame (X,Y) into Four x_train/test, y_train/test x_train, x_test, y_train, y_test = train_test_split( X,Y, test_size=, random_state= ) # random_state : seed number (integer), optional # test_size : fraction of 1, 0.2 means 20% split Split DataFrame into X and Y First feature_cols = [&#39;x1&#39;,&#39;x2&#39;,&#39;x3&#39;] X = mydf[feature_cols] Y = mydf.y Then Split X/Y into x_train/test, y_train/test x_train, x_test, y_train, y_test = train_test_split( X,Y, test_size=0.2, random_state=25) print (len(x_train)) ## 16 print (len(x_test)) ## 5 18.7.3 K-Fold KFold(n_splits=3, shuffle=False, random_state=None) split suffle=False (default), meaning index number is taken continously kf = KFold(n_splits=7) for train_index, test_index in kf.split(X): print (train_index, test_index) ## [ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [0 1 2] ## [ 0 1 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [3 4 5] ## [ 0 1 2 3 4 5 9 10 11 12 13 14 15 16 17 18 19 20] [6 7 8] ## [ 0 1 2 3 4 5 6 7 8 12 13 14 15 16 17 18 19 20] [ 9 10 11] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 15 16 17 18 19 20] [12 13 14] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 18 19 20] [15 16 17] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] [18 19 20] shuffle=True kf = KFold(n_splits=7, shuffle=True) for train_index, test_index in kf.split(X): print (train_index, test_index) ## [ 0 1 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 19] [ 5 18 20] ## [ 0 1 3 4 5 6 7 8 10 11 12 13 15 16 17 18 19 20] [ 2 9 14] ## [ 0 1 2 3 4 5 6 7 8 9 11 12 14 15 16 17 18 20] [10 13 19] ## [ 1 2 3 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20] [ 0 4 16] ## [ 0 2 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20] [ 1 3 11] ## [ 0 1 2 3 4 5 6 9 10 11 12 13 14 15 16 18 19 20] [ 7 8 17] ## [ 0 1 2 3 4 5 7 8 9 10 11 13 14 16 17 18 19 20] [ 6 12 15] 18.7.4 Leave One Out For a dataset of N rows, Leave One Out will split N-1 times, each time leaving one row as test, remaning as training set. Due to the high number of test sets (which is the same as the number of samples-1) this cross-validation method can be very costly. For large datasets one should favor KFold. loo = LeaveOneOut() for train_index, test_index in loo.split(X): print (train_index, test_index) ## [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [0] ## [ 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [1] ## [ 0 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [2] ## [ 0 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [3] ## [ 0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [4] ## [ 0 1 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [5] ## [ 0 1 2 3 4 5 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [6] ## [ 0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 16 17 18 19 20] [7] ## [ 0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20] [8] ## [ 0 1 2 3 4 5 6 7 8 10 11 12 13 14 15 16 17 18 19 20] [9] ## [ 0 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20] [10] ## [ 0 1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20] [11] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20] [12] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20] [13] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 16 17 18 19 20] [14] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20] [15] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20] [16] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20] [17] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 20] [18] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20] [19] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19] [20] X ## x1 x2 x3 ## 0 14 7 12 ## 1 18 5 5 ## 2 14 11 6 ## 3 3 21 1 ## 4 4 13 5 ## .. .. .. .. ## 16 1 3 13 ## 17 8 2 19 ## 18 15 14 9 ## 19 2 17 4 ## 20 5 9 7 ## ## [21 rows x 3 columns] 18.8 Polynomial Transform This can be used as part of feature engineering, to introduce new features for data that seems to fit with quadradic model. 18.8.1 Single Variable 18.8.1.1 Sample Data Data must be 2-D before polynomial features can be applied. Code below convert 1D array into 2D array. x = np.array([1, 2, 3, 4, 5]) X = x[:,np.newaxis] X ## array([[1], ## [2], ## [3], ## [4], ## [5]]) 18.8.1.2 Degree 1 One Degree means maintain original features. No new features is created. PolynomialFeatures(degree=1, include_bias=False).fit_transform(X) ## array([[1.], ## [2.], ## [3.], ## [4.], ## [5.]]) 18.8.1.3 Degree 2 Degree-1 original feature: x Degree-2 additional features: x^2 PolynomialFeatures(degree=2, include_bias=False).fit_transform(X) ## array([[ 1., 1.], ## [ 2., 4.], ## [ 3., 9.], ## [ 4., 16.], ## [ 5., 25.]]) 18.8.1.4 Degree 3 Degree-1 original feature: x Degree-2 additional features: x^2 Degree-3 additional features: x^3 PolynomialFeatures(degree=3, include_bias=False).fit_transform(X) ## array([[ 1., 1., 1.], ## [ 2., 4., 8.], ## [ 3., 9., 27.], ## [ 4., 16., 64.], ## [ 5., 25., 125.]]) 18.8.1.5 Degree 4 Degree-1 original feature: x Degree-2 additional features: x^2 Degree-3 additional features: x^3 Degree-3 additional features: x^4 PolynomialFeatures(degree=4, include_bias=False).fit_transform(X) ## array([[ 1., 1., 1., 1.], ## [ 2., 4., 8., 16.], ## [ 3., 9., 27., 81.], ## [ 4., 16., 64., 256.], ## [ 5., 25., 125., 625.]]) 18.8.2 Two Variables 18.8.2.1 Sample Data X = pd.DataFrame( {&#39;x1&#39;: [1, 2, 3, 4, 5 ], &#39;x2&#39;: [6, 7, 8, 9, 10]}) X ## x1 x2 ## 0 1 6 ## 1 2 7 ## 2 3 8 ## 3 4 9 ## 4 5 10 18.8.2.2 Degree 2 Degree-1 original features: x1, x2 Degree-2 additional features: x1^2, x2^2, x1:x2 PolynomialFeatures(degree=2, include_bias=False).fit_transform(X) ## array([[ 1., 6., 1., 6., 36.], ## [ 2., 7., 4., 14., 49.], ## [ 3., 8., 9., 24., 64.], ## [ 4., 9., 16., 36., 81.], ## [ 5., 10., 25., 50., 100.]]) 18.8.2.3 Degree 3 Degree-1 original features: x1, x2 Degree-2 additional features: x1^2, x2^2, x1:x2 Degree-3 additional features: x1^3, x2^3 x1:x2^2 x2:x1^2 PolynomialFeatures(degree=3, include_bias=False).fit_transform(X) ## array([[ 1., 6., 1., 6., 36., 1., 6., 36., 216.], ## [ 2., 7., 4., 14., 49., 8., 28., 98., 343.], ## [ 3., 8., 9., 24., 64., 27., 72., 192., 512.], ## [ 4., 9., 16., 36., 81., 64., 144., 324., 729.], ## [ 5., 10., 25., 50., 100., 125., 250., 500., 1000.]]) 18.9 Imputation of Missing Data 18.9.1 Sample Data from numpy import nan X = np.array([[ nan, 0, 3 ], [ 3, 7, 9 ], [ 3, 5, 2 ], [ 4, nan, 6 ], [ 8, 8, 1 ]]) y = np.array([14, 16, -1, 8, -5]) 18.9.2 Imputer 18.9.2.1 mean strategy imp = Imputer(strategy=&#39;mean&#39;) ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\sklearn\\utils\\deprecation.py:66: DeprecationWarning: Class Imputer is deprecated; Imputer was deprecated in version 0.20 and will be removed in 0.22. Import impute.SimpleImputer from sklearn instead. ## warnings.warn(msg, category=DeprecationWarning) X2 = imp.fit_transform(X) X2 ## array([[4.5, 0. , 3. ], ## [3. , 7. , 9. ], ## [3. , 5. , 2. ], ## [4. , 5. , 6. ], ## [8. , 8. , 1. ]]) 18.10 Scaling It is possible that some insignificant variable with larger range will be dominating the objective function. We can remove this problem by scaling down all the features to a same range. 18.10.1 Sample Data X=mydf.filter(like=&#39;x&#39;)[:5] X ## x1 x2 x3 ## 0 14 7 12 ## 1 18 5 5 ## 2 14 11 6 ## 3 3 21 1 ## 4 4 13 5 18.10.2 MinMax Scaler MinMaxScaler( feature_range(0,1), copy=True ) # default feature range (output result) from 0 to 1 # default return a copy of new array, copy=False will inplace original array Define Scaler Object scaler = MinMaxScaler() Transform Data scaler.fit_transform(X) ## array([[0.73333333, 0.125 , 1. ], ## [1. , 0. , 0.36363636], ## [0.73333333, 0.375 , 0.45454545], ## [0. , 1. , 0. ], ## [0.06666667, 0.5 , 0.36363636]]) Scaler Attributes data_min_: minimum value of the feature (before scaling) data_max_: maximum value of the feature (before scaling) pd.DataFrame(list(zip(scaler.data_min_, scaler.data_max_)), columns=[&#39;data_min&#39;,&#39;data_max&#39;], index=X.columns) ## data_min data_max ## x1 3.0 18.0 ## x2 5.0 21.0 ## x3 1.0 12.0 18.10.3 Standard Scaler It is most suitable for techniques that assume a Gaussian distribution in the input variables and work better with rescaled data, such as linear regression, logistic regression and linear discriminate analysis. StandardScaler(copy=True, with_mean=True, with_std=True) # copy=True : return a copy of data, instead of inplace # with_mean=True : centre all features by substracting with its mean # with_std=True : centre all features by dividing with its std Define Scaler Object scaler = StandardScaler() Transform Data scaler.fit_transform(X) ## array([[ 0.56793014, -0.78975397, 1.74943121], ## [ 1.23608324, -1.14873305, -0.22573306], ## [ 0.56793014, -0.07179582, 0.05643326], ## [-1.2694909 , 1.72309958, -1.35439836], ## [-1.10245262, 0.28718326, -0.22573306]]) Scaler Attributes After the data transformation step above, scaler will have the mean and variance information for each feature. pd.DataFrame(list(zip(scaler.mean_, scaler.var_)), columns=[&#39;mean&#39;,&#39;variance&#39;], index=X.columns) ## mean variance ## x1 10.6 35.84 ## x2 11.4 31.04 ## x3 5.8 12.56 18.11 Pipeline With any of the preceding examples, it can quickly become tedious to do the transformations by hand, especially if you wish to string together multiple steps. For example, we might want a processing pipeline that looks something like this: Impute missing values using the mean Transform features to quadratic Fit a linear regression make_pipeline takes list of functions as parameters. When calling fit() on a pipeline object, these functions will be performed in sequential with data flow from one function to another. make_pipeline ( function_1 (), function_2 (), function_3 () ) 18.11.1 Sample Data X ## x1 x2 x3 ## 0 14 7 12 ## 1 18 5 5 ## 2 14 11 6 ## 3 3 21 1 ## 4 4 13 5 y ## array([14, 16, -1, 8, -5]) 18.11.2 Create Pipeline my_pipe = make_pipeline ( Imputer (strategy=&#39;mean&#39;), PolynomialFeatures (degree=2), LinearRegression () ) ## C:\\PROGRA~3\\ANACON~1\\lib\\site-packages\\sklearn\\utils\\deprecation.py:66: DeprecationWarning: Class Imputer is deprecated; Imputer was deprecated in version 0.20 and will be removed in 0.22. Import impute.SimpleImputer from sklearn instead. ## warnings.warn(msg, category=DeprecationWarning) type(my_pipe) ## &lt;class &#39;sklearn.pipeline.Pipeline&#39;&gt; my_pipe ## Pipeline(memory=None, ## steps=[(&#39;imputer&#39;, ## Imputer(axis=0, copy=True, missing_values=&#39;NaN&#39;, ## strategy=&#39;mean&#39;, verbose=0)), ## (&#39;polynomialfeatures&#39;, ## PolynomialFeatures(degree=2, include_bias=True, ## interaction_only=False, order=&#39;C&#39;)), ## (&#39;linearregression&#39;, ## LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, ## normalize=False))], ## verbose=False) 18.11.3 Executing Pipeline my_pipe.fit( X, y) # execute the pipeline ## Pipeline(memory=None, ## steps=[(&#39;imputer&#39;, ## Imputer(axis=0, copy=True, missing_values=&#39;NaN&#39;, ## strategy=&#39;mean&#39;, verbose=0)), ## (&#39;polynomialfeatures&#39;, ## PolynomialFeatures(degree=2, include_bias=True, ## interaction_only=False, order=&#39;C&#39;)), ## (&#39;linearregression&#39;, ## LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, ## normalize=False))], ## verbose=False) print (y) ## [14 16 -1 8 -5] print (my_pipe.predict(X)) ## [14. 16. -1. 8. -5.] type(my_pipe) ## &lt;class &#39;sklearn.pipeline.Pipeline&#39;&gt; 18.12 Cross Validation 18.12.1 Load Data X,y = datasets.load_diabetes(return_X_y=True) 18.12.2 Choose An Cross Validator kf = KFold(n_splits=5) 18.12.3 Run Cross Validation Single Scorer Use default scorer of the estimator (if available) lasso = Lasso() cv_results1 = cross_validate(lasso, X,y,cv=kf, return_train_score=False) Multiple Scorer Specify the scorer http://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter cv_results2 = cross_validate(lasso, X,y,cv=kf, scoring=(&quot;neg_mean_absolute_error&quot;,&quot;neg_mean_squared_error&quot;,&quot;r2&quot;), return_train_score=False) 18.12.4 The Result Result is a dictionary cv_results1.keys() ## dict_keys([&#39;fit_time&#39;, &#39;score_time&#39;, &#39;test_score&#39;]) cv_results2.keys() ## dict_keys([&#39;fit_time&#39;, &#39;score_time&#39;, &#39;test_neg_mean_absolute_error&#39;, &#39;test_neg_mean_squared_error&#39;, &#39;test_r2&#39;]) cv_results1 ## {&#39;fit_time&#39;: array([0.0011313 , 0.00100136, 0.00049925, 0.00099993, 0.00074673]), &#39;score_time&#39;: array([0.00037026, 0.00056124, 0.00199914, 0.00051165, 0.00100064]), &#39;test_score&#39;: array([0.28349047, 0.35157959, 0.3533813 , 0.33481474, 0.36453281])} cv_results2 ## {&#39;fit_time&#39;: array([0.00550103, 0.00049996, 0.0005002 , 0.00049973, 0.00049996]), &#39;score_time&#39;: array([0.00100017, 0.00099969, 0.00099993, 0.00099993, 0.00150108]), &#39;test_neg_mean_absolute_error&#39;: array([-50.09003423, -52.54110842, -55.02813846, -50.81121806, ## -55.60471593]), &#39;test_neg_mean_squared_error&#39;: array([-3491.74009759, -4113.86002091, -4046.91780932, -3489.74018715, ## -4111.92401769]), &#39;test_r2&#39;: array([0.28349047, 0.35157959, 0.3533813 , 0.33481474, 0.36453281])} "]
]
