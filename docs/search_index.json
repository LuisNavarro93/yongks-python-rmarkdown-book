[
["index.html", "Python Bookdown Prerequisites", " Python Bookdown Yong Keh Soon 2019-12-28 Prerequisites "],
["environment-setup.html", "1 Environment Setup 1.1 Notebook Setup 1.2 Libraries 1.3 Magic Functions 1.4 Package Management", " 1 Environment Setup 1.1 Notebook Setup 1.2 Libraries 1.2.1 Built-In Libraries import string import datetime as dt 1.2.2 Common External Libraries import numpy as np import pandas as pd import datetime as dt import matplotlib import matplotlib.pyplot as plt from plydata import define, query, select, group_by, summarize, arrange, head, rename import plotnine from plotnine import * 1.2.3 numpy large multi-dimensional array and matrices High level mathematical funcitons to operate on them Efficient array computation, modeled after matlab Support vectorized array math functions (built on C, hence faster than python for loop and list) 1.2.4 scipy Collection of mathematical algorithms and convenience functions built on the numpy extension Built uponi numpy 1.2.5 Pandas Data manipulation and analysis Offer data structures and operations for manipulating numerical tables and time series Good for analyzing tabular data Use for exploratory data analysis, data pre-processing, statistics and visualization Built upon numpy 1.2.6 scikit-learn Machine learning functions Built on top of scipy 1.2.7 matplotlib Data Visualization 1.3 Magic Functions IPython has a set of predefined ?magic functions? that you can call with a command line style syntax There are two types of magics: Line Magic : prefix with % Work much like OS command-line calls: they get as an argument the rest of the line, where arguments are passed without parentheses or quotes. Lines magics can return results and can be used in the right hand side of an assignment Cell Magic : prefix with %% They are functions that get as an argument not only the rest of the line, but also the lines below it in a separate argument. 1.3.1 List of Magic #%lsmagic 1.3.2 Line Magic Execute magic on each line 1.3.2.1 %timeit Run the line for default 7 times (use -r to specify) Each run has default 100,000,000 loops (use -n to specify) #%timeit -r 2 -n 100 3+1000/0.25*100 1.3.2.2 %matplotlib Output graph inline to frontend (Jupyter Notebook). Therefore is stored in the Notebook document #%matplotlib inline 1.3.2.3 %who Analyse variables of global scope Specify optional type to filter the variables a = 1 type(a) ## &lt;class &#39;int&#39;&gt; #%who int #%who 1.3.3 Cell Magic Execute magic on the entire cell 1.3.3.1 %%timeit Run the line for default 7 times (use -r to specify) Each run has default 100,000,000 loops (use -n to specify) #%%timeit -r 1 -n 10 import time for _ in range(100): time.sleep(0.01)# sleep for 0.01 seconds 1.4 Package Management 1.4.1 Conda 1.4.1.1 Conda Environment #!conda info 1.4.1.2 Package Version system(&quot;conda list&quot;) 1.4.1.3 Package Installation Conda is recommended distribution. To install from official conda channel: conda install &lt;package_name&gt; # always install latest conda install &lt;package_name=version_number&gt; # Example: Install From conda official channel conda install numpy conda install scipy conda install pandas conda install matpotlib conda install scikit-learn conda install seaborn conda install pip To install from conda-forge community channel: conda install -c conda-forge &lt;package_name&gt; conda install -c conda-forge &lt;package_name=version_number&gt; # Example: Install From conda community: conda install -c conda-forge plotnine 1.4.2 PIP PIP is python open repository (not part of conda). Use pip if the package is not available in conda. 1.4.2.1 Package Version #!pip list 1.4.2.2 Package Installation pip install &lt;package_name&gt; pip install plydata "],
["python-fundamental.html", "2 Python Fundamental 2.1 Everything Is Object 2.2 Assignment", " 2 Python Fundamental 2.1 Everything Is Object Every varibales in python are objects Every variable assginment is reference based, that is, each object value is the reference to memory block of data In the below exmaple, a, b and c refer to the same memory location: - Notice when an object assigned to another object, they refer to the same memory location - When two variable refers to the same value, they refer to the same memory location a = 123 b = 123 c = a print (&#39;Data of a =&#39;, a, &#39;\\nData of b =&#39;,b, &#39;\\nData of c =&#39;,c, &#39;\\nID of a = &#39;, id(a), &#39;\\nID of b = &#39;, id(b), &#39;\\nID of c = &#39;, id(c) ) ## Data of a = 123 ## Data of b = 123 ## Data of c = 123 ## ID of a = 140736159526240 ## ID of b = 140736159526240 ## ID of c = 140736159526240 Changing data value (using assignment) changes the reference a = 123 b = a a = 456 # reassignemnt changed a memory reference # b memory reference not changed print (&#39;Data of a =&#39;,a, &#39;\\nData of b =&#39;,b, &#39;\\nID of a = &#39;, id(a), &#39;\\nID of b = &#39;, id(b) ) ## Data of a = 456 ## Data of b = 123 ## ID of a = 604977808 ## ID of b = 140736159526240 2.2 Assignment 2.2.1 Multiple Assignment Assign multiple variable at the same time with same value. Note that all object created using this method refer to the same memory location. x = y = &#39;same mem loc&#39; print (&#39;x = &#39;, x, &#39;\\ny = &#39;, y, &#39;\\nid(x) = &#39;, id(x), &#39;\\nid(y) = &#39;, id(y) ) ## x = same mem loc ## y = same mem loc ## id(x) = 605141104 ## id(y) = 605141104 2.2.2 Augmented Assignment x = 1 y = x + 1 y += 1 print (&#39;y = &#39;, y) ## y = 3 2.2.3 Unpacking Assingment Assign multiple value to multiple variabels at the same time. x,y = 1,3 print (x,y) ## 1 3 "],
["built-in-data-types.html", "3 Built-in Data Types 3.1 Numbers 3.2 String 3.3 Boolean 3.4 None", " 3 Built-in Data Types 3.1 Numbers Two types of built-in number type, integer and float. 3.1.1 Integer n = 123 type (n) ## &lt;class &#39;int&#39;&gt; 3.1.2 Float f = 123.4 type (f) ## &lt;class &#39;float&#39;&gt; 3.1.3 Number Operators In general, when the operation potentially return float, the result is float type. Otherwise it return integer. Division always return float print(4/2) # return float ## 2.0 type(4/2) ## &lt;class &#39;float&#39;&gt; Integer Division by integer return inter. Integer division by float return float. print (8//3,&#39;\\n&#39;, # return int 8//3.2) # return float ## 2 ## 2.0 Remainder by integer return integer. Remainder by float return float print (8%3, &#39;\\n&#39;, # return int 8%3.2) # return float ## 2 ## 1.5999999999999996 Power return int or float print (2**3) # return int ## 8 print (2.1**3) # return float ## 9.261000000000001 print (2**3.1) # return float ## 8.574187700290345 3.2 String String is an object class ‘str’. It is an ordered collection of letters, an array of object type str import string s = &#39;abcde&#39; print( &#39;\\nvar type = &#39;, type(s), &#39;\\nelems = &#39;,s[0], s[1], s[2], &#39;\\nlen = &#39;, len(s), &#39;\\nelem type = &#39;,type(s[1])) ## ## var type = &lt;class &#39;str&#39;&gt; ## elems = a b c ## len = 5 ## elem type = &lt;class &#39;str&#39;&gt; 3.2.1 Constructor 3.2.1.1 Classical Method class str(object='') my_string = str() ## empty string class str(object=b'', encoding='utf-8', errors='strict') my_string = str(&#39;abc&#39;) 3.2.1.2 Shortcut Method my_string = &#39;abc&#39; 3.2.1.3 Multiline Method my_string = &#39;&#39;&#39; This is me. Yong Keh Soon &#39;&#39;&#39; print(my_string) ## ## This is me. ## Yong Keh Soon Note that the variable contain \\n front and end of the string. my_string ## &#39;\\nThis is me.\\nYong Keh Soon\\n&#39; 3.2.1.4 Immutability String is immuatable. Changing its content will result in error s = &#39;abcde&#39; print (&#39;s : &#39;, id(s)) #s[1] = &#39;z&#39; # immutable, result in error ## s : 605190888 Changing the variable completley change the reference (for new object) s = &#39;efgh&#39; print (&#39;s : &#39;, id(s)) ## s : 605149816 3.2.2 Class Constants 3.2.2.1 Letters print( &#39;letters = &#39;, string.ascii_letters, &#39;\\nlowercase = &#39;,string.ascii_lowercase, &#39;\\nuppercase = &#39;,string.ascii_uppercase ) ## letters = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ## lowercase = abcdefghijklmnopqrstuvwxyz ## uppercase = ABCDEFGHIJKLMNOPQRSTUVWXYZ 3.2.2.2 Digits string.digits ## &#39;0123456789&#39; 3.2.2.3 White Spaces string.whitespace ## &#39; \\t\\n\\r\\x0b\\x0c&#39; 3.2.3 Instance Methods 3.2.3.1 Substitution : format() By Positional print( &#39;{} + {} = {}&#39;.format(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), # auto sequence &#39;\\n{0} + {1} = {2}&#39;.format(&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;)) # manual sequence ## a + b = c ## aa + bb = cc By Name &#39;Coordinates: {latitude}, {longitude}&#39;.format(latitude=&#39;37.24N&#39;, longitude=&#39;-115.81W&#39;) ## constant ## &#39;Coordinates: 37.24N, -115.81W&#39; By Dictionary Name coord = {&#39;latitude&#39;: &#39;37.24N&#39;, &#39;longitude&#39;: &#39;-115.81W&#39;} ## dictionary key/value &#39;Coordinates: {latitude}, {longitude}&#39;.format(**coord) ## &#39;Coordinates: 37.24N, -115.81W&#39; Formatting Number Float &#39;{:+f}; {:+f}&#39;.format(3.14, -3.14) # show it always ## &#39;+3.140000; -3.140000&#39; &#39;{: f}; {: f}&#39;.format(3.14, -3.14) # show a space for positive numbers ## &#39; 3.140000; -3.140000&#39; &#39;Correct answers: {:.2f}&#39;.format(55676.345345) ## &#39;Correct answers: 55676.35&#39; Integer, Percentage &#39;{0:,} {0:.2%} {0:,.2%}&#39;.format(1234567890.4455) ## &#39;1,234,567,890.4455 123456789044.55% 123,456,789,044.55%&#39; Alignment &#39;{0:&lt;20} {0:&lt;&lt;20}&#39;.format(&#39;left aligned&#39;) ## &#39;left aligned left aligned&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#39; &#39;{0:&gt;20} {0:$&gt;20}&#39;.format(&#39;right aligned&#39;) ## &#39; right aligned $$$$$$$right aligned&#39; &#39;{:^30}&#39;.format(&#39;centered&#39;) # use &#39;*&#39; as a fill char ## &#39; centered &#39; 3.2.3.2 Substitution : f-string my_name = &#39;Yong Keh Soon&#39; salary = 11123.346 f&#39;Hello, {my_name}, your salary is {salary:,.2f} !&#39; ## &#39;Hello, Yong Keh Soon, your salary is 11,123.35 !&#39; 3.2.3.3 Conversion: upper() lower() &#39;myEXEel.xls&#39;.upper() ## &#39;MYEXEEL.XLS&#39; &#39;myEXEel.xls&#39;.lower() ## &#39;myexeel.xls&#39; 3.2.3.4 find() pattern position string.find() return position of first occurance. -1 if not found s=&#39;I love karaoke, I know you love it oo&#39; print (s.find(&#39;lov&#39;)) ## 2 print (s.find(&#39;kemuning&#39;)) ## -1 3.2.3.5 strip() off blank spaces filename = &#39; myexce l. xls &#39; filename.strip() ## &#39;myexce l. xls&#39; 3.2.3.6 List Related: split() Splitting delimeter is specified. Observe the empty spaces were conserved in result array animals = &#39;a1,a2 ,a3, a4&#39; animals.split(&#39;,&#39;) ## [&#39;a1&#39;, &#39;a2 &#39;, &#39;a3&#39;, &#39; a4&#39;] 3.2.3.7 List Related: join() &#39;-&#39;.join([&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;]) ## &#39;1-2-3-4&#39; 3.2.4 Operator 3.2.4.1 % Old Style Substitution https://docs.python.org/3/library/stdtypes.html#old-string-formatting my_name = &#39;Yong Keh Soon&#39; salary = 11123.346 &#39;Hello, %s, your salary is %.2f !&#39; %(my_name, salary) ## &#39;Hello, Yong Keh Soon, your salary is 11123.35 !&#39; 3.2.4.2 + Concatenation &#39;this is &#39; + &#39;awesome&#39; ## &#39;this is awesome&#39; 3.2.4.3 in matching For single string, partial match print( &#39;abc&#39; in &#39;123abcdefg&#39; ) ## True For list of strings, exact match (even though only one element in list). For partial match, workaround is to convert list to single string print( &#39;abc&#39; in [&#39;abcdefg&#39;], # false &#39;abc&#39; in [&#39;abcdefg&#39;,&#39;123&#39;], # fakse &#39;abc&#39; in [&#39;123&#39;,&#39;abc&#39;,&#39;def&#39;], # true &#39;abc&#39; in str([&#39;123&#39;,&#39;abcdefg&#39;])) # true ## False False True True 3.2.4.4 Comparitor Comparitor compares the memory address. a=&#39;abc&#39; b=&#39;abc&#39; print(&#39;id(a) = &#39;, id(a), &#39;\\nid(b) = &#39;, id(b), &#39;\\na == b &#39;, a==b) ## id(a) = 463403192 ## id(b) = 463403192 ## a == b True 3.2.5 Iterations string[start:end:step] # default start:0, end:last, step:1 If step is negative (reverse), end value must be lower than start value s = &#39;abcdefghijk&#39; print (s[0]) # first later ## a print (s[:3]) # first 3 letters ## abc print (s[2:8 :2]) # stepping ## ceg print (s[-1]) # last letter ## k print (s[-3:]) # last three letters ## ijk print (s[: :-1]) # reverse everything ## kjihgfedcba print (s[8:2 :-1]) ## ihgfed print (s[8:2]) # return NOTHING 3.3 Boolean b = False if (b): print (&#39;It is true&#39;) else: print (&#39;It is fake&#39;) ## It is fake 3.3.1 What is Considered False ? Everything below are false, anything else are true print ( bool(0), # zero bool(None), # none bool(&#39;&#39;), # empty string bool([]), # empty list bool(()), # empty tupple bool(False), # False bool(2-2)) # expression that return any value above ## False False False False False False False 3.3.2 and operator BEWARE ! and can return different data types If evaluated result is True, the last True Value is returned (because python need to evaluate up to the last value) If evaluated result is False, the first False Value will be returned (because python return it immediately when detecting False value) print (123 and 2 and 1, 123 and [] and 2) ## 1 [] 3.3.3 not operator not (True) ## False not (True or False) ## False not (False) ## True not (True and False) ## True ~(False) ## -1 3.3.4 or operator or can return different data type If evaluated result is True, first True Value will be returned (right hand side value need not be evaluated) If evaluated result is False, last Fasle Value will be returned (need to evalute all items before concluding False) print (1 or 2) ## 1 print (0 or 1 or 1) ## 1 print (0 or () or []) ## [] 3.4 None 3.4.1 None is an Object None is a Python object NonType Any operation to None object will result in error For array data with None elements, verification is required to check through iteration to determine if the item is not None. It is very computaionaly heavy type(None) ## &lt;class &#39;NoneType&#39;&gt; t = np.array([1,2,3,4,5]) t.dtype # its an integer ## dtype(&#39;int32&#39;) t1 = np.array([1, 2, 3, 4, 5]) t = np.array([1, 2, 3, None, 4, 5]) t.dtype # it&#39;s an object ## dtype(&#39;O&#39;) t1.dtype ## dtype(&#39;int32&#39;) 3.4.2 Comparing None Not Prefered Method null_variable = None print( null_variable == None ) ## True Prefered print( null_variable is None ) ## True print( null_variable is not None ) ## False "],
["built-in-data-structure.html", "4 Built-In Data Structure 4.1 Tuple 4.2 List 4.3 Dictionaries 4.4 Sets 4.5 range", " 4 Built-In Data Structure 4.1 Tuple Tuple is an immutable list. Any attempt to change/update tuple will return error. It can contain different types of object. Benefits of tuple against List are: - Faster than list - Protects your data against accidental change - Can be used as key in dictionaries, list can’t 4.1.1 Assignment 4.1.1.1 (item1, item2, item3) This is a formal syntax for defining tuple, items inside ( ) notation t = (1,2,3,&#39;o&#39;,&#39;apple&#39;) t ## (1, 2, 3, &#39;o&#39;, &#39;apple&#39;) type(t) ## &lt;class &#39;tuple&#39;&gt; 4.1.1.2 item1, item2, item3 Without ( ) notation, it is also considered as tuple However, some functions may not consider this method 1,2,3,&#39;o&#39;,&#39;apple&#39; ## (1, 2, 3, &#39;o&#39;, &#39;apple&#39;) 4.1.2 Accessing print (t[1]) ## 2 print (type(t[1])) ## &lt;class &#39;int&#39;&gt; print (t[1:3]) ## (2, 3) type ([t[1:3]]) ## &lt;class &#39;list&#39;&gt; 4.1.3 Duplicating Tuple original = (1,2,3,4,5) copy_test = original print(original) ## (1, 2, 3, 4, 5) print(copy_test) ## (1, 2, 3, 4, 5) print(&#39;Original ID: &#39;, id(original)) ## Original ID: 605035424 print(&#39;Copy ID: &#39;, id(copy_test)) ## Copy ID: 605035424 4.2 List List is a collection of ordered items, where the items can be different data types You can pack list of items by placing them into [] List is mutable 4.2.1 Creating List 4.2.1.1 Empty List empty = [] # literal assignment method empty = list() # constructor method print (empty) ## [] 4.2.1.2 Literal Assignment Multiple data types is allowed in a list [123,&#39;abc&#39;,456, None] ## [123, &#39;abc&#39;, 456, None] Constructor Note that list(string) will split the string into letters list(&#39;hello&#39;) ## [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;] 4.2.2 Accessing Items Access specific index number food = [&#39;bread&#39;, &#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;,&#39;jelly&#39;,&#39;cake&#39;] print (food[2]) # 3rd item ## rice print (food[-1]) # last item ## cake Access range of indexes print (food[:4]) # first 3 items ## [&#39;bread&#39;, &#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;] print (food[-3:]) # last 3 items ## [&#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;] print (food[1:5]) # item 1 to 4 ## [&#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;, &#39;jelly&#39;] print (food[5:2:-1]) # item 3 to 5, reverse order ## [&#39;cake&#39;, &#39;jelly&#39;, &#39;biscuit&#39;] print (food[::-1]) # reverse order ## [&#39;cake&#39;, &#39;jelly&#39;, &#39;biscuit&#39;, &#39;rice&#39;, &#39;noodle&#39;, &#39;bread&#39;] 4.2.3 Methods 4.2.3.1 Remove Item(s) Removal of non-existance item will result in error Search and remove first occurance of an item food = list([&#39;bread&#39;, &#39;noodle&#39;, &#39;rice&#39;, &#39;biscuit&#39;,&#39;jelly&#39;,&#39;cake&#39;,&#39;noodle&#39;]) food.remove(&#39;noodle&#39;) print (food) ## [&#39;bread&#39;, &#39;rice&#39;, &#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;, &#39;noodle&#39;] Remove last item food.pop() ## &#39;noodle&#39; print (food) ## [&#39;bread&#39;, &#39;rice&#39;, &#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;] Remove item at specific position food.pop(1) # counter start from 0 ## &#39;rice&#39; print(food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;jelly&#39;, &#39;cake&#39;] food.remove(&#39;jelly&#39;) print(food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;cake&#39;] 4.2.3.2 Appending Item (s) Append One Item food.append(&#39;jelly&#39;) print (food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;cake&#39;, &#39;jelly&#39;] Append Multiple Items extend() will expand the list/tupple argument and append as multiple items food.extend([&#39;nand&#39;,&#39;puff&#39;]) print (food) ## [&#39;bread&#39;, &#39;biscuit&#39;, &#39;cake&#39;, &#39;jelly&#39;, &#39;nand&#39;, &#39;puff&#39;] 4.2.3.3 Other Methods Reversing the order of the items food.reverse() food ## [&#39;puff&#39;, &#39;nand&#39;, &#39;jelly&#39;, &#39;cake&#39;, &#39;biscuit&#39;, &#39;bread&#39;] Locating the Index Number of An Item food.index(&#39;biscuit&#39;) ## 4 Count occurance test = [&#39;a&#39;,&#39;a&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] test.count(&#39;a&#39;) ## 3 Sorting The Order of Items food.sort() print (food) ## [&#39;biscuit&#39;, &#39;bread&#39;, &#39;cake&#39;, &#39;jelly&#39;, &#39;nand&#39;, &#39;puff&#39;] 4.2.4 Operator 4.2.4.1 Concatenation Concatenating Lists Two lists can be concatenanted using ‘+’ operator. [&#39;dog&#39;,&#39;cat&#39;,&#39;horse&#39;] + [&#39;elephant&#39;,&#39;tiger&#39;] + [&#39;sheep&#39;] ## [&#39;dog&#39;, &#39;cat&#39;, &#39;horse&#39;, &#39;elephant&#39;, &#39;tiger&#39;, &#39;sheep&#39;] 4.2.5 List is Mutable The reference of list variable won’t change after adding/removing its item food = [&#39;cake&#39;,&#39;jelly&#39;,&#39;roti&#39;,&#39;noodle&#39;] print (&#39;food : &#39;,id(food)) ## food : 605272264 food += [&#39;salad&#39;,&#39;chicken&#39;] print (&#39;food : &#39;,id(food)) ## food : 605272264 A function is actually an object, which reference never change, hence mutable def spam (elem, some_list=[&#39;a&#39;,&#39;b&#39;]): some_list.append(elem) return some_list print (spam(1,[&#39;x&#39;])) ## [&#39;x&#39;, 1] print (spam(2)) ## second parameter is not passed ## [&#39;a&#39;, &#39;b&#39;, 2] print (spam(3)) ## notice the default was remembered ## [&#39;a&#39;, &#39;b&#39;, 2, 3] 4.2.6 Duplicate or Reference Use = : It just copy the refernce. IDs are similar original = [1,2,3,4,5] copy_test = original print(&#39;Original ID: &#39;, id(original)) ## Original ID: 605273096 print(&#39;Copy ID: &#39;, id(copy_test)) ## Copy ID: 605273096 original[0]=999 ## change original print(original) ## [999, 2, 3, 4, 5] print(copy_test) ## copy affected ## [999, 2, 3, 4, 5] Duplicate A List Object with copy(). Resulting IDs are different original = [1,2,3,4,5] copy_test = original.copy() print(original) ## [1, 2, 3, 4, 5] print(copy_test) ## [1, 2, 3, 4, 5] print(&#39;Original ID: &#39;, id(original)) ## Original ID: 605273608 print(&#39;Copy ID: &#39;, id(copy_test)) ## Copy ID: 605139080 original[0] = 999 ## change original print(original) ## [999, 2, 3, 4, 5] print(copy_test) ## copy not affected ## [1, 2, 3, 4, 5] Passing To Function As Reference def func(x): print (x) print(&#39;ID in Function: &#39;, id(x)) x.append(6) ## modify the refrence my_list = [1,2,3,4,5] print(&#39;ID outside Function: &#39;, id(my_list)) ## ID outside Function: 605272904 func(my_list) ## call the function, pass the reference ## [1, 2, 3, 4, 5] ## ID in Function: 605272904 print(my_list) ## content was altered ## [1, 2, 3, 4, 5, 6] 4.2.7 List Is Iterable 4.2.7.1 For Loop s = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] for x in s: if &#39;abc&#39; in x: print (x) ## abc ## abcd 4.2.7.2 List Comprehension This code below is a shorform method of for loop and if. old_list = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] [x for x in old_list if &#39;abc&#39; in x] ## [&#39;abc&#39;, &#39;abcd&#39;] Compare to traditional version of code below: new_list = [] old_list = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] for x in old_list: if &#39;abc&#39; in x: new_list.append(x) print( new_list ) ## [&#39;abc&#39;, &#39;abcd&#39;] 4.2.8 Conversion Convert mutable list to immutable tuple with tuple() original = [1,2,3] original_tuple = tuple(original) print( id(original), id(original_tuple)) ## 613764168 485241048 4.2.9 Built-In Functions Applicable To List Number of Elements len(food) ## 6 Max Value test = [1,2,3,5,5,3,2,1] m = max(test) test.index(m) ## only first occurance is found ## 3 4.3 Dictionaries Dictionary is a list of index-value items. 4.3.1 Creating dict Creating dict with literals Simple Dictionary animal_counts = { &#39;cats&#39; : 2, &#39;dogs&#39; : 5, &#39;horses&#39;:4} print (animal_counts) ## {&#39;cats&#39;: 2, &#39;dogs&#39;: 5, &#39;horses&#39;: 4} print( type(animal_counts) ) ## &lt;class &#39;dict&#39;&gt; Dictionary with list animal_names = {&#39;cats&#39;: [&#39;Walter&#39;,&#39;Ra&#39;], &#39;dogs&#39;: [&#39;Jim&#39;,&#39;Roy&#39;,&#39;John&#39;,&#39;Lucky&#39;,&#39;Row&#39;], &#39;horses&#39;: [&#39;Sax&#39;,&#39;Jack&#39;,&#39;Ann&#39;,&#39;Jeep&#39;] } animal_names ## {&#39;cats&#39;: [&#39;Walter&#39;, &#39;Ra&#39;], &#39;dogs&#39;: [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], &#39;horses&#39;: [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]} Creating dict From variables cat_names = [&#39;Walter&#39;,&#39;Ra&#39;,&#39;Jim&#39;] dog_names = [&#39;Jim&#39;,&#39;Roy&#39;,&#39;John&#39;,&#39;Lucky&#39;,&#39;Row&#39;] horse_names= [&#39;Sax&#39;,&#39;Jack&#39;,&#39;Ann&#39;,&#39;Jeep&#39;] animal_names = {&#39;cats&#39;: cat_names, &#39;dogs&#39;: dog_names, &#39;horses&#39;: horse_names} animal_names ## {&#39;cats&#39;: [&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;], &#39;dogs&#39;: [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], &#39;horses&#39;: [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]} 4.3.2 Accessing dict Find out the list of keys using keys() print (animal_names.keys()) ## dict_keys([&#39;cats&#39;, &#39;dogs&#39;, &#39;horses&#39;]) print (sorted(animal_names.keys())) ## [&#39;cats&#39;, &#39;dogs&#39;, &#39;horses&#39;] Find out the list of values using values() print (animal_names.values()) ## dict_values([[&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;], [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]]) print (sorted(animal_names.values())) ## [[&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;], [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;], [&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;]] Refer a dictionary item using index animal_names[&#39;dogs&#39;] ## [&#39;Jim&#39;, &#39;Roy&#39;, &#39;John&#39;, &#39;Lucky&#39;, &#39;Row&#39;] Accessing non-existance key natively will return Error ##animal_count[&#39;cow&#39;] Accessing non-existance key with get() will return None print (animal_counts.get(&#39;cow&#39;)) ## None 4.3.3 Dict are Mutable Use [key] notation to update the content of element. However, if the key is non-existance, this will return error. animal_names[&#39;dogs&#39;] = [&#39;Ali&#39;,&#39;Abu&#39;,&#39;Bakar&#39;] animal_names ## {&#39;cats&#39;: [&#39;Walter&#39;, &#39;Ra&#39;, &#39;Jim&#39;], &#39;dogs&#39;: [&#39;Ali&#39;, &#39;Abu&#39;, &#39;Bakar&#39;], &#39;horses&#39;: [&#39;Sax&#39;, &#39;Jack&#39;, &#39;Ann&#39;, &#39;Jeep&#39;]} Use clear() to erase all elements animal_names.clear() 4.4 Sets Set is unordered collection of unique items. Set is mutable 4.4.1 Creation Set can be declared with {}, unlike list creation uses ‘[]’. myset = {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;} print (myset) # notice no repetition values ## {&#39;d&#39;, &#39;e&#39;, &#39;g&#39;, &#39;f&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;} Set can be created from list, and then converted back to list mylist = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;a&#39;,&#39;b&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;] myset = set(mylist) my_unique_list = list(myset) print ( &#39;Original List : &#39;, mylist, &#39;\\nConvert to set : &#39;, myset, &#39;\\nConvert back to list: &#39;, my_unique_list) # notice no repetition values ## Original List : [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;] ## Convert to set : {&#39;d&#39;, &#39;e&#39;, &#39;g&#39;, &#39;f&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;} ## Convert back to list: [&#39;d&#39;, &#39;e&#39;, &#39;g&#39;, &#39;f&#39;, &#39;c&#39;, &#39;a&#39;, &#39;b&#39;] 4.4.2 Membership Test print (&#39;a&#39; in myset) # is member ? ## True print (&#39;f&#39; not in myset) # is not member ? ## False 4.4.3 Subset Test Subset Test : &lt;= Proper Subset Test : &lt; mysubset = {&#39;d&#39;,&#39;g&#39;} mysubset &lt;= myset ## True Proper Subset test that the master set contain at least one element which is not in the subset mysubset = {&#39;b&#39;,&#39;a&#39;,&#39;d&#39;,&#39;c&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;} print (&#39;Is Subset : &#39;, mysubset &lt;= myset) ## Is Subset : True print (&#39;Is Proper Subet : &#39;, mysubset &lt; myset) ## Is Proper Subet : False 4.4.4 Union using | {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;} | {&#39;a&#39;,&#39;e&#39;,&#39;f&#39;} ## {&#39;f&#39;, &#39;c&#39;, &#39;a&#39;, &#39;e&#39;, &#39;b&#39;} 4.4.5 Intersection using &amp; Any elments that exist in both left and right set {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;} &amp; {&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;} ## {&#39;c&#39;, &#39;d&#39;} 4.4.6 Difference using - Remove right from left {&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;} - {&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;} ## {&#39;b&#39;, &#39;a&#39;} 4.5 range range(X) generates sequence of integer object range (lower_bound, upper_bound, step_size) # lower bound is optional, default = 0 # upper bound is not included in result # step is optional, default = 1 Use list() to convert in order to view actual sequence of data r = range(10) # default lower bound =0, step =1 print (type (r)) ## &lt;class &#39;range&#39;&gt; print (r) ## range(0, 10) print (list(r)) ## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] More Examples print (list(range(2,8))) # step not specified, default 1 ## [2, 3, 4, 5, 6, 7] print (&#39;Odds Number : &#39; , list(range(1,10,2))) # generate odds number ## Odds Number : [1, 3, 5, 7, 9] "],
["control-and-loops.html", "5 Control and Loops 5.1 If Statement 5.2 For Loops 5.3 Generators", " 5 Control and Loops 5.1 If Statement 5.1.1 Multiline If.. Statements price = 102 if price &lt;100: print (&#39;buy&#39;) elif price &lt; 110: print (&#39;hold&#39;) elif price &lt; 120: print (&#39;think about it&#39;) else: print (&#39;sell&#39;) ## hold print(&#39;end of programming&#39;) ## end of programming 5.1.2 Single Line If .. Statement price = 70 if price&lt;80: print(&#39;buy&#39;) ## buy price = 85 &#39;buy&#39; if (price&lt;80) else &#39;dont buy&#39; ## &#39;dont buy&#39; 5.2 For Loops 5.2.1 Loop thorugh ‘range’ for i in range (1,10,2): print (&#39;Odds Number : &#39;,i) ## Odds Number : 1 ## Odds Number : 3 ## Odds Number : 5 ## Odds Number : 7 ## Odds Number : 9 5.2.2 Loop through ‘list’ 5.2.2.1 Standard For Loop letters = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;] for e in letters: print (&#39;Letter : &#39;,e) ## Letter : a ## Letter : b ## Letter : c ## Letter : d 5.2.2.2 List Comprehension Iterate through existing list, and build new list based on condition new_list = [expression(i) for i in old_list] s = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] [x.upper() for x in s] ## [&#39;ABC&#39;, &#39;ABCD&#39;, &#39;BCDE&#39;, &#39;BCDEE&#39;, &#39;CDEFG&#39;] Extend list comprehension can be extended with if condition** new_list = [expression(i) for i in old_list if filter(i)] old_list = [&#39;abc&#39;,&#39;abcd&#39;,&#39;bcde&#39;,&#39;bcdee&#39;,&#39;cdefg&#39;] matching = [ x.upper() for x in old_list if &#39;bcd&#39; in x ] print( matching ) ## [&#39;ABCD&#39;, &#39;BCDE&#39;, &#39;BCDEE&#39;] 5.2.3 Loop Through ‘Dictionary’ Looping through dict will picup key d = {&quot;x&quot;: 1, &quot;y&quot;: 2} for key in d: print (key, d[key]) ## x 1 ## y 2 5.3 Generators Generator is lazy, produce items only if asked for, hence more memory efficient Generator is function with ‘yield’ instead of ‘return’ Generator contains one or more yields statement When called, it returns an object (iterator) but does not start execution immediately Methods like iter() and next() are implemented automatically. So we can iterate through the items using next() Once the function yields, the function is paused and the control is transferred to the caller Local variables and their states are remembered between successive calls Finally, when the function terminates, StopIteration is raised automatically on further calls 5.3.1 Basic Generator Function Below example give clear understanding of how generator works def my_gen(): n = 1 print(&#39;This is printed first&#39;) # Generator function contains yield statements yield n n += 1 print(&#39;This is printed second&#39;) yield n n += 1 print(&#39;This is printed at last&#39;) yield n a = my_gen() type(a) ## &lt;class &#39;generator&#39;&gt; next(a) ## This is printed first ## 1 next(a) ## This is printed second ## 2 5.3.2 Useful Generator Fuction Generator is only useful when it uses for-loop - for-loop within generator - for-loop to iterate through a generator def rev_str(my_str): length = len(my_str) for i in range(length - 1,-1,-1): yield my_str[i] for c in rev_str(&quot;hello&quot;): print(c) ## o ## l ## l ## e ## h 5.3.3 Generator Expression Use () to create an annonymous generator function my_list = [1, 3, 6, 10] a = (x**2 for x in my_list) next(a) ## 1 next(a) ## 9 sum(a) # sum the power of 6,10 ## 136 5.3.4 Compare to Iterator Class class PowTwo: def __init__(self, max = 0): self.max = max def __iter__(self): self.n = 0 return self def __next__(self): if self.n &gt; self.max: raise StopIteration result = 2 ** self.n self.n += 1 return result Obviously, Generator is more concise and cleaner def PowTwoGen(max = 0): n = 0 while n &lt; max: yield 2 ** n n += 1 "],
["library-and-functions.html", "6 Library and Functions 6.1 Package Source 6.2 Importing Library 6.3 Define Function", " 6 Library and Functions Library are group of functions 6.1 Package Source 6.1.1 Conda Package manager for any language Install binaries 6.1.2 PIP Package manager python only Compile from source Stands for Pip Installs Packages Python’s officially-sanctioned package manager, and is most commonly used to install packages published on the Python Package Index (PyPI) Both pip and PyPI are governed and supported by the Python Packaging Authority (PyPA). 6.2 Importing Library There are two methods to import library functions: Standalone Namespace - import &lt;libName&gt; # access function through: libName.functionName - import &lt;libName&gt; as &lt;shortName&gt; # access function through: shortName.functionName Global Namespace - from &lt;libName&gt; import * # all functions available at global namespace - from &lt;libName&gt; import &lt;functionName&gt; # access function through: functionName - from &lt;libName&gt; import &lt;functionName&gt; as &lt;shortFunctionName&gt; # access function through shortFunctionName 6.2.1 Import Entire Library 6.2.1.1 Import Into Standalone Namespace import math math.sqrt(9) ## 3.0 Use as for aliasing library name. This is useful if you have conflicting library name import math as m m.sqrt(9) ## 3.0 6.2.1.2 Import Into Global Name Space All functions in the library accessible through global namespace from &lt;libName&gt; import * 6.2.2 Import Specific Function from math import sqrt print (sqrt(9)) ## 3.0 Use as for aliasing function name from math import sqrt as sq print (sq(9)) ## 3.0 6.2.3 Machine Learning Packages alt text 6.3 Define Function 6.3.1 Function Arguments By default, arguments are assigned to function left to right def myfun(x,y): print (&#39;x:&#39;,x) print (&#39;y:&#39;,y) myfun(5,8) ## x: 5 ## y: 8 However, you can also specify the argument assigment during function call myfun (y=8,x=5) ## x: 5 ## y: 8 Function can have default argement value def myfun(x=1,y=1): # default argument value is 1 print (&#39;x:&#39;,x) print (&#39;y:&#39;,y) myfun(5) # pass only one argument ## x: 5 ## y: 1 6.3.2 List Within Function Consider a function is an object, its variable (some_list) is immutable and hence its reference won’t change, even data changes def spam (elem, some_list=[]): some_list.append(elem) return some_list print (spam(1)) ## [1] print (spam(2)) ## [1, 2] print (spam(3)) ## [1, 2, 3] 6.3.3 Return Statement def bigger(x,y): if (x&gt;y): return x else: return y print (bigger(5,8)) ## 8 6.3.4 No Return Statement if no return statement, python return None def dummy(): print (&#39;This is a dummy function, return no value&#39;) dummy() ## This is a dummy function, return no value 6.3.5 Return Multiple Value Multiple value is returned as tuple. Use multiple assignment to assign to multiple variable def minmax(x,y,z): return min(x,y,z), max(x,y,z) a,b = minmax(7,8,9) # multiple assignment c = minmax(7,8,9) # tuple print (a,b) ## 7 9 print (c) ## (7, 9) 6.3.6 Passing Function as Argument You can pass a function name as an argument to a function def myfun(x,y,f): f(x,y) myfun(&#39;hello&#39;,54,print) ## hello 54 6.3.7 Arguments args is a tuple 6.3.7.1 Example 1 Error example, too many parameters passed over to function 6.3.7.2 Example 2 First argument goes to x, remaining goes to args as tuple def myfun(x,*args): print (x) print (args) #tuple myfun(1,2,3,4,5,&#39;abc&#39;) ## 1 ## (2, 3, 4, 5, &#39;abc&#39;) 6.3.7.3 Example 3 First argument goes to x, second argument goest to y, remaining goes to args def myfun(x,y,*args): print (x) print (y) print (args) #tuple myfun(1,2,3) ## 1 ## 2 ## (3,) 6.3.7.4 Example 4 def myfun(x,*args, y=9): print (x) print (y) print (args) #tuple myfun(1,2,3,4,5) ## 1 ## 9 ## (2, 3, 4, 5) 6.3.7.5 Example 5 All goes to args def myfun(*args): print (args) #tuple myfun(1,2,3,4,5) ## (1, 2, 3, 4, 5) 6.3.7.6 Example 6 Empty args def myfun(x,y,*args): print (x) print (y) print (args) myfun(1,2) ## 1 ## 2 ## () 6.3.8 keyword arguments kwargs is a dictionary 6.3.8.1 Example 1 def foo(**kwargs): print(kwargs) foo(a=1,b=2,c=3) ## {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3} 6.3.8.2 Example 2 def foo(x,**kwargs): print(x) print(kwargs) foo(9,a=1,b=2,c=3) ## 9 ## {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3} foo(9) #empty dictionary ## 9 ## {} 6.3.8.3 Example 3 def foo(a,b,c,d=1): print(a) print(b) print(c) print(d) foo(**{&quot;a&quot;:2,&quot;b&quot;:3,&quot;c&quot;:4}) ## 2 ## 3 ## 4 ## 1 6.3.9 Mixing *args, **kwargs Always put args before kwargs 6.3.9.1 Example 1 def foo(x,y=1,**kwargs): print (x) print (y) print (kwargs) foo(1,2,c=3,d=4) ## 1 ## 2 ## {&#39;c&#39;: 3, &#39;d&#39;: 4} 6.3.9.2 Example 2 def foo(x,y=2,*args,**kwargs): print (x) print (y) print (args) print (kwargs) foo(1,2,3,4,5,c=6,d=7) ## 1 ## 2 ## (3, 4, 5) ## {&#39;c&#39;: 6, &#39;d&#39;: 7} "],
["object-oriented-programming.html", "7 Object Oriented Programming 7.1 Defining Class 7.2 Object Class Assignment 7.3 Calling Method 7.4 Getting Property 7.5 Setting Property", " 7 Object Oriented Programming 7.1 Defining Class Every function within a class must have at least one parameter - self, accept it Use init as the constructor function. init is optional class Person: wallet = 0 # def __init__(self, myname,money=0): # constructor self.name = myname self.wallet=money def say_hi(self): print(&#39;Hello, my name is : &#39;, self.name) def say_bye(self): print(&#39;Goodbye&#39;, Person.ID) def take(self,amount): self.wallet+=amount def balance(self): print(&#39;Wallet Balance:&#39;,self.wallet) 7.2 Object Class Assignment #p = Person() ## this will fail, as the constructor expect a parameter p1 = Person(&#39;Yong&#39;) p2 = Person(&#39;Gan&#39;,200) 7.3 Calling Method p1.say_hi() ## Hello, my name is : Yong p1.balance() ## Wallet Balance: 0 p2.say_hi() ## Hello, my name is : Gan p2.balance() ## Wallet Balance: 200 7.4 Getting Property p1.wallet ## 0 p2.wallet ## 200 7.5 Setting Property p1.wallet = 900 p1.wallet ## 900 "],
["decorator.html", "8 Decorator 8.1 Definition 8.2 Examples", " 8 Decorator 8.1 Definition Decorator is a function that accept callable as the only argument The main purpose of decarator is to enhance the program of the decorated function It returns a callable 8.2 Examples 8.2.1 Example 1 - Plain decorator function Many times, it is useful to register a function elsewhere - for example, registering a task in a task runner, or a functin with signal handler register is a decarator, it accept decorated as the only argument foo() and bar() are the decorated function of register registry = [] def register(decorated): registry.append(decorated) return decorated @register def foo(): return 3 @register def bar(): return 5 registry ## [&lt;function foo at 0x000000002498D268&gt;, &lt;function bar at 0x0000000024981D08&gt;] registry[0]() ## 3 registry[1]() ## 5 8.2.2 Example 2 - Decorator with Class Extending the use case above register is the decarator, it has only one argument class Registry(object): def __init__(self): self._functions = [] def register(self,decorated): self._functions.append(decorated) return decorated def run_all(self,*args,**kwargs): return_values = [] for func in self._functions: return_values.append(func(*args,**kwargs)) return return_values The decorator will decorate two functions, for both object a and b a = Registry() b = Registry() @a.register def foo(x=3): return x @b.register def bar(x=5): return x @a.register @b.register def bax(x=7): return x Observe the result print (a._functions) ## [&lt;function foo at 0x000000002498DF28&gt;, &lt;function bax at 0x000000002498E0D0&gt;] print (b._functions) ## [&lt;function bar at 0x000000002498E048&gt;, &lt;function bax at 0x000000002498E0D0&gt;] print (a.run_all()) ## [3, 7] print (b.run_all()) ## [5, 7] print ( a.run_all(x=9) ) ## [9, 9] print ( b.run_all(x=9) ) ## [9, 9] "],
["datetime-standard-library.html", "9 datetime Standard Library 9.1 ISO8601 9.2 Module Import 9.3 Class 9.4 date 9.5 date and datetime 9.6 time 9.7 timedelta", " 9 datetime Standard Library This is a built-in library by Python. There is no need to install this library. 9.1 ISO8601 https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators 9.1.1 Date Time UTC: \"2007-04-05T14:30Z\" #notice Z GMT+8: \"2007-04-05T12:30+08:00 #notice +08:00 GMT+8: \"2007-04-05T12:30+0800 #notice +0800 GMT+8: \"2007-04-05T12:30+08 #notice +08 9.1.2 Date 2019-02-04 #notice no timezone available 9.2 Module Import from datetime import date # module for date object from datetime import time # module for time object from datetime import datetime # module for datetime object from datetime import timedelta 9.3 Class datetime library contain three class of objects: - date (year,month,day) - time (hour,minute,second) - datetime (year,month,day,hour,minute,second) - timedelta: duration between two datetime or date object 9.4 date 9.4.1 Constructor print( date(2000,1,1) ) ## 2000-01-01 print( date(year=2000,month=1,day=1) ) ## 2000-01-01 print( type(date(year=2000,month=1,day=1))) ## &lt;class &#39;datetime.date&#39;&gt; 9.4.2 Class Method 9.4.2.1 today This is local date (not UTC) date.today() ## datetime.date(2019, 12, 28) print( date.today() ) ## 2019-12-28 9.4.2.2 Convert From ISO fromisoformat strptime is not available for date conversion. It is only for datetime conversion date.fromisoformat(&#39;2011-11-11&#39;) ## datetime.date(2011, 11, 11) To convert non-iso format date string to date object, convert to datetime first, then to date 9.4.3 Instance Method 9.4.3.1 replace() Replace year/month/day with specified parameter, non specified params will remain unchange. Example below change only month. You can change year or day in combination print( date.today() ) ## 2019-12-28 print( date.today().replace(month=8) ) ## 2019-08-28 9.4.3.2 weekday(), isoweekday() For weekday(), Zero being Monday For isoweekday(), Zero being Sunday print( date.today().weekday() ) ## 5 print( date.today().isoweekday() ) ## 6 weekdays = [&#39;Mon&#39;,&#39;Tue&#39;,&#39;Wed&#39;,&#39;Thu&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;] wd = date.today().weekday() print( date.today(), &quot;is day&quot;, wd ,&quot;which is&quot;, weekdays[wd] ) ## 2019-12-28 is day 5 which is Sat 9.4.3.3 Formating with isoformat() isoformat() return ISO 8601 String (YYYY-MM-DD) date.today().isoformat() # return string ## &#39;2019-12-28&#39; 9.4.3.4 Formating with strftime For complete directive, see below: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior date.today().strftime(&quot;%m/%d&quot;) ## &#39;12/28&#39; 9.4.3.5 isocalendar() isocalendar return a 3-tuple, (ISO year, ISO week number, ISO weekday). date.today().isocalendar() ## return tuple ## (2019, 52, 6) 9.4.4 Attributes print( date.today().year ) ## 2019 print( date.today().month ) ## 12 print( date.today().day ) ## 28 9.5 date and datetime 9.5.1 Constructor import datetime as dt print( dt.date(2000,1,1,), &#39;\\n&#39;, dt.datetime(2000,1,1,0,0,0), &#39;\\n&#39;, dt.datetime(year=2000,month=1,day=1,hour=23,minute=15,second=55),&#39;\\n&#39;, type(dt.date(2000,1,1)),&#39;\\n&#39;, type(dt.datetime(2000,1,1,0,0,0))) ## 2000-01-01 ## 2000-01-01 00:00:00 ## 2000-01-01 23:15:55 ## &lt;class &#39;datetime.date&#39;&gt; ## &lt;class &#39;datetime.datetime&#39;&gt; 9.5.2 Class Method 9.5.2.1 now and today Both now() and today() return current system local datetime, no timezone print( dt.datetime.now(), &#39;\\n&#39;, dt.datetime.now().date()) ## 2019-12-28 07:53:19.056779 ## 2019-12-28 dt.datetime.today() ## datetime.datetime(2019, 12, 28, 7, 53, 19, 92778) 9.5.2.2 utcnow dt.datetime.utcnow() ## datetime.datetime(2019, 12, 27, 23, 53, 19, 118777) 9.5.2.3 combine() date and time Apply datetime.combine() module method on both date and time object to get datetime now = dt.datetime.now() dt.datetime.combine(now.date(), now.time()) ## datetime.datetime(2019, 12, 28, 7, 53, 19, 160781) 9.5.2.4 Convert from String strptime() Use strptime to convert string into datetime object %I : 12-hour %H : 24-hour %M : Minute %p : AM/PM %y : 18 %Y : 2018 %b : Mar %m : month (1 to 12) %d : day datetime.strptime(&#39;2011-02-25&#39;,&#39;%Y-%m-%d&#39;) ## datetime.datetime(2011, 2, 25, 0, 0) datetime.strptime(&#39;9-01-18&#39;,&#39;%d-%m-%y&#39;) ## datetime.datetime(2018, 1, 9, 0, 0) datetime.strptime(&#39;09-Mar-2018&#39;,&#39;%d-%b-%Y&#39;) ## datetime.datetime(2018, 3, 9, 0, 0) datetime.strptime(&#39;2/5/2018 4:49 PM&#39;, &#39;%m/%d/%Y %I:%M %p&#39;) ## datetime.datetime(2018, 2, 5, 16, 49) 9.5.2.5 Convert from ISO fromisoformat fromisoformat() is intend to be reverse of isoformat() It actually not ISO compliance: when Z or +8 is included at the end of the string, error occur #s = dt.datetime.now().isoformat() dt.datetime.fromisoformat(&quot;2019-02-05T10:22:33&quot;) ## datetime.datetime(2019, 2, 5, 10, 22, 33) 9.5.3 Instance Method 9.5.3.1 weekday datetime.now().weekday() ## 5 9.5.3.2 replace datetime.now().replace(year=1999) ## datetime.datetime(1999, 12, 28, 7, 53, 19, 475779) 9.5.3.3 convert to .time() datetime.now().time() ## datetime.time(7, 53, 19, 502782) 9.5.3.4 Convert to .date() datetime.now().date() ## datetime.date(2019, 12, 28) 9.5.3.5 Convert to String str str( datetime.now() ) ## &#39;2019-12-28 07:53:19.619779&#39; Use strftime() dt.datetime.now().strftime(&#39;%d-%b-%Y&#39;) ## &#39;28-Dec-2019&#39; dt.datetime.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;) ## ISO 8601 UTC ## &#39;2019-12-27T23:53:19.678778Z&#39; Use isoformat() dt.datetime.utcnow().isoformat() ## &#39;2019-12-27T23:53:19.709779&#39; 9.5.4 Attributes print( datetime.now().year ) ## 2019 print( datetime.now().month ) ## 12 print( datetime.now().day ) ## 28 print( datetime.now().hour ) ## 7 print( datetime.now().minute ) ## 53 9.6 time 9.6.1 Constructor print( time(2) ) #default single arugement, hour ## 02:00:00 print( time(2,15) ) #default two arguments, hour, minute ## 02:15:00 print( time(hour=2,minute=15,second=30) ) ## 02:15:30 9.6.2 Class Method 9.6.2.1 now() There is unfortunately no single function to extract the current time. Use time() function of an datetime object datetime.now().time() ## datetime.time(7, 53, 19, 901778) 9.6.3 Attributes print( datetime.now().time().hour ) ## 7 print( datetime.now().time().minute ) ## 53 print( datetime.now().time().second ) ## 19 9.7 timedelta years argument is not supported Apply timedelta on datetime object timedelta cannot be applied on time object , because timedelta potentially go beyond single day (24H) delt = timedelta(days=365,minutes=33,seconds=15) now = datetime.now() print (&#39;delt+now : &#39;, now+delt) ## delt+now : 2020-12-27 08:26:35.050777 "],
["getting-external-data.html", "10 Getting External Data", " 10 Getting External Data "],
["plydata-dplyr-for-python.html", "11 Plydata (dplyr for Python) 11.1 Sample Data 11.2 Column Manipulation 11.3 Sorting (arrange) 11.4 Grouping 11.5 Summarization", " 11 Plydata (dplyr for Python) 11.1 Sample Data n = 200 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,6, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,3, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) #value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2 #&#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 ## 0 C1 D2 G1 45.125451 20.950839 ## 1 C1 D2 G2 56.797387 21.073454 ## 2 C1 D1 G1 52.652265 22.331955 ## 3 C3 D4 G2 44.480486 22.720575 ## 4 C1 D3 G2 46.921364 22.781715 11.2 Column Manipulation 11.2.1 Copy Column mydf &gt;&gt; define(newcol = &#39;value1&#39;) # simple method for one column ## comp dept grp value1 value2 newcol ## 0 C1 D2 G1 45.125451 20.950839 45.125451 ## 1 C1 D2 G2 56.797387 21.073454 56.797387 ## 2 C1 D1 G1 52.652265 22.331955 52.652265 ## 3 C3 D4 G2 44.480486 22.720575 44.480486 ## 4 C1 D3 G2 46.921364 22.781715 46.921364 ## 5 C3 D2 G1 43.376765 19.260379 43.376765 ## 6 C1 D5 G2 55.434494 20.557452 55.434494 ## 7 C2 D2 G2 52.411195 19.265704 52.411195 ## 8 C1 D1 G1 57.422643 16.545907 57.422643 ## 9 C2 D4 G2 49.638485 19.475124 49.638485 ## 10 C1 D5 G1 45.948903 17.522787 45.948903 ## 11 C2 D1 G1 48.045564 17.656576 48.045564 ## 12 C2 D5 G1 47.840765 19.932974 47.840765 ## 13 C1 D2 G2 44.505284 15.924938 44.505284 ## 14 C2 D5 G2 57.137493 19.643537 57.137493 ## 15 C3 D5 G1 51.264104 29.052924 51.264104 ## 16 C1 D5 G1 53.002353 18.698534 53.002353 ## 17 C3 D1 G2 50.773057 17.361727 50.773057 ## 18 C3 D3 G1 43.698503 21.640568 43.698503 ## 19 C3 D3 G2 55.204016 19.906398 55.204016 ## 20 C2 D5 G2 60.897597 19.168090 60.897597 ## 21 C3 D4 G2 41.314374 15.742055 41.314374 ## 22 C1 D3 G2 54.182821 23.680108 54.182821 ## 23 C3 D3 G1 46.914191 22.433649 46.914191 ## 24 C2 D2 G2 37.559419 24.559500 37.559419 ## 25 C2 D5 G2 44.131021 17.807201 44.131021 ## 26 C1 D2 G2 53.955978 26.995903 53.955978 ## 27 C3 D3 G1 42.432182 18.255697 42.432182 ## 28 C1 D3 G2 53.208533 20.161540 53.208533 ## 29 C1 D2 G2 47.760053 21.595053 47.760053 ## .. ... ... .. ... ... ... ## 170 C1 D4 G1 44.415971 19.450670 44.415971 ## 171 C1 D1 G2 47.902060 17.764139 47.902060 ## 172 C3 D4 G2 49.643566 17.521932 49.643566 ## 173 C2 D3 G2 46.991130 21.583297 46.991130 ## 174 C2 D3 G2 48.976666 21.743309 48.976666 ## 175 C2 D1 G2 46.295232 20.638051 46.295232 ## 176 C3 D5 G1 50.193524 17.763019 50.193524 ## 177 C1 D4 G2 52.619193 17.575398 52.619193 ## 178 C3 D1 G2 55.654651 21.566492 55.654651 ## 179 C1 D4 G1 59.067621 25.904054 59.067621 ## 180 C1 D5 G1 50.057293 17.101208 50.057293 ## 181 C1 D1 G1 48.667089 26.640439 48.667089 ## 182 C1 D1 G2 40.981748 20.460720 40.981748 ## 183 C2 D3 G1 50.755011 24.945547 50.755011 ## 184 C2 D4 G2 42.601846 17.179685 42.601846 ## 185 C1 D1 G2 53.272315 14.455873 53.272315 ## 186 C1 D1 G2 53.919104 15.432809 53.919104 ## 187 C3 D4 G2 47.148467 18.133080 47.148467 ## 188 C2 D5 G1 45.675681 21.325192 45.675681 ## 189 C3 D2 G2 45.930946 19.227000 45.930946 ## 190 C2 D3 G1 51.979550 18.584123 51.979550 ## 191 C1 D4 G2 52.837015 19.741110 52.837015 ## 192 C1 D2 G2 51.284961 17.022034 51.284961 ## 193 C3 D5 G2 50.311469 22.823787 50.311469 ## 194 C1 D1 G1 51.579678 20.162894 51.579678 ## 195 C3 D1 G1 52.699026 18.655169 52.699026 ## 196 C2 D4 G2 49.976969 23.148864 49.976969 ## 197 C1 D2 G1 40.249270 19.681849 40.249270 ## 198 C3 D2 G1 45.321477 16.858574 45.321477 ## 199 C3 D4 G1 45.309909 22.279842 45.309909 ## ## [200 rows x 6 columns] mydf &gt;&gt; define ((&#39;newcol1&#39;, &#39;value1&#39;), newcol2=&#39;value2&#39;) # method for muiltiple new columns ## comp dept grp value1 value2 newcol1 newcol2 ## 0 C1 D2 G1 45.125451 20.950839 45.125451 20.950839 ## 1 C1 D2 G2 56.797387 21.073454 56.797387 21.073454 ## 2 C1 D1 G1 52.652265 22.331955 52.652265 22.331955 ## 3 C3 D4 G2 44.480486 22.720575 44.480486 22.720575 ## 4 C1 D3 G2 46.921364 22.781715 46.921364 22.781715 ## 5 C3 D2 G1 43.376765 19.260379 43.376765 19.260379 ## 6 C1 D5 G2 55.434494 20.557452 55.434494 20.557452 ## 7 C2 D2 G2 52.411195 19.265704 52.411195 19.265704 ## 8 C1 D1 G1 57.422643 16.545907 57.422643 16.545907 ## 9 C2 D4 G2 49.638485 19.475124 49.638485 19.475124 ## 10 C1 D5 G1 45.948903 17.522787 45.948903 17.522787 ## 11 C2 D1 G1 48.045564 17.656576 48.045564 17.656576 ## 12 C2 D5 G1 47.840765 19.932974 47.840765 19.932974 ## 13 C1 D2 G2 44.505284 15.924938 44.505284 15.924938 ## 14 C2 D5 G2 57.137493 19.643537 57.137493 19.643537 ## 15 C3 D5 G1 51.264104 29.052924 51.264104 29.052924 ## 16 C1 D5 G1 53.002353 18.698534 53.002353 18.698534 ## 17 C3 D1 G2 50.773057 17.361727 50.773057 17.361727 ## 18 C3 D3 G1 43.698503 21.640568 43.698503 21.640568 ## 19 C3 D3 G2 55.204016 19.906398 55.204016 19.906398 ## 20 C2 D5 G2 60.897597 19.168090 60.897597 19.168090 ## 21 C3 D4 G2 41.314374 15.742055 41.314374 15.742055 ## 22 C1 D3 G2 54.182821 23.680108 54.182821 23.680108 ## 23 C3 D3 G1 46.914191 22.433649 46.914191 22.433649 ## 24 C2 D2 G2 37.559419 24.559500 37.559419 24.559500 ## 25 C2 D5 G2 44.131021 17.807201 44.131021 17.807201 ## 26 C1 D2 G2 53.955978 26.995903 53.955978 26.995903 ## 27 C3 D3 G1 42.432182 18.255697 42.432182 18.255697 ## 28 C1 D3 G2 53.208533 20.161540 53.208533 20.161540 ## 29 C1 D2 G2 47.760053 21.595053 47.760053 21.595053 ## .. ... ... .. ... ... ... ... ## 170 C1 D4 G1 44.415971 19.450670 44.415971 19.450670 ## 171 C1 D1 G2 47.902060 17.764139 47.902060 17.764139 ## 172 C3 D4 G2 49.643566 17.521932 49.643566 17.521932 ## 173 C2 D3 G2 46.991130 21.583297 46.991130 21.583297 ## 174 C2 D3 G2 48.976666 21.743309 48.976666 21.743309 ## 175 C2 D1 G2 46.295232 20.638051 46.295232 20.638051 ## 176 C3 D5 G1 50.193524 17.763019 50.193524 17.763019 ## 177 C1 D4 G2 52.619193 17.575398 52.619193 17.575398 ## 178 C3 D1 G2 55.654651 21.566492 55.654651 21.566492 ## 179 C1 D4 G1 59.067621 25.904054 59.067621 25.904054 ## 180 C1 D5 G1 50.057293 17.101208 50.057293 17.101208 ## 181 C1 D1 G1 48.667089 26.640439 48.667089 26.640439 ## 182 C1 D1 G2 40.981748 20.460720 40.981748 20.460720 ## 183 C2 D3 G1 50.755011 24.945547 50.755011 24.945547 ## 184 C2 D4 G2 42.601846 17.179685 42.601846 17.179685 ## 185 C1 D1 G2 53.272315 14.455873 53.272315 14.455873 ## 186 C1 D1 G2 53.919104 15.432809 53.919104 15.432809 ## 187 C3 D4 G2 47.148467 18.133080 47.148467 18.133080 ## 188 C2 D5 G1 45.675681 21.325192 45.675681 21.325192 ## 189 C3 D2 G2 45.930946 19.227000 45.930946 19.227000 ## 190 C2 D3 G1 51.979550 18.584123 51.979550 18.584123 ## 191 C1 D4 G2 52.837015 19.741110 52.837015 19.741110 ## 192 C1 D2 G2 51.284961 17.022034 51.284961 17.022034 ## 193 C3 D5 G2 50.311469 22.823787 50.311469 22.823787 ## 194 C1 D1 G1 51.579678 20.162894 51.579678 20.162894 ## 195 C3 D1 G1 52.699026 18.655169 52.699026 18.655169 ## 196 C2 D4 G2 49.976969 23.148864 49.976969 23.148864 ## 197 C1 D2 G1 40.249270 19.681849 40.249270 19.681849 ## 198 C3 D2 G1 45.321477 16.858574 45.321477 16.858574 ## 199 C3 D4 G1 45.309909 22.279842 45.309909 22.279842 ## ## [200 rows x 7 columns] 11.2.2 New Column from existing Column Without specify the new column name, it will be derived from expression mydf &gt;&gt; define (&#39;value1*2&#39;) ## comp dept grp value1 value2 value1*2 ## 0 C1 D2 G1 45.125451 20.950839 90.250902 ## 1 C1 D2 G2 56.797387 21.073454 113.594773 ## 2 C1 D1 G1 52.652265 22.331955 105.304530 ## 3 C3 D4 G2 44.480486 22.720575 88.960973 ## 4 C1 D3 G2 46.921364 22.781715 93.842729 ## 5 C3 D2 G1 43.376765 19.260379 86.753531 ## 6 C1 D5 G2 55.434494 20.557452 110.868988 ## 7 C2 D2 G2 52.411195 19.265704 104.822391 ## 8 C1 D1 G1 57.422643 16.545907 114.845286 ## 9 C2 D4 G2 49.638485 19.475124 99.276970 ## 10 C1 D5 G1 45.948903 17.522787 91.897805 ## 11 C2 D1 G1 48.045564 17.656576 96.091129 ## 12 C2 D5 G1 47.840765 19.932974 95.681529 ## 13 C1 D2 G2 44.505284 15.924938 89.010567 ## 14 C2 D5 G2 57.137493 19.643537 114.274986 ## 15 C3 D5 G1 51.264104 29.052924 102.528209 ## 16 C1 D5 G1 53.002353 18.698534 106.004706 ## 17 C3 D1 G2 50.773057 17.361727 101.546114 ## 18 C3 D3 G1 43.698503 21.640568 87.397005 ## 19 C3 D3 G2 55.204016 19.906398 110.408032 ## 20 C2 D5 G2 60.897597 19.168090 121.795195 ## 21 C3 D4 G2 41.314374 15.742055 82.628749 ## 22 C1 D3 G2 54.182821 23.680108 108.365642 ## 23 C3 D3 G1 46.914191 22.433649 93.828382 ## 24 C2 D2 G2 37.559419 24.559500 75.118837 ## 25 C2 D5 G2 44.131021 17.807201 88.262042 ## 26 C1 D2 G2 53.955978 26.995903 107.911957 ## 27 C3 D3 G1 42.432182 18.255697 84.864363 ## 28 C1 D3 G2 53.208533 20.161540 106.417066 ## 29 C1 D2 G2 47.760053 21.595053 95.520105 ## .. ... ... .. ... ... ... ## 170 C1 D4 G1 44.415971 19.450670 88.831941 ## 171 C1 D1 G2 47.902060 17.764139 95.804121 ## 172 C3 D4 G2 49.643566 17.521932 99.287132 ## 173 C2 D3 G2 46.991130 21.583297 93.982260 ## 174 C2 D3 G2 48.976666 21.743309 97.953331 ## 175 C2 D1 G2 46.295232 20.638051 92.590464 ## 176 C3 D5 G1 50.193524 17.763019 100.387047 ## 177 C1 D4 G2 52.619193 17.575398 105.238386 ## 178 C3 D1 G2 55.654651 21.566492 111.309301 ## 179 C1 D4 G1 59.067621 25.904054 118.135243 ## 180 C1 D5 G1 50.057293 17.101208 100.114587 ## 181 C1 D1 G1 48.667089 26.640439 97.334179 ## 182 C1 D1 G2 40.981748 20.460720 81.963496 ## 183 C2 D3 G1 50.755011 24.945547 101.510021 ## 184 C2 D4 G2 42.601846 17.179685 85.203691 ## 185 C1 D1 G2 53.272315 14.455873 106.544629 ## 186 C1 D1 G2 53.919104 15.432809 107.838209 ## 187 C3 D4 G2 47.148467 18.133080 94.296934 ## 188 C2 D5 G1 45.675681 21.325192 91.351362 ## 189 C3 D2 G2 45.930946 19.227000 91.861891 ## 190 C2 D3 G1 51.979550 18.584123 103.959101 ## 191 C1 D4 G2 52.837015 19.741110 105.674030 ## 192 C1 D2 G2 51.284961 17.022034 102.569922 ## 193 C3 D5 G2 50.311469 22.823787 100.622938 ## 194 C1 D1 G1 51.579678 20.162894 103.159355 ## 195 C3 D1 G1 52.699026 18.655169 105.398052 ## 196 C2 D4 G2 49.976969 23.148864 99.953937 ## 197 C1 D2 G1 40.249270 19.681849 80.498540 ## 198 C3 D2 G1 45.321477 16.858574 90.642954 ## 199 C3 D4 G1 45.309909 22.279842 90.619818 ## ## [200 rows x 6 columns] Specify the new column name mydf &gt;&gt; define(value3 = &#39;value1*2&#39;) ## comp dept grp value1 value2 value3 ## 0 C1 D2 G1 45.125451 20.950839 90.250902 ## 1 C1 D2 G2 56.797387 21.073454 113.594773 ## 2 C1 D1 G1 52.652265 22.331955 105.304530 ## 3 C3 D4 G2 44.480486 22.720575 88.960973 ## 4 C1 D3 G2 46.921364 22.781715 93.842729 ## 5 C3 D2 G1 43.376765 19.260379 86.753531 ## 6 C1 D5 G2 55.434494 20.557452 110.868988 ## 7 C2 D2 G2 52.411195 19.265704 104.822391 ## 8 C1 D1 G1 57.422643 16.545907 114.845286 ## 9 C2 D4 G2 49.638485 19.475124 99.276970 ## 10 C1 D5 G1 45.948903 17.522787 91.897805 ## 11 C2 D1 G1 48.045564 17.656576 96.091129 ## 12 C2 D5 G1 47.840765 19.932974 95.681529 ## 13 C1 D2 G2 44.505284 15.924938 89.010567 ## 14 C2 D5 G2 57.137493 19.643537 114.274986 ## 15 C3 D5 G1 51.264104 29.052924 102.528209 ## 16 C1 D5 G1 53.002353 18.698534 106.004706 ## 17 C3 D1 G2 50.773057 17.361727 101.546114 ## 18 C3 D3 G1 43.698503 21.640568 87.397005 ## 19 C3 D3 G2 55.204016 19.906398 110.408032 ## 20 C2 D5 G2 60.897597 19.168090 121.795195 ## 21 C3 D4 G2 41.314374 15.742055 82.628749 ## 22 C1 D3 G2 54.182821 23.680108 108.365642 ## 23 C3 D3 G1 46.914191 22.433649 93.828382 ## 24 C2 D2 G2 37.559419 24.559500 75.118837 ## 25 C2 D5 G2 44.131021 17.807201 88.262042 ## 26 C1 D2 G2 53.955978 26.995903 107.911957 ## 27 C3 D3 G1 42.432182 18.255697 84.864363 ## 28 C1 D3 G2 53.208533 20.161540 106.417066 ## 29 C1 D2 G2 47.760053 21.595053 95.520105 ## .. ... ... .. ... ... ... ## 170 C1 D4 G1 44.415971 19.450670 88.831941 ## 171 C1 D1 G2 47.902060 17.764139 95.804121 ## 172 C3 D4 G2 49.643566 17.521932 99.287132 ## 173 C2 D3 G2 46.991130 21.583297 93.982260 ## 174 C2 D3 G2 48.976666 21.743309 97.953331 ## 175 C2 D1 G2 46.295232 20.638051 92.590464 ## 176 C3 D5 G1 50.193524 17.763019 100.387047 ## 177 C1 D4 G2 52.619193 17.575398 105.238386 ## 178 C3 D1 G2 55.654651 21.566492 111.309301 ## 179 C1 D4 G1 59.067621 25.904054 118.135243 ## 180 C1 D5 G1 50.057293 17.101208 100.114587 ## 181 C1 D1 G1 48.667089 26.640439 97.334179 ## 182 C1 D1 G2 40.981748 20.460720 81.963496 ## 183 C2 D3 G1 50.755011 24.945547 101.510021 ## 184 C2 D4 G2 42.601846 17.179685 85.203691 ## 185 C1 D1 G2 53.272315 14.455873 106.544629 ## 186 C1 D1 G2 53.919104 15.432809 107.838209 ## 187 C3 D4 G2 47.148467 18.133080 94.296934 ## 188 C2 D5 G1 45.675681 21.325192 91.351362 ## 189 C3 D2 G2 45.930946 19.227000 91.861891 ## 190 C2 D3 G1 51.979550 18.584123 103.959101 ## 191 C1 D4 G2 52.837015 19.741110 105.674030 ## 192 C1 D2 G2 51.284961 17.022034 102.569922 ## 193 C3 D5 G2 50.311469 22.823787 100.622938 ## 194 C1 D1 G1 51.579678 20.162894 103.159355 ## 195 C3 D1 G1 52.699026 18.655169 105.398052 ## 196 C2 D4 G2 49.976969 23.148864 99.953937 ## 197 C1 D2 G1 40.249270 19.681849 80.498540 ## 198 C3 D2 G1 45.321477 16.858574 90.642954 ## 199 C3 D4 G1 45.309909 22.279842 90.619818 ## ## [200 rows x 6 columns] Define multiple new columns in one go. Observe there are three ways to specify the new columns mydf &gt;&gt; define(&#39;value1*2&#39;,(&#39;newcol2&#39;,&#39;value2*2&#39;),newcol3=&#39;value2*3&#39;) ## comp dept grp ... value1*2 newcol2 newcol3 ## 0 C1 D2 G1 ... 90.250902 41.901678 62.852516 ## 1 C1 D2 G2 ... 113.594773 42.146907 63.220361 ## 2 C1 D1 G1 ... 105.304530 44.663909 66.995864 ## 3 C3 D4 G2 ... 88.960973 45.441149 68.161724 ## 4 C1 D3 G2 ... 93.842729 45.563430 68.345145 ## 5 C3 D2 G1 ... 86.753531 38.520758 57.781138 ## 6 C1 D5 G2 ... 110.868988 41.114904 61.672355 ## 7 C2 D2 G2 ... 104.822391 38.531408 57.797112 ## 8 C1 D1 G1 ... 114.845286 33.091814 49.637721 ## 9 C2 D4 G2 ... 99.276970 38.950247 58.425371 ## 10 C1 D5 G1 ... 91.897805 35.045574 52.568361 ## 11 C2 D1 G1 ... 96.091129 35.313152 52.969729 ## 12 C2 D5 G1 ... 95.681529 39.865948 59.798921 ## 13 C1 D2 G2 ... 89.010567 31.849876 47.774814 ## 14 C2 D5 G2 ... 114.274986 39.287074 58.930611 ## 15 C3 D5 G1 ... 102.528209 58.105849 87.158773 ## 16 C1 D5 G1 ... 106.004706 37.397068 56.095602 ## 17 C3 D1 G2 ... 101.546114 34.723453 52.085180 ## 18 C3 D3 G1 ... 87.397005 43.281136 64.921703 ## 19 C3 D3 G2 ... 110.408032 39.812796 59.719193 ## 20 C2 D5 G2 ... 121.795195 38.336180 57.504269 ## 21 C3 D4 G2 ... 82.628749 31.484111 47.226166 ## 22 C1 D3 G2 ... 108.365642 47.360215 71.040323 ## 23 C3 D3 G1 ... 93.828382 44.867298 67.300947 ## 24 C2 D2 G2 ... 75.118837 49.118999 73.678499 ## 25 C2 D5 G2 ... 88.262042 35.614401 53.421602 ## 26 C1 D2 G2 ... 107.911957 53.991807 80.987710 ## 27 C3 D3 G1 ... 84.864363 36.511395 54.767092 ## 28 C1 D3 G2 ... 106.417066 40.323080 60.484621 ## 29 C1 D2 G2 ... 95.520105 43.190106 64.785159 ## .. ... ... .. ... ... ... ... ## 170 C1 D4 G1 ... 88.831941 38.901339 58.352009 ## 171 C1 D1 G2 ... 95.804121 35.528277 53.292416 ## 172 C3 D4 G2 ... 99.287132 35.043864 52.565796 ## 173 C2 D3 G2 ... 93.982260 43.166594 64.749892 ## 174 C2 D3 G2 ... 97.953331 43.486619 65.229928 ## 175 C2 D1 G2 ... 92.590464 41.276103 61.914154 ## 176 C3 D5 G1 ... 100.387047 35.526038 53.289058 ## 177 C1 D4 G2 ... 105.238386 35.150795 52.726193 ## 178 C3 D1 G2 ... 111.309301 43.132985 64.699477 ## 179 C1 D4 G1 ... 118.135243 51.808109 77.712163 ## 180 C1 D5 G1 ... 100.114587 34.202416 51.303625 ## 181 C1 D1 G1 ... 97.334179 53.280877 79.921316 ## 182 C1 D1 G2 ... 81.963496 40.921441 61.382161 ## 183 C2 D3 G1 ... 101.510021 49.891094 74.836641 ## 184 C2 D4 G2 ... 85.203691 34.359370 51.539055 ## 185 C1 D1 G2 ... 106.544629 28.911746 43.367619 ## 186 C1 D1 G2 ... 107.838209 30.865617 46.298426 ## 187 C3 D4 G2 ... 94.296934 36.266159 54.399239 ## 188 C2 D5 G1 ... 91.351362 42.650385 63.975577 ## 189 C3 D2 G2 ... 91.861891 38.453999 57.680999 ## 190 C2 D3 G1 ... 103.959101 37.168247 55.752370 ## 191 C1 D4 G2 ... 105.674030 39.482219 59.223329 ## 192 C1 D2 G2 ... 102.569922 34.044067 51.066101 ## 193 C3 D5 G2 ... 100.622938 45.647574 68.471361 ## 194 C1 D1 G1 ... 103.159355 40.325789 60.488683 ## 195 C3 D1 G1 ... 105.398052 37.310339 55.965508 ## 196 C2 D4 G2 ... 99.953937 46.297728 69.446592 ## 197 C1 D2 G1 ... 80.498540 39.363699 59.045548 ## 198 C3 D2 G1 ... 90.642954 33.717147 50.575721 ## 199 C3 D4 G1 ... 90.619818 44.559683 66.839525 ## ## [200 rows x 8 columns] 11.2.3 Select Column(s) mydf2 = mydf &gt;&gt; define(newcol1=&#39;value1&#39;,newcol2=&#39;value2&#39;) mydf2.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 200 entries, 0 to 199 ## Data columns (total 7 columns): ## comp 200 non-null object ## dept 200 non-null object ## grp 200 non-null object ## value1 200 non-null float64 ## value2 200 non-null float64 ## newcol1 200 non-null float64 ## newcol2 200 non-null float64 ## dtypes: float64(4), object(3) ## memory usage: 11.0+ KB 11.2.3.1 By Column Names Exact Coumn Name mydf2 &gt;&gt; select (&#39;comp&#39;,&#39;dept&#39;,&#39;value1&#39;) ## comp dept value1 ## 0 C1 D2 45.125451 ## 1 C1 D2 56.797387 ## 2 C1 D1 52.652265 ## 3 C3 D4 44.480486 ## 4 C1 D3 46.921364 ## 5 C3 D2 43.376765 ## 6 C1 D5 55.434494 ## 7 C2 D2 52.411195 ## 8 C1 D1 57.422643 ## 9 C2 D4 49.638485 ## 10 C1 D5 45.948903 ## 11 C2 D1 48.045564 ## 12 C2 D5 47.840765 ## 13 C1 D2 44.505284 ## 14 C2 D5 57.137493 ## 15 C3 D5 51.264104 ## 16 C1 D5 53.002353 ## 17 C3 D1 50.773057 ## 18 C3 D3 43.698503 ## 19 C3 D3 55.204016 ## 20 C2 D5 60.897597 ## 21 C3 D4 41.314374 ## 22 C1 D3 54.182821 ## 23 C3 D3 46.914191 ## 24 C2 D2 37.559419 ## 25 C2 D5 44.131021 ## 26 C1 D2 53.955978 ## 27 C3 D3 42.432182 ## 28 C1 D3 53.208533 ## 29 C1 D2 47.760053 ## .. ... ... ... ## 170 C1 D4 44.415971 ## 171 C1 D1 47.902060 ## 172 C3 D4 49.643566 ## 173 C2 D3 46.991130 ## 174 C2 D3 48.976666 ## 175 C2 D1 46.295232 ## 176 C3 D5 50.193524 ## 177 C1 D4 52.619193 ## 178 C3 D1 55.654651 ## 179 C1 D4 59.067621 ## 180 C1 D5 50.057293 ## 181 C1 D1 48.667089 ## 182 C1 D1 40.981748 ## 183 C2 D3 50.755011 ## 184 C2 D4 42.601846 ## 185 C1 D1 53.272315 ## 186 C1 D1 53.919104 ## 187 C3 D4 47.148467 ## 188 C2 D5 45.675681 ## 189 C3 D2 45.930946 ## 190 C2 D3 51.979550 ## 191 C1 D4 52.837015 ## 192 C1 D2 51.284961 ## 193 C3 D5 50.311469 ## 194 C1 D1 51.579678 ## 195 C3 D1 52.699026 ## 196 C2 D4 49.976969 ## 197 C1 D2 40.249270 ## 198 C3 D2 45.321477 ## 199 C3 D4 45.309909 ## ## [200 rows x 3 columns] Column Name Starts With … mydf2 &gt;&gt; select (&#39;comp&#39;, startswith=&#39;val&#39;) ## comp value1 value2 ## 0 C1 45.125451 20.950839 ## 1 C1 56.797387 21.073454 ## 2 C1 52.652265 22.331955 ## 3 C3 44.480486 22.720575 ## 4 C1 46.921364 22.781715 ## 5 C3 43.376765 19.260379 ## 6 C1 55.434494 20.557452 ## 7 C2 52.411195 19.265704 ## 8 C1 57.422643 16.545907 ## 9 C2 49.638485 19.475124 ## 10 C1 45.948903 17.522787 ## 11 C2 48.045564 17.656576 ## 12 C2 47.840765 19.932974 ## 13 C1 44.505284 15.924938 ## 14 C2 57.137493 19.643537 ## 15 C3 51.264104 29.052924 ## 16 C1 53.002353 18.698534 ## 17 C3 50.773057 17.361727 ## 18 C3 43.698503 21.640568 ## 19 C3 55.204016 19.906398 ## 20 C2 60.897597 19.168090 ## 21 C3 41.314374 15.742055 ## 22 C1 54.182821 23.680108 ## 23 C3 46.914191 22.433649 ## 24 C2 37.559419 24.559500 ## 25 C2 44.131021 17.807201 ## 26 C1 53.955978 26.995903 ## 27 C3 42.432182 18.255697 ## 28 C1 53.208533 20.161540 ## 29 C1 47.760053 21.595053 ## .. ... ... ... ## 170 C1 44.415971 19.450670 ## 171 C1 47.902060 17.764139 ## 172 C3 49.643566 17.521932 ## 173 C2 46.991130 21.583297 ## 174 C2 48.976666 21.743309 ## 175 C2 46.295232 20.638051 ## 176 C3 50.193524 17.763019 ## 177 C1 52.619193 17.575398 ## 178 C3 55.654651 21.566492 ## 179 C1 59.067621 25.904054 ## 180 C1 50.057293 17.101208 ## 181 C1 48.667089 26.640439 ## 182 C1 40.981748 20.460720 ## 183 C2 50.755011 24.945547 ## 184 C2 42.601846 17.179685 ## 185 C1 53.272315 14.455873 ## 186 C1 53.919104 15.432809 ## 187 C3 47.148467 18.133080 ## 188 C2 45.675681 21.325192 ## 189 C3 45.930946 19.227000 ## 190 C2 51.979550 18.584123 ## 191 C1 52.837015 19.741110 ## 192 C1 51.284961 17.022034 ## 193 C3 50.311469 22.823787 ## 194 C1 51.579678 20.162894 ## 195 C3 52.699026 18.655169 ## 196 C2 49.976969 23.148864 ## 197 C1 40.249270 19.681849 ## 198 C3 45.321477 16.858574 ## 199 C3 45.309909 22.279842 ## ## [200 rows x 3 columns] Column Name Ends With … mydf2 &gt;&gt; select (&#39;comp&#39;,endswith=(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)) ## comp value1 value2 newcol1 newcol2 ## 0 C1 45.125451 20.950839 45.125451 20.950839 ## 1 C1 56.797387 21.073454 56.797387 21.073454 ## 2 C1 52.652265 22.331955 52.652265 22.331955 ## 3 C3 44.480486 22.720575 44.480486 22.720575 ## 4 C1 46.921364 22.781715 46.921364 22.781715 ## 5 C3 43.376765 19.260379 43.376765 19.260379 ## 6 C1 55.434494 20.557452 55.434494 20.557452 ## 7 C2 52.411195 19.265704 52.411195 19.265704 ## 8 C1 57.422643 16.545907 57.422643 16.545907 ## 9 C2 49.638485 19.475124 49.638485 19.475124 ## 10 C1 45.948903 17.522787 45.948903 17.522787 ## 11 C2 48.045564 17.656576 48.045564 17.656576 ## 12 C2 47.840765 19.932974 47.840765 19.932974 ## 13 C1 44.505284 15.924938 44.505284 15.924938 ## 14 C2 57.137493 19.643537 57.137493 19.643537 ## 15 C3 51.264104 29.052924 51.264104 29.052924 ## 16 C1 53.002353 18.698534 53.002353 18.698534 ## 17 C3 50.773057 17.361727 50.773057 17.361727 ## 18 C3 43.698503 21.640568 43.698503 21.640568 ## 19 C3 55.204016 19.906398 55.204016 19.906398 ## 20 C2 60.897597 19.168090 60.897597 19.168090 ## 21 C3 41.314374 15.742055 41.314374 15.742055 ## 22 C1 54.182821 23.680108 54.182821 23.680108 ## 23 C3 46.914191 22.433649 46.914191 22.433649 ## 24 C2 37.559419 24.559500 37.559419 24.559500 ## 25 C2 44.131021 17.807201 44.131021 17.807201 ## 26 C1 53.955978 26.995903 53.955978 26.995903 ## 27 C3 42.432182 18.255697 42.432182 18.255697 ## 28 C1 53.208533 20.161540 53.208533 20.161540 ## 29 C1 47.760053 21.595053 47.760053 21.595053 ## .. ... ... ... ... ... ## 170 C1 44.415971 19.450670 44.415971 19.450670 ## 171 C1 47.902060 17.764139 47.902060 17.764139 ## 172 C3 49.643566 17.521932 49.643566 17.521932 ## 173 C2 46.991130 21.583297 46.991130 21.583297 ## 174 C2 48.976666 21.743309 48.976666 21.743309 ## 175 C2 46.295232 20.638051 46.295232 20.638051 ## 176 C3 50.193524 17.763019 50.193524 17.763019 ## 177 C1 52.619193 17.575398 52.619193 17.575398 ## 178 C3 55.654651 21.566492 55.654651 21.566492 ## 179 C1 59.067621 25.904054 59.067621 25.904054 ## 180 C1 50.057293 17.101208 50.057293 17.101208 ## 181 C1 48.667089 26.640439 48.667089 26.640439 ## 182 C1 40.981748 20.460720 40.981748 20.460720 ## 183 C2 50.755011 24.945547 50.755011 24.945547 ## 184 C2 42.601846 17.179685 42.601846 17.179685 ## 185 C1 53.272315 14.455873 53.272315 14.455873 ## 186 C1 53.919104 15.432809 53.919104 15.432809 ## 187 C3 47.148467 18.133080 47.148467 18.133080 ## 188 C2 45.675681 21.325192 45.675681 21.325192 ## 189 C3 45.930946 19.227000 45.930946 19.227000 ## 190 C2 51.979550 18.584123 51.979550 18.584123 ## 191 C1 52.837015 19.741110 52.837015 19.741110 ## 192 C1 51.284961 17.022034 51.284961 17.022034 ## 193 C3 50.311469 22.823787 50.311469 22.823787 ## 194 C1 51.579678 20.162894 51.579678 20.162894 ## 195 C3 52.699026 18.655169 52.699026 18.655169 ## 196 C2 49.976969 23.148864 49.976969 23.148864 ## 197 C1 40.249270 19.681849 40.249270 19.681849 ## 198 C3 45.321477 16.858574 45.321477 16.858574 ## 199 C3 45.309909 22.279842 45.309909 22.279842 ## ## [200 rows x 5 columns] Column Name Contains … mydf2 &gt;&gt; select(&#39;comp&#39;, contains=(&#39;col&#39;,&#39;val&#39;)) ## comp value1 value2 newcol1 newcol2 ## 0 C1 45.125451 20.950839 45.125451 20.950839 ## 1 C1 56.797387 21.073454 56.797387 21.073454 ## 2 C1 52.652265 22.331955 52.652265 22.331955 ## 3 C3 44.480486 22.720575 44.480486 22.720575 ## 4 C1 46.921364 22.781715 46.921364 22.781715 ## 5 C3 43.376765 19.260379 43.376765 19.260379 ## 6 C1 55.434494 20.557452 55.434494 20.557452 ## 7 C2 52.411195 19.265704 52.411195 19.265704 ## 8 C1 57.422643 16.545907 57.422643 16.545907 ## 9 C2 49.638485 19.475124 49.638485 19.475124 ## 10 C1 45.948903 17.522787 45.948903 17.522787 ## 11 C2 48.045564 17.656576 48.045564 17.656576 ## 12 C2 47.840765 19.932974 47.840765 19.932974 ## 13 C1 44.505284 15.924938 44.505284 15.924938 ## 14 C2 57.137493 19.643537 57.137493 19.643537 ## 15 C3 51.264104 29.052924 51.264104 29.052924 ## 16 C1 53.002353 18.698534 53.002353 18.698534 ## 17 C3 50.773057 17.361727 50.773057 17.361727 ## 18 C3 43.698503 21.640568 43.698503 21.640568 ## 19 C3 55.204016 19.906398 55.204016 19.906398 ## 20 C2 60.897597 19.168090 60.897597 19.168090 ## 21 C3 41.314374 15.742055 41.314374 15.742055 ## 22 C1 54.182821 23.680108 54.182821 23.680108 ## 23 C3 46.914191 22.433649 46.914191 22.433649 ## 24 C2 37.559419 24.559500 37.559419 24.559500 ## 25 C2 44.131021 17.807201 44.131021 17.807201 ## 26 C1 53.955978 26.995903 53.955978 26.995903 ## 27 C3 42.432182 18.255697 42.432182 18.255697 ## 28 C1 53.208533 20.161540 53.208533 20.161540 ## 29 C1 47.760053 21.595053 47.760053 21.595053 ## .. ... ... ... ... ... ## 170 C1 44.415971 19.450670 44.415971 19.450670 ## 171 C1 47.902060 17.764139 47.902060 17.764139 ## 172 C3 49.643566 17.521932 49.643566 17.521932 ## 173 C2 46.991130 21.583297 46.991130 21.583297 ## 174 C2 48.976666 21.743309 48.976666 21.743309 ## 175 C2 46.295232 20.638051 46.295232 20.638051 ## 176 C3 50.193524 17.763019 50.193524 17.763019 ## 177 C1 52.619193 17.575398 52.619193 17.575398 ## 178 C3 55.654651 21.566492 55.654651 21.566492 ## 179 C1 59.067621 25.904054 59.067621 25.904054 ## 180 C1 50.057293 17.101208 50.057293 17.101208 ## 181 C1 48.667089 26.640439 48.667089 26.640439 ## 182 C1 40.981748 20.460720 40.981748 20.460720 ## 183 C2 50.755011 24.945547 50.755011 24.945547 ## 184 C2 42.601846 17.179685 42.601846 17.179685 ## 185 C1 53.272315 14.455873 53.272315 14.455873 ## 186 C1 53.919104 15.432809 53.919104 15.432809 ## 187 C3 47.148467 18.133080 47.148467 18.133080 ## 188 C2 45.675681 21.325192 45.675681 21.325192 ## 189 C3 45.930946 19.227000 45.930946 19.227000 ## 190 C2 51.979550 18.584123 51.979550 18.584123 ## 191 C1 52.837015 19.741110 52.837015 19.741110 ## 192 C1 51.284961 17.022034 51.284961 17.022034 ## 193 C3 50.311469 22.823787 50.311469 22.823787 ## 194 C1 51.579678 20.162894 51.579678 20.162894 ## 195 C3 52.699026 18.655169 52.699026 18.655169 ## 196 C2 49.976969 23.148864 49.976969 23.148864 ## 197 C1 40.249270 19.681849 40.249270 19.681849 ## 198 C3 45.321477 16.858574 45.321477 16.858574 ## 199 C3 45.309909 22.279842 45.309909 22.279842 ## ## [200 rows x 5 columns] 11.2.3.2 Specify Column Range mydf2 &gt;&gt; select (&#39;comp&#39;, slice(&#39;value1&#39;,&#39;newcol2&#39;)) ## comp value1 value2 newcol1 newcol2 ## 0 C1 45.125451 20.950839 45.125451 20.950839 ## 1 C1 56.797387 21.073454 56.797387 21.073454 ## 2 C1 52.652265 22.331955 52.652265 22.331955 ## 3 C3 44.480486 22.720575 44.480486 22.720575 ## 4 C1 46.921364 22.781715 46.921364 22.781715 ## 5 C3 43.376765 19.260379 43.376765 19.260379 ## 6 C1 55.434494 20.557452 55.434494 20.557452 ## 7 C2 52.411195 19.265704 52.411195 19.265704 ## 8 C1 57.422643 16.545907 57.422643 16.545907 ## 9 C2 49.638485 19.475124 49.638485 19.475124 ## 10 C1 45.948903 17.522787 45.948903 17.522787 ## 11 C2 48.045564 17.656576 48.045564 17.656576 ## 12 C2 47.840765 19.932974 47.840765 19.932974 ## 13 C1 44.505284 15.924938 44.505284 15.924938 ## 14 C2 57.137493 19.643537 57.137493 19.643537 ## 15 C3 51.264104 29.052924 51.264104 29.052924 ## 16 C1 53.002353 18.698534 53.002353 18.698534 ## 17 C3 50.773057 17.361727 50.773057 17.361727 ## 18 C3 43.698503 21.640568 43.698503 21.640568 ## 19 C3 55.204016 19.906398 55.204016 19.906398 ## 20 C2 60.897597 19.168090 60.897597 19.168090 ## 21 C3 41.314374 15.742055 41.314374 15.742055 ## 22 C1 54.182821 23.680108 54.182821 23.680108 ## 23 C3 46.914191 22.433649 46.914191 22.433649 ## 24 C2 37.559419 24.559500 37.559419 24.559500 ## 25 C2 44.131021 17.807201 44.131021 17.807201 ## 26 C1 53.955978 26.995903 53.955978 26.995903 ## 27 C3 42.432182 18.255697 42.432182 18.255697 ## 28 C1 53.208533 20.161540 53.208533 20.161540 ## 29 C1 47.760053 21.595053 47.760053 21.595053 ## .. ... ... ... ... ... ## 170 C1 44.415971 19.450670 44.415971 19.450670 ## 171 C1 47.902060 17.764139 47.902060 17.764139 ## 172 C3 49.643566 17.521932 49.643566 17.521932 ## 173 C2 46.991130 21.583297 46.991130 21.583297 ## 174 C2 48.976666 21.743309 48.976666 21.743309 ## 175 C2 46.295232 20.638051 46.295232 20.638051 ## 176 C3 50.193524 17.763019 50.193524 17.763019 ## 177 C1 52.619193 17.575398 52.619193 17.575398 ## 178 C3 55.654651 21.566492 55.654651 21.566492 ## 179 C1 59.067621 25.904054 59.067621 25.904054 ## 180 C1 50.057293 17.101208 50.057293 17.101208 ## 181 C1 48.667089 26.640439 48.667089 26.640439 ## 182 C1 40.981748 20.460720 40.981748 20.460720 ## 183 C2 50.755011 24.945547 50.755011 24.945547 ## 184 C2 42.601846 17.179685 42.601846 17.179685 ## 185 C1 53.272315 14.455873 53.272315 14.455873 ## 186 C1 53.919104 15.432809 53.919104 15.432809 ## 187 C3 47.148467 18.133080 47.148467 18.133080 ## 188 C2 45.675681 21.325192 45.675681 21.325192 ## 189 C3 45.930946 19.227000 45.930946 19.227000 ## 190 C2 51.979550 18.584123 51.979550 18.584123 ## 191 C1 52.837015 19.741110 52.837015 19.741110 ## 192 C1 51.284961 17.022034 51.284961 17.022034 ## 193 C3 50.311469 22.823787 50.311469 22.823787 ## 194 C1 51.579678 20.162894 51.579678 20.162894 ## 195 C3 52.699026 18.655169 52.699026 18.655169 ## 196 C2 49.976969 23.148864 49.976969 23.148864 ## 197 C1 40.249270 19.681849 40.249270 19.681849 ## 198 C3 45.321477 16.858574 45.321477 16.858574 ## 199 C3 45.309909 22.279842 45.309909 22.279842 ## ## [200 rows x 5 columns] 11.2.4 Drop Column(s) mydf2 &gt;&gt; select(&#39;newcol1&#39;,&#39;newcol2&#39;,drop=True) ## comp dept grp value1 value2 ## 0 C1 D2 G1 45.125451 20.950839 ## 1 C1 D2 G2 56.797387 21.073454 ## 2 C1 D1 G1 52.652265 22.331955 ## 3 C3 D4 G2 44.480486 22.720575 ## 4 C1 D3 G2 46.921364 22.781715 ## 5 C3 D2 G1 43.376765 19.260379 ## 6 C1 D5 G2 55.434494 20.557452 ## 7 C2 D2 G2 52.411195 19.265704 ## 8 C1 D1 G1 57.422643 16.545907 ## 9 C2 D4 G2 49.638485 19.475124 ## 10 C1 D5 G1 45.948903 17.522787 ## 11 C2 D1 G1 48.045564 17.656576 ## 12 C2 D5 G1 47.840765 19.932974 ## 13 C1 D2 G2 44.505284 15.924938 ## 14 C2 D5 G2 57.137493 19.643537 ## 15 C3 D5 G1 51.264104 29.052924 ## 16 C1 D5 G1 53.002353 18.698534 ## 17 C3 D1 G2 50.773057 17.361727 ## 18 C3 D3 G1 43.698503 21.640568 ## 19 C3 D3 G2 55.204016 19.906398 ## 20 C2 D5 G2 60.897597 19.168090 ## 21 C3 D4 G2 41.314374 15.742055 ## 22 C1 D3 G2 54.182821 23.680108 ## 23 C3 D3 G1 46.914191 22.433649 ## 24 C2 D2 G2 37.559419 24.559500 ## 25 C2 D5 G2 44.131021 17.807201 ## 26 C1 D2 G2 53.955978 26.995903 ## 27 C3 D3 G1 42.432182 18.255697 ## 28 C1 D3 G2 53.208533 20.161540 ## 29 C1 D2 G2 47.760053 21.595053 ## .. ... ... .. ... ... ## 170 C1 D4 G1 44.415971 19.450670 ## 171 C1 D1 G2 47.902060 17.764139 ## 172 C3 D4 G2 49.643566 17.521932 ## 173 C2 D3 G2 46.991130 21.583297 ## 174 C2 D3 G2 48.976666 21.743309 ## 175 C2 D1 G2 46.295232 20.638051 ## 176 C3 D5 G1 50.193524 17.763019 ## 177 C1 D4 G2 52.619193 17.575398 ## 178 C3 D1 G2 55.654651 21.566492 ## 179 C1 D4 G1 59.067621 25.904054 ## 180 C1 D5 G1 50.057293 17.101208 ## 181 C1 D1 G1 48.667089 26.640439 ## 182 C1 D1 G2 40.981748 20.460720 ## 183 C2 D3 G1 50.755011 24.945547 ## 184 C2 D4 G2 42.601846 17.179685 ## 185 C1 D1 G2 53.272315 14.455873 ## 186 C1 D1 G2 53.919104 15.432809 ## 187 C3 D4 G2 47.148467 18.133080 ## 188 C2 D5 G1 45.675681 21.325192 ## 189 C3 D2 G2 45.930946 19.227000 ## 190 C2 D3 G1 51.979550 18.584123 ## 191 C1 D4 G2 52.837015 19.741110 ## 192 C1 D2 G2 51.284961 17.022034 ## 193 C3 D5 G2 50.311469 22.823787 ## 194 C1 D1 G1 51.579678 20.162894 ## 195 C3 D1 G1 52.699026 18.655169 ## 196 C2 D4 G2 49.976969 23.148864 ## 197 C1 D2 G1 40.249270 19.681849 ## 198 C3 D2 G1 45.321477 16.858574 ## 199 C3 D4 G1 45.309909 22.279842 ## ## [200 rows x 5 columns] mydf &gt;&gt; rename( {&#39;val.1&#39; : &#39;value1&#39;, &#39;val.2&#39; : &#39;value2&#39; }) ## comp dept grp val.1 val.2 ## 0 C1 D2 G1 45.125451 20.950839 ## 1 C1 D2 G2 56.797387 21.073454 ## 2 C1 D1 G1 52.652265 22.331955 ## 3 C3 D4 G2 44.480486 22.720575 ## 4 C1 D3 G2 46.921364 22.781715 ## 5 C3 D2 G1 43.376765 19.260379 ## 6 C1 D5 G2 55.434494 20.557452 ## 7 C2 D2 G2 52.411195 19.265704 ## 8 C1 D1 G1 57.422643 16.545907 ## 9 C2 D4 G2 49.638485 19.475124 ## 10 C1 D5 G1 45.948903 17.522787 ## 11 C2 D1 G1 48.045564 17.656576 ## 12 C2 D5 G1 47.840765 19.932974 ## 13 C1 D2 G2 44.505284 15.924938 ## 14 C2 D5 G2 57.137493 19.643537 ## 15 C3 D5 G1 51.264104 29.052924 ## 16 C1 D5 G1 53.002353 18.698534 ## 17 C3 D1 G2 50.773057 17.361727 ## 18 C3 D3 G1 43.698503 21.640568 ## 19 C3 D3 G2 55.204016 19.906398 ## 20 C2 D5 G2 60.897597 19.168090 ## 21 C3 D4 G2 41.314374 15.742055 ## 22 C1 D3 G2 54.182821 23.680108 ## 23 C3 D3 G1 46.914191 22.433649 ## 24 C2 D2 G2 37.559419 24.559500 ## 25 C2 D5 G2 44.131021 17.807201 ## 26 C1 D2 G2 53.955978 26.995903 ## 27 C3 D3 G1 42.432182 18.255697 ## 28 C1 D3 G2 53.208533 20.161540 ## 29 C1 D2 G2 47.760053 21.595053 ## .. ... ... .. ... ... ## 170 C1 D4 G1 44.415971 19.450670 ## 171 C1 D1 G2 47.902060 17.764139 ## 172 C3 D4 G2 49.643566 17.521932 ## 173 C2 D3 G2 46.991130 21.583297 ## 174 C2 D3 G2 48.976666 21.743309 ## 175 C2 D1 G2 46.295232 20.638051 ## 176 C3 D5 G1 50.193524 17.763019 ## 177 C1 D4 G2 52.619193 17.575398 ## 178 C3 D1 G2 55.654651 21.566492 ## 179 C1 D4 G1 59.067621 25.904054 ## 180 C1 D5 G1 50.057293 17.101208 ## 181 C1 D1 G1 48.667089 26.640439 ## 182 C1 D1 G2 40.981748 20.460720 ## 183 C2 D3 G1 50.755011 24.945547 ## 184 C2 D4 G2 42.601846 17.179685 ## 185 C1 D1 G2 53.272315 14.455873 ## 186 C1 D1 G2 53.919104 15.432809 ## 187 C3 D4 G2 47.148467 18.133080 ## 188 C2 D5 G1 45.675681 21.325192 ## 189 C3 D2 G2 45.930946 19.227000 ## 190 C2 D3 G1 51.979550 18.584123 ## 191 C1 D4 G2 52.837015 19.741110 ## 192 C1 D2 G2 51.284961 17.022034 ## 193 C3 D5 G2 50.311469 22.823787 ## 194 C1 D1 G1 51.579678 20.162894 ## 195 C3 D1 G1 52.699026 18.655169 ## 196 C2 D4 G2 49.976969 23.148864 ## 197 C1 D2 G1 40.249270 19.681849 ## 198 C3 D2 G1 45.321477 16.858574 ## 199 C3 D4 G1 45.309909 22.279842 ## ## [200 rows x 5 columns] Combined Method Combine both assignment and dictionary method mydf &gt;&gt; rename( {&#39;val.1&#39; : &#39;value1&#39;, &#39;val.2&#39; : &#39;value2&#39; }, group = &#39;grp&#39; ) ## comp dept group val.1 val.2 ## 0 C1 D2 G1 45.125451 20.950839 ## 1 C1 D2 G2 56.797387 21.073454 ## 2 C1 D1 G1 52.652265 22.331955 ## 3 C3 D4 G2 44.480486 22.720575 ## 4 C1 D3 G2 46.921364 22.781715 ## 5 C3 D2 G1 43.376765 19.260379 ## 6 C1 D5 G2 55.434494 20.557452 ## 7 C2 D2 G2 52.411195 19.265704 ## 8 C1 D1 G1 57.422643 16.545907 ## 9 C2 D4 G2 49.638485 19.475124 ## 10 C1 D5 G1 45.948903 17.522787 ## 11 C2 D1 G1 48.045564 17.656576 ## 12 C2 D5 G1 47.840765 19.932974 ## 13 C1 D2 G2 44.505284 15.924938 ## 14 C2 D5 G2 57.137493 19.643537 ## 15 C3 D5 G1 51.264104 29.052924 ## 16 C1 D5 G1 53.002353 18.698534 ## 17 C3 D1 G2 50.773057 17.361727 ## 18 C3 D3 G1 43.698503 21.640568 ## 19 C3 D3 G2 55.204016 19.906398 ## 20 C2 D5 G2 60.897597 19.168090 ## 21 C3 D4 G2 41.314374 15.742055 ## 22 C1 D3 G2 54.182821 23.680108 ## 23 C3 D3 G1 46.914191 22.433649 ## 24 C2 D2 G2 37.559419 24.559500 ## 25 C2 D5 G2 44.131021 17.807201 ## 26 C1 D2 G2 53.955978 26.995903 ## 27 C3 D3 G1 42.432182 18.255697 ## 28 C1 D3 G2 53.208533 20.161540 ## 29 C1 D2 G2 47.760053 21.595053 ## .. ... ... ... ... ... ## 170 C1 D4 G1 44.415971 19.450670 ## 171 C1 D1 G2 47.902060 17.764139 ## 172 C3 D4 G2 49.643566 17.521932 ## 173 C2 D3 G2 46.991130 21.583297 ## 174 C2 D3 G2 48.976666 21.743309 ## 175 C2 D1 G2 46.295232 20.638051 ## 176 C3 D5 G1 50.193524 17.763019 ## 177 C1 D4 G2 52.619193 17.575398 ## 178 C3 D1 G2 55.654651 21.566492 ## 179 C1 D4 G1 59.067621 25.904054 ## 180 C1 D5 G1 50.057293 17.101208 ## 181 C1 D1 G1 48.667089 26.640439 ## 182 C1 D1 G2 40.981748 20.460720 ## 183 C2 D3 G1 50.755011 24.945547 ## 184 C2 D4 G2 42.601846 17.179685 ## 185 C1 D1 G2 53.272315 14.455873 ## 186 C1 D1 G2 53.919104 15.432809 ## 187 C3 D4 G2 47.148467 18.133080 ## 188 C2 D5 G1 45.675681 21.325192 ## 189 C3 D2 G2 45.930946 19.227000 ## 190 C2 D3 G1 51.979550 18.584123 ## 191 C1 D4 G2 52.837015 19.741110 ## 192 C1 D2 G2 51.284961 17.022034 ## 193 C3 D5 G2 50.311469 22.823787 ## 194 C1 D1 G1 51.579678 20.162894 ## 195 C3 D1 G1 52.699026 18.655169 ## 196 C2 D4 G2 49.976969 23.148864 ## 197 C1 D2 G1 40.249270 19.681849 ## 198 C3 D2 G1 45.321477 16.858574 ## 199 C3 D4 G1 45.309909 22.279842 ## ## [200 rows x 5 columns] 11.3 Sorting (arrange) Use ‘-colName’ for decending mydf &gt;&gt; arrange(&#39;comp&#39;, &#39;-value1&#39;) ## comp dept grp value1 value2 ## 70 C1 D4 G2 64.654062 19.858851 ## 160 C1 D4 G2 62.032435 26.607244 ## 134 C1 D4 G1 61.510191 19.422557 ## 179 C1 D4 G1 59.067621 25.904054 ## 135 C1 D1 G2 58.002356 23.017094 ## 8 C1 D1 G1 57.422643 16.545907 ## 1 C1 D2 G2 56.797387 21.073454 ## 57 C1 D1 G2 56.099682 17.493797 ## 6 C1 D5 G2 55.434494 20.557452 ## 40 C1 D2 G1 55.295098 19.237007 ## 136 C1 D1 G2 54.716013 22.305666 ## 119 C1 D5 G2 54.361466 22.123829 ## 124 C1 D2 G1 54.328433 16.533086 ## 22 C1 D3 G2 54.182821 23.680108 ## 110 C1 D3 G1 54.136869 20.175628 ## 26 C1 D2 G2 53.955978 26.995903 ## 186 C1 D1 G2 53.919104 15.432809 ## 169 C1 D3 G2 53.838628 15.021266 ## 60 C1 D5 G2 53.832404 21.584016 ## 115 C1 D3 G1 53.645071 19.460732 ## 71 C1 D4 G2 53.445452 19.778023 ## 185 C1 D1 G2 53.272315 14.455873 ## 28 C1 D3 G2 53.208533 20.161540 ## 138 C1 D5 G1 53.147349 21.729195 ## 16 C1 D5 G1 53.002353 18.698534 ## 191 C1 D4 G2 52.837015 19.741110 ## 53 C1 D3 G2 52.805875 17.167217 ## 2 C1 D1 G1 52.652265 22.331955 ## 177 C1 D4 G2 52.619193 17.575398 ## 106 C1 D4 G1 52.156922 21.762213 ## .. ... ... .. ... ... ## 172 C3 D4 G2 49.643566 17.521932 ## 162 C3 D1 G1 49.630014 20.776098 ## 56 C3 D3 G2 49.563949 19.852964 ## 118 C3 D3 G2 49.277243 21.512733 ## 47 C3 D4 G1 48.716673 17.105868 ## 151 C3 D3 G2 48.591171 16.332014 ## 52 C3 D1 G2 48.270334 20.165189 ## 86 C3 D3 G1 47.599667 18.120686 ## 90 C3 D4 G2 47.550299 16.235720 ## 187 C3 D4 G2 47.148467 18.133080 ## 23 C3 D3 G1 46.914191 22.433649 ## 42 C3 D5 G2 46.683185 17.623308 ## 64 C3 D3 G2 46.148768 17.551268 ## 189 C3 D2 G2 45.930946 19.227000 ## 77 C3 D3 G2 45.535893 19.018907 ## 198 C3 D2 G1 45.321477 16.858574 ## 199 C3 D4 G1 45.309909 22.279842 ## 62 C3 D1 G2 45.067734 17.883588 ## 79 C3 D5 G1 44.552754 14.699216 ## 3 C3 D4 G2 44.480486 22.720575 ## 18 C3 D3 G1 43.698503 21.640568 ## 85 C3 D5 G2 43.645978 23.378485 ## 5 C3 D2 G1 43.376765 19.260379 ## 91 C3 D5 G2 42.757802 17.618916 ## 61 C3 D5 G1 42.496629 19.774784 ## 27 C3 D3 G1 42.432182 18.255697 ## 80 C3 D5 G1 41.725629 18.743503 ## 65 C3 D5 G2 41.380538 15.675236 ## 21 C3 D4 G2 41.314374 15.742055 ## 133 C3 D1 G1 38.086545 19.563244 ## ## [200 rows x 5 columns] 11.4 Grouping mydf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 200 entries, 0 to 199 ## Data columns (total 5 columns): ## comp 200 non-null object ## dept 200 non-null object ## grp 200 non-null object ## value1 200 non-null float64 ## value2 200 non-null float64 ## dtypes: float64(2), object(3) ## memory usage: 7.9+ KB gdf = mydf &gt;&gt; group_by(&#39;comp&#39;,&#39;dept&#39;) type(gdf) ## &lt;class &#39;plydata.types.GroupedDataFrame&#39;&gt; 11.5 Summarization 11.5.1 Simple Method Passing Multiple Expressions gdf &gt;&gt; summarize(&#39;n()&#39;,&#39;sum(value1)&#39;,&#39;mean(value2)&#39;) ## comp dept n() sum(value1) mean(value2) ## 0 C1 D2 12 591.541746 20.200172 ## 1 C1 D1 15 768.433010 19.447601 ## 2 C3 D4 13 653.387657 18.838214 ## 3 C1 D3 12 617.401007 20.010263 ## 4 C3 D2 5 241.087992 18.334137 ## 5 C1 D5 13 645.590310 19.114258 ## 6 C2 D2 19 913.111041 20.050266 ## 7 C2 D4 13 637.528317 20.504001 ## 8 C2 D1 13 632.089596 20.199790 ## 9 C2 D5 12 597.721672 19.441667 ## 10 C3 D5 17 828.129191 20.180774 ## 11 C3 D1 12 604.725911 20.645722 ## 12 C3 D3 13 635.792122 19.830974 ## 13 C2 D3 15 732.952518 20.083544 ## 14 C1 D4 16 834.835816 20.703668 11.5.2 Specify Summarized Column Name Assignment Method - Passing colName=‘expression’** - Column name cannot contain special character gdf &gt;&gt; summarize(count=&#39;n()&#39;,v1sum=&#39;sum(value1)&#39;,v2_mean=&#39;mean(value2)&#39;) ## comp dept count v1sum v2_mean ## 0 C1 D2 12 591.541746 20.200172 ## 1 C1 D1 15 768.433010 19.447601 ## 2 C3 D4 13 653.387657 18.838214 ## 3 C1 D3 12 617.401007 20.010263 ## 4 C3 D2 5 241.087992 18.334137 ## 5 C1 D5 13 645.590310 19.114258 ## 6 C2 D2 19 913.111041 20.050266 ## 7 C2 D4 13 637.528317 20.504001 ## 8 C2 D1 13 632.089596 20.199790 ## 9 C2 D5 12 597.721672 19.441667 ## 10 C3 D5 17 828.129191 20.180774 ## 11 C3 D1 12 604.725911 20.645722 ## 12 C3 D3 13 635.792122 19.830974 ## 13 C2 D3 15 732.952518 20.083544 ## 14 C1 D4 16 834.835816 20.703668 Tuple Method (‘colName’,‘expression’) Use when the column name contain special character gdf &gt;&gt; summarize((&#39;count&#39;,&#39;n()&#39;),(&#39;v1.sum&#39;,&#39;sum(value1)&#39;),(&#39;s2.sum&#39;,&#39;sum(value2)&#39;),v2mean=np.mean(value2)) ## comp dept count v1.sum s2.sum v2mean ## 0 C1 D2 12 591.541746 242.402059 19.919164 ## 1 C1 D1 15 768.433010 291.714011 19.919164 ## 2 C3 D4 13 653.387657 244.896788 19.919164 ## 3 C1 D3 12 617.401007 240.123159 19.919164 ## 4 C3 D2 5 241.087992 91.670687 19.919164 ## 5 C1 D5 13 645.590310 248.485358 19.919164 ## 6 C2 D2 19 913.111041 380.955056 19.919164 ## 7 C2 D4 13 637.528317 266.552010 19.919164 ## 8 C2 D1 13 632.089596 262.597265 19.919164 ## 9 C2 D5 12 597.721672 233.300001 19.919164 ## 10 C3 D5 17 828.129191 343.073164 19.919164 ## 11 C3 D1 12 604.725911 247.748661 19.919164 ## 12 C3 D3 13 635.792122 257.802665 19.919164 ## 13 C2 D3 15 732.952518 301.253155 19.919164 ## 14 C1 D4 16 834.835816 331.258688 19.919164 11.5.3 Number of Rows in Group n() : total rows in group n_unique() : total of rows with unique value gdf &gt;&gt; summarize(count=&#39;n()&#39;, va11_unique=&#39;n_unique(value1)&#39;) ## comp dept count va11_unique ## 0 C1 D2 12 12 ## 1 C1 D1 15 15 ## 2 C3 D4 13 13 ## 3 C1 D3 12 12 ## 4 C3 D2 5 5 ## 5 C1 D5 13 13 ## 6 C2 D2 19 19 ## 7 C2 D4 13 13 ## 8 C2 D1 13 13 ## 9 C2 D5 12 12 ## 10 C3 D5 17 17 ## 11 C3 D1 12 12 ## 12 C3 D3 13 13 ## 13 C2 D3 15 15 ## 14 C1 D4 16 16 "],
["numpy-1.html", "12 numpy 12.1 Environment Setup 12.2 Module Import 12.3 Data Types 12.4 Numpy Array 12.5 Random Numbers 12.6 Sampling (Integer) 12.7 NaN : Missing Numerical Data", " 12 numpy Best array data manipulation, fast numpy array allows only single data type, unlike list Support matrix operation 12.1 Environment Setup from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:75% !important; margin-left:350px; }&lt;/style&gt;&quot;)) #%matplotlib inline ## &lt;IPython.core.display.HTML object&gt; import pandas as pd import matplotlib.pyplot as plt import math pd.set_option( &#39;display.notebook_repr_html&#39;, False) # render Series and DataFrame as text, not HTML pd.set_option( &#39;display.max_column&#39;, 10) # number of columns pd.set_option( &#39;display.max_rows&#39;, 10) # number of rows pd.set_option( &#39;display.width&#39;, 90) # number of characters per row 12.2 Module Import import numpy as np np.__version__ ## other modules ## &#39;1.17.1&#39; from datetime import datetime from datetime import date from datetime import time 12.3 Data Types 12.3.1 NumPy Data Types NumPy supports a much greater variety of numerical types than Python does. This makes numpy much more powerful https://www.numpy.org/devdocs/user/basics.types.html Integer: np.int8, np.int16, np.int32, np.uint8, np.uint16, np.uint32 Float: np.float32, np.float64 12.3.2 int32/64 np.int is actually python standard int x = np.int(13) y = int(13) print( type(x) ) ## &lt;class &#39;int&#39;&gt; print( type(y) ) ## &lt;class &#39;int&#39;&gt; np.int32/64 are NumPy specific x = np.int32(13) y = np.int64(13) print( type(x) ) ## &lt;class &#39;numpy.int32&#39;&gt; print( type(y) ) ## &lt;class &#39;numpy.int64&#39;&gt; 12.3.3 float32/64 x = np.float(13) y = float(13) print( type(x) ) ## &lt;class &#39;float&#39;&gt; print( type(y) ) ## &lt;class &#39;float&#39;&gt; x = np.float32(13) y = np.float64(13) print( type(x) ) ## &lt;class &#39;numpy.float32&#39;&gt; print( type(y) ) ## &lt;class &#39;numpy.float64&#39;&gt; 12.3.4 bool np.bool is actually python standard bool x = np.bool(True) print( type(x) ) ## &lt;class &#39;bool&#39;&gt; print( type(True) ) ## &lt;class &#39;bool&#39;&gt; 12.3.5 str np.str is actually python standard str x = np.str(&quot;ali&quot;) print( type(x) ) ## &lt;class &#39;str&#39;&gt; x = np.str_(&quot;ali&quot;) print( type(x) ) ## &lt;class &#39;numpy.str_&#39;&gt; 12.3.6 datetime64 Unlike python standard datetime library, there is no seperation of date, datetime and time. There is no time equivalent object NumPy only has one object: datetime64 object . 12.3.6.1 Constructor From String Note that the input string cannot be ISO8601 compliance, meaning any timezone related information at the end of the string (such as Z or +8) will result in error. np.datetime64(&#39;2005-02&#39;) ## numpy.datetime64(&#39;2005-02&#39;) np.datetime64(&#39;2005-02-25&#39;) ## numpy.datetime64(&#39;2005-02-25&#39;) np.datetime64(&#39;2005-02-25T03:30&#39;) ## numpy.datetime64(&#39;2005-02-25T03:30&#39;) From datetime np.datetime64( date.today() ) ## numpy.datetime64(&#39;2019-12-28&#39;) np.datetime64( datetime.now() ) ## numpy.datetime64(&#39;2019-12-28T07:53:23.454000&#39;) 12.3.6.2 Instance Method Convert to datetime using astype() dt64 = np.datetime64(&quot;2019-01-31&quot; ) dt64.astype(datetime) ## datetime.date(2019, 1, 31) 12.4 Numpy Array 12.4.1 Concept Structure - NumPy provides an N-dimensional array type, the ndarray - ndarray is homogenous: every item takes up the same size block of memory, and all blocks - For each ndarray, there is a seperate dtype object, which describe ndarray data type - An item extracted from an array, e.g., by indexing, is represented by a Python object whose type is one of the array scalar types built in NumPy. The array scalars allow easy manipulation of also more complicated arrangements of data. 12.4.2 Constructor By default, numpy.array autodetect its data types based on most common denominator 12.4.2.1 dType: int, float Notice example below auto detected as int32 data type x = np.array( (1,2,3,4,5) ) print(x) ## [1 2 3 4 5] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: int32 Notice example below auto detected as float64 data type x = np.array( (1,2,3,4.5,5) ) print(x) ## [1. 2. 3. 4.5 5. ] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: float64 You can specify dtype to specify desired data types. NumPy will auto convert the data into specifeid types. Observe below that we convert float into integer x = np.array( (1,2,3,4.5,5), dtype=&#39;int&#39; ) print(x) ## [1 2 3 4 5] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: int32 12.4.2.2 dType: datetime64 Specify dtype is necessary to ensure output is datetime type. If not, output is generic object type. From str x = np.array([&#39;2007-07-13&#39;, &#39;2006-01-13&#39;, &#39;2010-08-13&#39;], dtype=&#39;datetime64&#39;) print(x) ## [&#39;2007-07-13&#39; &#39;2006-01-13&#39; &#39;2010-08-13&#39;] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: datetime64[D] From datetime x = np.array([datetime(2019,1,12), datetime(2019,1,14),datetime(2019,3,3)], dtype=&#39;datetime64&#39;) print(x) ## [&#39;2019-01-12T00:00:00.000000&#39; &#39;2019-01-14T00:00:00.000000&#39; ## &#39;2019-03-03T00:00:00.000000&#39;] print(&#39;Type: &#39;, type(x)) ## Type: &lt;class &#39;numpy.ndarray&#39;&gt; print(&#39;dType:&#39;, x.dtype) ## dType: datetime64[us] print(&#39;\\nElement Type:&#39;,type(x[1])) ## ## Element Type: &lt;class &#39;numpy.datetime64&#39;&gt; 12.4.2.3 2D Array x = np.array([range(10),np.arange(10)]) x ## array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], ## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) 12.4.3 Dimensions 12.4.3.1 Differentiating Dimensions 1-D array is array of single list 2-D array is array made of list containing lists (each row is a list) 2-D single row array is array with list containing just one list 12.4.3.2 1-D Array Observe that the shape of the array is (5,). It seems like an array with 5 rows, empty columns ! What it really means is 5 items single dimension. arr = np.array(range(5)) print (arr) ## [0 1 2 3 4] print (arr.shape) ## (5,) print (arr.ndim) ## 1 12.4.3.3 2-D Array arr = np.array([range(5),range(5,10),range(10,15)]) print (arr) ## [[ 0 1 2 3 4] ## [ 5 6 7 8 9] ## [10 11 12 13 14]] print (arr.shape) ## (3, 5) print (arr.ndim) ## 2 12.4.3.4 2-D Array - Single Row arr = np.array([range(5)]) print (arr) ## [[0 1 2 3 4]] print (arr.shape) ## (1, 5) print (arr.ndim) ## 2 12.4.3.5 2-D Array : Single Column Using array slicing method with newaxis at COLUMN, will turn 1D array into 2D of single column arr = np.arange(5)[:, np.newaxis] print (arr) ## [[0] ## [1] ## [2] ## [3] ## [4]] print (arr.shape) ## (5, 1) print (arr.ndim) ## 2 Using array slicing method with newaxis at ROW, will turn 1D array into 2D of single row arr = np.arange(5)[np.newaxis,:] print (arr) ## [[0 1 2 3 4]] print (arr.shape) ## (1, 5) print (arr.ndim) ## 2 12.4.4 Class Method 12.4.4.1 arange() Generate array with a sequence of numbers np.arange(10) ## array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 12.4.4.2 ones() np.ones(10) # One dimension, default is float ## array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]) np.ones((2,5),&#39;int&#39;) #Two dimensions ## array([[1, 1, 1, 1, 1], ## [1, 1, 1, 1, 1]]) 12.4.4.3 zeros() np.zeros( 10 ) # One dimension, default is float ## array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) np.zeros((2,5),&#39;int&#39;) # 2 rows, 5 columns of ZERO ## array([[0, 0, 0, 0, 0], ## [0, 0, 0, 0, 0]]) 12.4.4.4 where() On 1D array numpy.where() returns the items matching the criteria ar1 = np.array(range(10)) print( ar1 ) ## [0 1 2 3 4 5 6 7 8 9] print( np.where(ar1&gt;5) ) ## (array([6, 7, 8, 9], dtype=int64),) On 2D array, where() return array of row index and col index for matching elements ar = np.array([(1,2,3,4,5),(11,12,13,14,15),(21,22,23,24,25)]) print (&#39;Data : \\n&#39;, ar) ## Data : ## [[ 1 2 3 4 5] ## [11 12 13 14 15] ## [21 22 23 24 25]] np.where(ar&gt;13) ## (array([1, 1, 2, 2, 2, 2, 2], dtype=int64), array([3, 4, 0, 1, 2, 3, 4], dtype=int64)) 12.4.4.5 Logical Methods numpy.logical_or Perform or operation on two boolean array, generate new resulting boolean arrays ar = np.arange(10) print( ar==3 ) # boolean array 1 ## [False False False True False False False False False False] print( ar==6 ) # boolean array 2 ## [False False False False False False True False False False] print( np.logical_or(ar==3,ar==6 ) ) # resulting boolean ## [False False False True False False True False False False] numpy.logical_and Perform and operation on two boolean array, generate new resulting boolean arrays ar = np.arange(10) print( ar==3 ) # boolean array 1 ## [False False False True False False False False False False] print( ar==6 ) # boolean array 2 ## [False False False False False False True False False False] print( np.logical_and(ar==3,ar==6 ) ) # resulting boolean ## [False False False False False False False False False False] 12.4.5 Instance Method 12.4.5.1 astype() conversion Convert to from datetime64 to datetime ar1 = np.array([&#39;2007-07-13&#39;, &#39;2006-01-13&#39;, &#39;2010-08-13&#39;], dtype=&#39;datetime64&#39;) print( type(ar1) ) ## a numpy array ## &lt;class &#39;numpy.ndarray&#39;&gt; print( ar1.dtype ) ## dtype is a numpy data type ## datetime64[D] After convert to datetime (non-numpy object, the dtype becomes generic ‘object’. ar2 = ar1.astype(datetime) print( type(ar2) ) ## still a numpy array ## &lt;class &#39;numpy.ndarray&#39;&gt; print( ar2.dtype ) ## dtype becomes generic &#39;object&#39; ## object 12.4.5.2 reshape() reshape ( row numbers, col numbers ) Sample Data a = np.array([range(5), range(10,15), range(20,25), range(30,35)]) a ## array([[ 0, 1, 2, 3, 4], ## [10, 11, 12, 13, 14], ## [20, 21, 22, 23, 24], ## [30, 31, 32, 33, 34]]) Resphepe 1-Dim to 2-Dim np.arange(12) # 1-D Array ## array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) np.arange(12).reshape(3,4) # 2-D Array ## array([[ 0, 1, 2, 3], ## [ 4, 5, 6, 7], ## [ 8, 9, 10, 11]]) Respahe 2-Dim to 2-Dim np.array([range(5), range(10,15)]) # 2-D Array ## array([[ 0, 1, 2, 3, 4], ## [10, 11, 12, 13, 14]]) np.array([range(5), range(10,15)]).reshape(5,2) # 2-D Array ## array([[ 0, 1], ## [ 2, 3], ## [ 4, 10], ## [11, 12], ## [13, 14]]) Reshape 2-Dimension to 2-Dim (of single row) - Change 2x10 to 1x10 - Observe [[ ]], and the number of dimension is stll 2, don’t be fooled np.array( [range(0,5), range(5,10)]) # 2-D Array ## array([[0, 1, 2, 3, 4], ## [5, 6, 7, 8, 9]]) np.array( [range(0,5), range(5,10)]).reshape(1,10) # 2-D Array ## array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) Reshape 1-Dim Array to 2-Dim Array (single column) np.arange(8) ## array([0, 1, 2, 3, 4, 5, 6, 7]) np.arange(8).reshape(8,1) ## array([[0], ## [1], ## [2], ## [3], ## [4], ## [5], ## [6], ## [7]]) A better method, use newaxis, easier because no need to input row number as parameter np.arange(8)[:,np.newaxis] ## array([[0], ## [1], ## [2], ## [3], ## [4], ## [5], ## [6], ## [7]]) Reshape 1-Dim Array to 2-Dim Array (single row) np.arange(8) ## array([0, 1, 2, 3, 4, 5, 6, 7]) np.arange(8)[np.newaxis,:] ## array([[0, 1, 2, 3, 4, 5, 6, 7]]) 12.4.6 Element Selection 12.4.6.1 Sample Data x1 = np.array( (0,1,2,3,4,5,6,7,8)) x2 = np.array(( (1,2,3,4,5), (11,12,13,14,15), (21,22,23,24,25))) print(x1) ## [0 1 2 3 4 5 6 7 8] print(x2) ## [[ 1 2 3 4 5] ## [11 12 13 14 15] ## [21 22 23 24 25]] 12.4.6.2 1-Dimension All indexing starts from 0 (not 1) Choosing Single Element does not return array print( x1[0] ) ## first element ## 0 print( x1[-1] ) ## last element ## 8 print( x1[3] ) ## third element from start 3 ## 3 print( x1[-3] ) ## third element from end ## 6 Selecting multiple elments return ndarray print( x1[:3] ) ## first 3 elements ## [0 1 2] print( x1[-3:]) ## last 3 elements ## [6 7 8] print( x1[3:] ) ## all except first 3 elements ## [3 4 5 6 7 8] print( x1[:-3] ) ## all except last 3 elements ## [0 1 2 3 4 5] print( x1[1:4] ) ## elemnt 1 to 4 (not including 4) ## [1 2 3] 12.4.6.3 2-Dimension Indexing with [ row_positoins, row_positions ], index starts with 0 x[1:3, 1:4] # row 1 to 2 column 1 to 3 ## array([[1, 2, 3]]) 12.4.7 Attributes 12.4.7.1 dtype ndarray contain a property called dtype, whcih tell us the type of underlying items a = np.array( (1,2,3,4,5), dtype=&#39;float&#39; ) a.dtype ## dtype(&#39;float64&#39;) print(a.dtype) ## float64 print( type(a[1])) ## &lt;class &#39;numpy.float64&#39;&gt; 12.4.7.2 dim dim returns the number of dimensions of the NumPy array. Example below shows 2-D array x = np.array(( (1,2,3,4,5), (11,12,13,14,15), (21,22,23,24,25))) x.ndim ## 2 12.4.7.3 shape shape return a type of (rows, cols) x = np.array(( (1,2,3,4,5), (11,12,13,14,15), (21,22,23,24,25))) x.shape ## (3, 5) np.identity(5) ## array([[1., 0., 0., 0., 0.], ## [0., 1., 0., 0., 0.], ## [0., 0., 1., 0., 0.], ## [0., 0., 0., 1., 0.], ## [0., 0., 0., 0., 1.]]) 12.4.8 Operations 12.4.8.1 Arithmetic Sample Date ar = np.arange(10) print( ar ) ## [0 1 2 3 4 5 6 7 8 9] * ar = np.arange(10) print (ar) ## [0 1 2 3 4 5 6 7 8 9] print (ar*2) ## [ 0 2 4 6 8 10 12 14 16 18] **+ and -** ar = np.arange(10) print (ar+2) ## [ 2 3 4 5 6 7 8 9 10 11] print (ar-2) ## [-2 -1 0 1 2 3 4 5 6 7] 12.4.8.2 Comparison Sample Data ar = np.arange(10) print( ar ) ## [0 1 2 3 4 5 6 7 8 9] == print( ar==3 ) ## [False False False True False False False False False False] &gt;, &gt;=, &lt;, &lt;= print( ar&gt;3 ) ## [False False False False True True True True True True] print( ar&lt;=3 ) ## [ True True True True False False False False False False] 12.5 Random Numbers 12.5.1 Uniform Distribution 12.5.1.1 Random Integer (with Replacement) randint() Return random integers from low (inclusive) to high (exclusive) np.random.randint( low ) # generate an integer, i, which i &lt; low np.random.randint( low, high ) # generate an integer, i, which low &lt;= i &lt; high np.random.randint( low, high, size=1) # generate an ndarray of integer, single dimension np.random.randint( low, high, size=(r,c)) # generate an ndarray of integer, two dimensions np.random.randint( 10 ) ## 4 np.random.randint( 10, 20 ) ## 10 np.random.randint( 10, high=20, size=5) # single dimension ## array([19, 15, 10, 18, 15]) np.random.randint( 10, 20, (3,5) ) # two dimensions ## array([[11, 18, 14, 15, 18], ## [10, 13, 14, 15, 14], ## [14, 10, 19, 17, 10]]) 12.5.1.2 Random Integer (with or without replacement) numpy.random .choice( a, size, replace=True) # sampling from a, # if a is integer, then it is assumed sampling from arange(a) # if a is an 1-D array, then sampling from this array np.random.choice(10,5, replace=False) # take 5 samples from 0:19, without replacement ## array([1, 3, 9, 2, 6]) np.random.choice( np.arange(10,20), 5, replace=False) ## array([12, 10, 18, 13, 15]) 12.5.1.3 Random Float randf() Generate float numbers in between 0.0 and 1.0 np.random.ranf(size=None) np.random.ranf(4) ## array([0.16037102, 0.60367492, 0.89044041, 0.73233866]) uniform() Return random float from low (inclusive) to high (exclusive) np.random.uniform( low ) # generate an float, i, which f &lt; low np.random.uniform( low, high ) # generate an float, i, which low &lt;= f &lt; high np.random.uniform( low, high, size=1) # generate an array of float, single dimension np.random.uniform( low, high, size=(r,c)) # generate an array of float, two dimensions np.random.uniform( 2 ) ## 1.74353943305943 np.random.uniform( 2,5, size=(4,4) ) ## array([[2.29492862, 4.53583471, 4.97287621, 4.89131071], ## [4.57964851, 4.90207086, 2.86198537, 2.71059979], ## [3.62675549, 2.67033656, 3.42922022, 2.41952866], ## [2.52512498, 3.23374594, 4.5017201 , 2.51517125]]) 12.5.2 Normal Distribution numpy. random.randn (n_items) # 1-D standard normal (mean=0, stdev=1) numpy. random.randn (nrows, ncols) # 2-D standard normal (mean=0, stdev=1) numpy. random.standard_normal( size=None ) # default to mean = 0, stdev = 1, non-configurable numpy. random.normal ( loc=0, scale=1, size=None) # loc = mean, scale = stdev, size = dimension 12.5.2.1 Standard Normal Distribution Generate random normal numbers with gaussion distribution (mean=0, stdev=1) One Dimension np.random.standard_normal(3) ## array([0.98273587, 0.88974946, 0.77848615]) np.random.randn(3) ## array([ 0.28495367, -0.44574664, 1.22887066]) Two Dimensions np.random.randn(2,4) ## array([[ 0.64486808, 1.16045654, -0.85080863, 1.17449208], ## [-1.45875406, 0.29218913, -0.76416792, 0.6012181 ]]) np.random.standard_normal((2,4)) ## array([[ 0.07577017, -1.28457902, 1.21891227, -1.17460068], ## [ 0.14365915, 0.50582805, 0.66437422, 0.08713146]]) Observe: randn(), standard_normal() and normal() are able to generate standard normal numbers np.random.seed(15) print (np.random.randn(5)) ## [-0.31232848 0.33928471 -0.15590853 -0.50178967 0.23556889] np.random.seed(15) print (np.random.normal ( size = 5 )) # stdev and mean not specified, default to standard normal ## [-0.31232848 0.33928471 -0.15590853 -0.50178967 0.23556889] np.random.seed(15) print (np.random.standard_normal (size=5)) ## [-0.31232848 0.33928471 -0.15590853 -0.50178967 0.23556889] 12.5.2.2 Normal Distribution (Non-Standard) np.random.seed(125) np.random.normal( loc = 12, scale=1.25, size=(3,3)) ## array([[11.12645382, 12.01327885, 10.81651695], ## [12.41091248, 12.39383072, 11.49647195], ## [ 8.70837035, 12.25246312, 11.49084235]]) 12.5.2.3 Linear Spacing numpy.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None) # endpoint: If True, stop is the last sample, otherwise it is not included Include Endpoint Step = Gap divide by (number of elements minus 1) (2/(10-1)) np.linspace(1,3,10) #default endpont=True ## array([1. , 1.22222222, 1.44444444, 1.66666667, 1.88888889, ## 2.11111111, 2.33333333, 2.55555556, 2.77777778, 3. ]) Does Not Include Endpoint Step = Gap divide by (number of elements minus 1) (2/(101)) np.linspace(1,3,10,endpoint=False) ## array([1. , 1.2, 1.4, 1.6, 1.8, 2. , 2.2, 2.4, 2.6, 2.8]) 12.6 Sampling (Integer) random.choice( a, size=None, replace=True, p=None) # a=integer, return &lt;size&gt; integers &lt; a random.choice( a, size=None, replace=True, p=None) # a=array-like, return &lt;size&gt; integers picked from list a np.random.choice (100, size=10) ## array([58, 0, 84, 50, 89, 32, 87, 30, 66, 92]) np.random.choice( [1,3,5,7,9,11,13,15,17,19,21,23], size=10, replace=False) ## array([ 5, 1, 23, 17, 3, 13, 15, 9, 21, 7]) 12.7 NaN : Missing Numerical Data You should be aware that NaN is a bit like a data virus?it infects any other object it touches t = np.array([1, np.nan, 3, 4]) t.dtype ## dtype(&#39;float64&#39;) Regardless of the operation, the result of arithmetic with NaN will be another NaN 1 + np.nan ## nan t.sum(), t.mean(), t.max() ## (nan, nan, nan) np.nansum(t), np.nanmean(t), np.nanmax(t) ## (8.0, 2.6666666666666665, 4.0) "],
["pandas-1.html", "13 pandas 13.1 Modules Import 13.2 Pandas Objects 13.3 Class Method 13.4 Timestamp 13.5 Series 13.6 DataFrame 13.7 Categories 13.8 Dummies 13.9 Getting External Data 13.10 GroupBy 13.11 Concat 13.12 Fundamental Analysis 13.13 Missing Data 13.14 Pandas DateTime 13.15 DateTimeIndex", " 13 pandas 13.1 Modules Import import pandas as pd ## Other Libraries import numpy as np import datetime as dt from datetime import datetime from datetime import date 13.2 Pandas Objects 13.2.1 Pandas Data Types pandas.Timestamp pandas.Timedelta pandas.Period pandas.Interval pandas.DateTimeIndex 13.2.2 Pandas Data Structure Type Dimension Size Value Constructor Series 1 Immutable Mutable pandas.DataFrame( data, index, dtype, copy) DataFrame 2 Mutable Mutable pandas.DataFrame( data, index, columns, dtype, copy) Panel 3 Mutable Mutable data can be ndarray, list, constants index must be unique and same length as data. Can be integer or string dtype if none, it will be inferred copy copy data. Default false 13.3 Class Method 13.3.1 Conversion: to_datetime() Pandas to_datetime() can: - Convert list of dates to DateTimeIndex - Convert list of dates to Series of Timestamps - Convert single date into Timestamp Object . Source can be string, date, datetime object 13.3.1.1 From List to DateTimeIndex dti = pd.to_datetime([&#39;2011-01-03&#39;, # from string date(2018,4,13), # from date datetime(2018,3,1,7,30)] # from datetime ) print( dti, &#39;\\nObject Type: &#39;, type(dti), &#39;\\nObject dtype: &#39;, dti.dtype, &#39;\\nElement Type: &#39;, type(dti[1])) ## DatetimeIndex([&#39;2011-01-03 00:00:00&#39;, &#39;2018-04-13 00:00:00&#39;, &#39;2018-03-01 07:30:00&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None) ## Object Type: &lt;class &#39;pandas.core.indexes.datetimes.DatetimeIndex&#39;&gt; ## Object dtype: datetime64[ns] ## Element Type: &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 13.3.1.2 From List to Series sdt = pd.to_datetime(pd.Series([&#39;2011-01-03&#39;, # from string date(2018,4,13), # from date datetime(2018,3,1,7,30)]# from datetime )) print(sdt, &#39;\\nObject Type: &#39;,type(sdt), &#39;\\nObject dtype: &#39;, sdt.dtype, &#39;\\nElement Type: &#39;,type(sdt[1])) ## 0 2011-01-03 00:00:00 ## 1 2018-04-13 00:00:00 ## 2 2018-03-01 07:30:00 ## dtype: datetime64[ns] ## Object Type: &lt;class &#39;pandas.core.series.Series&#39;&gt; ## Object dtype: datetime64[ns] ## Element Type: &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 13.3.1.3 From Scalar to Timestamp print( pd.to_datetime(&#39;2011-01-03&#39;), &#39;\\n&#39;, pd.to_datetime(date(2011,1,3)), &#39;\\n&#39;, pd.to_datetime(datetime(2011,1,3,5,30)), &#39;\\n&#39;, &#39;\\nElement Type: &#39;, type(pd.to_datetime(datetime(2011,1,3,5,30)))) ## 2011-01-03 00:00:00 ## 2011-01-03 00:00:00 ## 2011-01-03 05:30:00 ## ## Element Type: &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 13.3.2 Generate Timestamp Sequence 13.3.2.1 date_range() Return DateTimeIndex object Generate sequence by HOURS ## Specify start, Periods, Frequency ## Start from Date Only pd.date_range(&#39;2018-01-01&#39;, periods=3, freq=&#39;H&#39;) ## DatetimeIndex([&#39;2018-01-01 00:00:00&#39;, &#39;2018-01-01 01:00:00&#39;, &#39;2018-01-01 02:00:00&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;H&#39;) ## Start from DateTime pd.date_range(datetime(2018,1,1,12,30), periods=3, freq=&#39;H&#39;) ## DatetimeIndex([&#39;2018-01-01 12:30:00&#39;, &#39;2018-01-01 13:30:00&#39;, &#39;2018-01-01 14:30:00&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;H&#39;) ## Specify start, End and Frequency pd.date_range(start=&#39;2018-01-03-1230&#39;, end=&#39;2018-01-03-18:30&#39;, freq=&#39;H&#39;) ## DatetimeIndex([&#39;2018-01-03 12:30:00&#39;, &#39;2018-01-03 13:30:00&#39;, &#39;2018-01-03 14:30:00&#39;, ## &#39;2018-01-03 15:30:00&#39;, &#39;2018-01-03 16:30:00&#39;, &#39;2018-01-03 17:30:00&#39;, ## &#39;2018-01-03 18:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;H&#39;) Generate sequence by DAYS pd.date_range(date(2018,1,2), periods=3, freq=&#39;D&#39;) ## DatetimeIndex([&#39;2018-01-02&#39;, &#39;2018-01-03&#39;, &#39;2018-01-04&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) pd.date_range(&#39;2018-01-01-1230&#39;, periods=4, freq=&#39;D&#39;) ## DatetimeIndex([&#39;2018-01-01 12:30:00&#39;, &#39;2018-01-02 12:30:00&#39;, &#39;2018-01-03 12:30:00&#39;, ## &#39;2018-01-04 12:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) Generate sequence of Start of Month pd.date_range(&#39;2018-01&#39;, periods=4, freq=&#39;MS&#39;) ## DatetimeIndex([&#39;2018-01-01&#39;, &#39;2018-02-01&#39;, &#39;2018-03-01&#39;, &#39;2018-04-01&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;MS&#39;) pd.date_range(datetime(2018,1,3,12,30), periods=4, freq=&#39;MS&#39;) ## DatetimeIndex([&#39;2018-02-01 12:30:00&#39;, &#39;2018-03-01 12:30:00&#39;, &#39;2018-04-01 12:30:00&#39;, ## &#39;2018-05-01 12:30:00&#39;], ## dtype=&#39;datetime64[ns]&#39;, freq=&#39;MS&#39;) Generate sequence of End of Month dti = pd.date_range(&#39;2018-02&#39;, periods=4, freq=&#39;M&#39;) dti ## DatetimeIndex([&#39;2018-02-28&#39;, &#39;2018-03-31&#39;, &#39;2018-04-30&#39;, &#39;2018-05-31&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;M&#39;) 13.3.3 Frequency Table (crosstab) crosstab returns Dataframe Object crosstab( index = &lt;SeriesObj&gt;, columns = &lt;new_colName&gt; ) # one dimension table crosstab( index = &lt;SeriesObj&gt;, columns = &lt;SeriesObj&gt; ) # two dimension table crosstab( index = &lt;SeriesObj&gt;, columns = [&lt;SeriesObj1&gt;, &lt;SeriesObj2&gt;] ) # multi dimension table crosstab( index = &lt;SeriesObj&gt;, columns = &lt;SeriesObj&gt;, margines=True ) # add column and row margins 13.3.3.1 Sample Data n = 200 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,6, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,3, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2, &#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 value3 ## 0 C1 D2 G2 63.434839 24.762085 14.037684 ## 1 C3 D2 G1 48.319613 18.965650 -30.215550 ## 2 C2 D1 G1 52.776620 21.003838 49.610150 ## 3 C3 D5 G1 44.648475 23.730746 20.963278 ## 4 C2 D5 G2 45.309311 16.353753 15.269688 13.3.3.2 One DimensionTable print( pd.crosstab(index=mydf.comp, columns=&#39;counter&#39;) ) ## col_0 counter ## comp ## C1 76 ## C2 57 ## C3 67 type ( pd.crosstab(index=mydf.comp, columns=&#39;counter&#39;)) ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; 13.3.3.3 Two Dimension Table pd.crosstab(index=mydf.comp, columns=mydf.dept) ## dept D1 D2 D3 D4 D5 ## comp ## C1 19 20 12 12 13 ## C2 11 17 10 7 12 ## C3 11 14 13 13 16 13.3.3.4 Higher Dimension Table tb = pd.crosstab(index=mydf.comp, columns=[mydf.dept, mydf.grp]) print( tb ) ## dept D1 D2 D3 D4 D5 ## grp G1 G2 G1 G2 G1 G2 G1 G2 G1 G2 ## comp ## C1 10 9 9 11 3 9 4 8 9 4 ## C2 4 7 7 10 4 6 5 2 2 10 ## C3 3 8 5 9 3 10 6 7 9 7 tb.columns ## MultiIndex(levels=[[&#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;, &#39;D4&#39;, &#39;D5&#39;], [&#39;G1&#39;, &#39;G2&#39;]], ## labels=[[0, 0, 1, 1, 2, 2, 3, 3, 4, 4], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]], ## names=[&#39;dept&#39;, &#39;grp&#39;]) Get the subdataframe under D2 tb[&#39;D2&#39;] ## grp G1 G2 ## comp ## C1 9 11 ## C2 7 10 ## C3 5 9 13.3.3.5 Getting Margin Sum of each row and each column is created at the end. tb = pd.crosstab(index=mydf.dept, columns=mydf.grp, margins=True) tb ## grp G1 G2 All ## dept ## D1 17 24 41 ## D2 21 30 51 ## D3 10 25 35 ## D4 15 17 32 ## D5 20 21 41 ## All 83 117 200 print(tb.loc[:,&#39;All&#39;] ) # row total, return a Series ## dept ## D1 41 ## D2 51 ## D3 35 ## D4 32 ## D5 41 ## All 200 ## Name: All, dtype: int64 print(type(tb.loc[:,&#39;All&#39;])) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; print(tb.loc[&#39;All&#39;]) # column total, return a Series ## grp ## G1 83 ## G2 117 ## All 200 ## Name: All, dtype: int64 print(type(tb.loc[&#39;All&#39;])) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; 13.3.3.6 Getting Proportion Use matrix operation divide for each cells over the margin tb/tb.loc[&#39;All&#39;] ## grp G1 G2 All ## dept ## D1 0.204819 0.205128 0.205 ## D2 0.253012 0.256410 0.255 ## D3 0.120482 0.213675 0.175 ## D4 0.180723 0.145299 0.160 ## D5 0.240964 0.179487 0.205 ## All 1.000000 1.000000 1.000 13.3.3.7 Reseting Index When creating a crosstab, column specified by index will become index To convert it to normal column, use reset_index() DataFrameObj.reset_index( inpalce=False ) 13.4 Timestamp This is an enhanced version to datetime standard library. https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html#pandas.Timestamp 13.4.1 Constructor 13.4.1.1 From Number print( pd.Timestamp(year=2017, month=1, day=1) ) #date-like numbers ## 2017-01-01 00:00:00 print( pd.Timestamp(2017,1,1) ) # date-like numbers ## 2017-01-01 00:00:00 print( pd.Timestamp(2017,12,11,5,45)) # datetime-like numbers ## 2017-12-11 05:45:00 print( pd.Timestamp(2017,12,11,5,45,55,999)) # + microseconds ## 2017-12-11 05:45:55.000999 print( pd.Timestamp(2017,12,11,5,45,55,999,8)) # + nanoseconds ## 2017-12-11 05:45:55.000999008 print( type(pd.Timestamp(2017,12,11,5,45,55,999,8))) ## &lt;class &#39;pandas._libs.tslibs.timestamps.Timestamp&#39;&gt; 13.4.1.2 From String Observe that pandas support many string input format Year Month Day, default no timezone print( pd.Timestamp(&#39;2017-12-11&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 print( pd.Timestamp(&#39;2017 12 11&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 print( pd.Timestamp(&#39;2017 Dec 11&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 print( pd.Timestamp(&#39;Dec 11, 2017&#39;)) # date-like string: year-month-day ## 2017-12-11 00:00:00 YMD Hour Minute Second Ms print( pd.Timestamp(&#39;2017-12-11 0545&#39;)) ## hour minute ## 2017-12-11 05:45:00 print( pd.Timestamp(&#39;2017-12-11-05:45&#39;)) ## 2017-12-11 05:45:00 print( pd.Timestamp(&#39;2017-12-11T0545&#39;)) ## 2017-12-11 05:45:00 print( pd.Timestamp(&#39;2017-12-11 054533&#39;)) ## hour minute seconds ## 2017-12-11 05:45:33 print( pd.Timestamp(&#39;2017-12-11 05:45:33&#39;)) ## 2017-12-11 05:45:33 Timezone print( pd.Timestamp(&#39;2017-01-01T0545Z&#39;)) # GMT ## 2017-01-01 05:45:00+00:00 print( pd.Timestamp(&#39;2017-01-01T0545+9&#39;)) # GMT+9 ## 2017-01-01 05:45:00+09:00 print( pd.Timestamp(&#39;2017-01-01T0545+0800&#39;)) # GMT+0800 ## 2017-01-01 05:45:00+08:00 13.4.1.3 From Standard Library datetime and date Object print( pd.Timestamp(date(2017,3,5)) ) # from date ## 2017-03-05 00:00:00 print( pd.Timestamp(datetime(2017,3,5,4,30))) # from datetime ## 2017-03-05 04:30:00 print( pd.Timestamp(datetime(2017,3,5,4,30), tz=&#39;Asia/Kuala_Lumpur&#39;)) # from datetime, + tz ## 2017-03-05 04:30:00+08:00 13.4.2 Attributes ts = pd.Timestamp(&#39;2017-01-01T054533+0800&#39;) # GMT+0800 print( ts.month ) ## 1 print( ts.day ) ## 1 print( ts.year ) ## 2017 print( ts.hour ) ## 5 print( ts.minute) ## 45 print( ts.second) ## 33 print( ts.microsecond) ## 0 print( ts.nanosecond) ## 0 print( ts.tz) ## pytz.FixedOffset(480) ts1 = pd.Timestamp(datetime(2017,3,5,4,30), tz=&#39;Asia/Kuala_Lumpur&#39;) # from datetime, + tz ts2 = pd.Timestamp(&#39;2017-01-01T054533+0800&#39;) # GMT+0800 ts3 = pd.Timestamp(&#39;2017-01-01T0545&#39;) print( ts1.tz ) ## Asia/Kuala_Lumpur print( ts2.tz ) ## pytz.FixedOffset(480) print( ts3.tz ) ## None 13.4.3 Operator 13.4.4 Instance Methods 13.4.4.1 Useful Methods ts = pd.Timestamp(2017,1,1) print( ts.weekday() ) ## 6 print( ts.isoweekday() ) ## 7 13.4.4.2 Convert To datetime Use to_pydatetime() to convert into standard library datetime.datetime, optionally to datetime.date ts = pd.Timestamp(2017,1,10,7,30,52) # to datetime.datetime ts.to_pydatetime() ## datetime.datetime(2017, 1, 10, 7, 30, 52) ts = pd.Timestamp(2017,1,10,7,30,52) # to datetime.date ts.to_pydatetime().date() ## datetime.date(2017, 1, 10) 13.4.4.3 Convert To numpy Use to_datetime64() to convert into numpy.datetime64 ts = pd.Timestamp(2017,1,10,7,30,52) ts.to_datetime64() ## numpy.datetime64(&#39;2017-01-10T07:30:52.000000000&#39;) 13.4.4.4 Formatting with strftime Use strftime() to customize string format. For complete directive, see below: https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior ts = pd.Timestamp(2017,1,10,7,30,52) ts.strftime(&quot;%m/%d&quot;) ## &#39;01/10&#39; 13.4.4.5 Add Timezone Add timezone to tz-naive or tz-non-existance object. Clock will not be shifted as there is no original offset ts = pd.Timestamp(2017,1,10,10,34) ## No timezone ts = ts.tz_localize(&#39;Asia/Kuala_Lumpur&#39;) ## Add timezone ts ## Timestamp(&#39;2017-01-10 10:34:00+0800&#39;, tz=&#39;Asia/Kuala_Lumpur&#39;) 13.4.4.6 Convert Timezone Convert timezone to tz-aware object. The clock will be shifted according to the offset ts = pd.Timestamp(2017,1,10,10,34) ## No timezone ts = ts.tz_localize(&#39;Asia/Kuala_Lumpur&#39;) ## Add timezone ts = ts.tz_convert(&#39;UTC&#39;) ## Convert timezone ts ## Timestamp(&#39;2017-01-10 02:34:00+0000&#39;, tz=&#39;UTC&#39;) 13.4.4.7 Removing TImezone ts = pd.Timestamp(2017,1,10,10,34) ## No timezone ts = ts.tz_localize(&#39;Asia/Kuala_Lumpur&#39;) ## Add timezone ts = ts.tz_localize(None) ## Convert timezone ts ## Timestamp(&#39;2017-01-10 10:34:00&#39;) 13.4.4.8 Formatting with isoformat Use isoformat() to format ISO string (without timezone) ts.isoformat() ## &#39;2017-01-10T10:34:00&#39; 13.4.4.9 ceil print( ts.ceil(freq=&#39;D&#39;) ) # ceiling to day ## 2017-01-11 00:00:00 13.4.4.10 replace() ts.replace(year=2000, month=1,day=1) ## Timestamp(&#39;2000-01-01 10:34:00&#39;) 13.5 Series Series allows different data types (object class) as its element 13.5.1 Constructor 13.5.1.1 Empty Series Passing empty parameter result in empty series s = pd.Series() print (s) ## Series([], dtype: float64) type(s) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; 13.5.1.2 From Scalar If data is a scalar value, an index must be provided. The value will be repeated to match the length of index pd.Series( 99, index = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]) ## a 99 ## b 99 ## c 99 ## d 99 ## dtype: int64 13.5.1.3 From array-like From list pd.Series([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]) # from Python list ## 0 a ## 1 b ## 2 c ## 3 d ## 4 e ## dtype: object From numpy.array If index is not specified, default to 0 and continue incrementally pd.Series(np.array([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;])) # from np.array ## 0 a ## 1 b ## 2 c ## 3 d ## 4 e ## dtype: object From DateTimeIndex dti = pd.date_range(&#39;2011-1-1&#39;,&#39;2011-1-3&#39;) dti ## DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) pd.Series(pd.date_range(&#39;2011-1-1&#39;,&#39;2011-1-3&#39;)) ## 0 2011-01-01 ## 1 2011-01-02 ## 2 2011-01-03 ## dtype: datetime64[ns] 13.5.1.4 From Dictionary The dictionary key will be the index If index sequence is not specified, then the Series will be automatically sorted according to the key pd.Series({&#39;a&#39; : 0., &#39;c&#39; : 1., &#39;b&#39; : 2.}) # from Python dict, autosort by default key ## a 0.0 ## c 1.0 ## b 2.0 ## dtype: float64 If index sequence is specifeid, then Series will forllow the index order Objerve that missing data (index without value) will be marked as NaN pd.Series({&#39;a&#39; : 0., &#39;c&#39; : 1., &#39;b&#39; : 2.},index = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]) # from Python Dict, index specified, no auto sort ## a 0.0 ## b 2.0 ## c 1.0 ## d NaN ## dtype: float64 13.5.1.5 Specify Index pd.Series([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;], index=[10,20,30,40,50]) ## 10 a ## 20 b ## 30 c ## 40 d ## 50 e ## dtype: object 13.5.1.6 Mix Element Types dType will be ‘object’ when there were mixture of classes ser = pd.Series([&#39;a&#39;,1,2,3]) print(&#39;Object Type : &#39;, type(ser)) ## Object Type : &lt;class &#39;pandas.core.series.Series&#39;&gt; print(&#39;Object dType: &#39;, ser.dtype) ## Object dType: object print(&#39;Element 1 Type: &#39;,type(ser[0])) ## Element 1 Type: &lt;class &#39;str&#39;&gt; print(&#39;Elmeent 2 Type: &#39;,type(ser[1])) ## Elmeent 2 Type: &lt;class &#39;int&#39;&gt; 13.5.1.7 Specify Data Types ser1 = pd.Series([1,2,3]) ser2 = pd.Series([1,2,3], dtype=&quot;int8&quot;) ser3 = pd.Series([1,2,3], dtype=&quot;object&quot;) print(ser1, ser1.dtype) ## 0 1 ## 1 2 ## 2 3 ## dtype: int64 int64 print(ser2, ser2.dtype) ## 0 1 ## 1 2 ## 2 3 ## dtype: int8 int8 print(ser3, ser3.dtype) ## 0 1 ## 1 2 ## 2 3 ## dtype: object object 13.5.2 Accessing Series series ( single/list/range_of_row_label/number ) # can cause confusion series.loc ( single/list/range_of_row_label ) series.iloc( single/list/range_of_row_number ) 13.5.2.1 Sample Data s = pd.Series([1,2,3,4,5],index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]) s ## a 1 ## b 2 ## c 3 ## d 4 ## e 5 ## dtype: int64 13.5.2.2 by Row Number(s) Single Item s.iloc[1] ## 2 Multiple Items s.iloc[[1,3]] ## b 2 ## d 4 ## dtype: int64 Range (First 3) s.iloc[:3] ## a 1 ## b 2 ## c 3 ## dtype: int64 Range (Last 3) s.iloc[-3:] ## c 3 ## d 4 ## e 5 ## dtype: int64 Range (in between) s.iloc[2:3] ## c 3 ## dtype: int64 13.5.2.3 by Index(es) Single Label s.loc[&#39;c&#39;] # or ... s[[&#39;c&#39;]] ## 3 Multiple Labels s.loc[[&#39;b&#39;,&#39;c&#39;]] ## b 2 ## c 3 ## dtype: int64 ** Range of Labels ** s.loc[&#39;b&#39;:&#39;d&#39;] ## b 2 ## c 3 ## d 4 ## dtype: int64 13.5.2.4 Filtering Criteria Use logical array to filter s = pd.Series(range(1,8)) s[s&lt;5] ## 0 1 ## 1 2 ## 2 3 ## 3 4 ## dtype: int64 Use logical array with where s.where(s&gt;4) ## 0 NaN ## 1 NaN ## 2 NaN ## 3 NaN ## 4 5.0 ## 5 6.0 ## 6 7.0 ## dtype: float64 s.where(s&gt;4,None) ## 0 None ## 1 None ## 2 None ## 3 None ## 4 5 ## 5 6 ## 6 7 ## dtype: object 13.5.3 Modifying Series 13.5.3.1 by Row Number(s) s = pd.Series(range(1,7), index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;]) s[2] = 999 s[[3,4]] = 888,777 s ## a 1 ## b 2 ## c 999 ## d 888 ## e 777 ## f 6 ## dtype: int64 13.5.3.2 by Index(es) s = pd.Series(range(1,7), index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;]) s[&#39;e&#39;] = 888 s[[&#39;c&#39;,&#39;d&#39;]] = 777,888 s ## a 1 ## b 2 ## c 777 ## d 888 ## e 888 ## f 6 ## dtype: int64 13.5.4 Series Attributes 13.5.4.1 The Data s = pd.Series([1,2,3,4,5],index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;],name=&#39;SuperHero&#39;) 13.5.4.2 index s.index ## Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;], dtype=&#39;object&#39;) 13.5.4.3 dtype s.dtype ## dtype(&#39;int64&#39;) 13.5.4.4 Dimensions print(s) ## a 1 ## b 2 ## c 3 ## d 4 ## e 5 ## Name: SuperHero, dtype: int64 print( s.size ) ## 5 print( s.shape ) ## (5,) print( s.ndim ) ## 1 13.5.4.5 .name s.name ## &#39;SuperHero&#39; 13.5.5 Instance Methods 13.5.5.1 .reset_index () Resetting index will: - Convert index to a normal column, header is ‘index’ - Index renumbered to ,1,2,3 - Retrun DataFrame (became two columns) print(s) ## a 1 ## b 2 ## c 3 ## d 4 ## e 5 ## Name: SuperHero, dtype: int64 print(s.reset_index()) ## index SuperHero ## 0 a 1 ## 1 b 2 ## 2 c 3 ## 3 d 4 ## 4 e 5 13.5.5.2 Structure Conversion Use values() to convert into `numpy.ndarray type(s.values) ## &lt;class &#39;numpy.ndarray&#39;&gt; Use to_list() to convert into standard python `list ## 13.5.5.3 DataType Conversion Use astype() to convert to another numpy supproted datatypes Warning: casting to incompatible type will result in error ser = pd.Series([1, 2], dtype=&#39;int32&#39;) ser ## 0 1 ## 1 2 ## dtype: int32 ser.astype(&#39;int8&#39;) ## 0 1 ## 1 2 ## dtype: int8 13.5.6 Series Operators The result of applying operator (arithmetic or logic) to Series object returns a new Series object 13.5.6.1 Arithmetic Operator s1 = pd.Series( [100,200,300,400,500] ) s2 = pd.Series( [10, 20, 30, 40, 50] ) Apply To One Series Object 100 - s2 ## 0 90 ## 1 80 ## 2 70 ## 3 60 ## 4 50 ## dtype: int64 Apply To Two Series Objects s1 - s2 ## 0 90 ## 1 180 ## 2 270 ## 3 360 ## 4 450 ## dtype: int64 13.5.6.2 Logic Operator Apply logic operator to a Series return a new Series of boolean result This can be used for Series or DataFrame filtering bs = pd.Series(range(0,10)) bs ## 0 0 ## 1 1 ## 2 2 ## 3 3 ## 4 4 ## 5 5 ## 6 6 ## 7 7 ## 8 8 ## 9 9 ## dtype: int64 print (bs&gt;3) ## 0 False ## 1 False ## 2 False ## 3 False ## 4 True ## 5 True ## 6 True ## 7 True ## 8 True ## 9 True ## dtype: bool print (type (bs&gt;3)) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; ~((bs&gt;3) &amp; (bs&lt;8)) ## 0 True ## 1 True ## 2 True ## 3 True ## 4 False ## 5 False ## 6 False ## 7 False ## 8 True ## 9 True ## dtype: bool 13.5.7 Series String Accesor .str If the underlying data is str type, then pandas exposed various properties and methos through str accessor. This chapter focus on various functions that can be applied to entire Series data SeriesObj.str.operatorFunction() Pandas str Method Nearly all Python’s built-in string methods are mirrored by a Pandas vectorized string method. Here is a list of Pandas str methods that mirror Python string methods: len() lower() translate() islower() ljust() upper() startswith() isupper() rjust() find() endswith() isnumeric() center() rfind() isalnum() isdecimal() zfill() index() isalpha() split() strip() rindex() isdigit() rsplit() rstrip() capitalize() isspace() partition() lstrip() swapcase() istitle() rpartition() 13.5.7.1 Splitting s = pd.Series([&#39;a_b_c&#39;, &#39;c_d_e&#39;, np.nan, &#39;f_g_h_i_j&#39;]) s ## 0 a_b_c ## 1 c_d_e ## 2 NaN ## 3 f_g_h_i_j ## dtype: object str.split() By default, split will split the string into array s.str.split(&#39;_&#39;) ## 0 [a, b, c] ## 1 [c, d, e] ## 2 NaN ## 3 [f, g, h, i, j] ## dtype: object After split, select rows to return print( s.str.split(&#39;_&#39;).get(1) ) ## [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;] print( s.str.split(&#39;_&#39;)[1] ) ## [&#39;c&#39;, &#39;d&#39;, &#39;e&#39;] str.split( expand=True, n= ) split and expand=True will return a dataframe instead of series print( s.str.split(&#39;_&#39;, expand=True) ) ## 0 1 2 3 4 ## 0 a b c None None ## 1 c d e None None ## 2 NaN NaN NaN NaN NaN ## 3 f g h i j It is possible to limit the number of columns splitted print( s.str.split(&#39;_&#39;, expand=True, n=1) ) ## 0 1 ## 0 a b_c ## 1 c d_e ## 2 NaN NaN ## 3 f g_h_i_j str.rsplit() rsplit stands for reverse split, it works the same way, except it is reversed print( s.str.rsplit(&#39;_&#39;, expand=True, n=1) ) ## 0 1 ## 0 a_b c ## 1 c_d e ## 2 NaN NaN ## 3 f_g_h_i j 13.5.7.2 Matching monte = pd.Series([&#39;Graham Chapman&#39;, &#39;John Cleese&#39;, &#39;Terry Gilliam&#39;, &#39;Eric Idle&#39;, &#39;Terry Jones&#39;, &#39;Michael Palin&#39;]) monte ## 0 Graham Chapman ## 1 John Cleese ## 2 Terry Gilliam ## 3 Eric Idle ## 4 Terry Jones ## 5 Michael Palin ## dtype: object startwith monte.str.startswith(&#39;T&#39;) ## 0 False ## 1 False ## 2 True ## 3 False ## 4 True ## 5 False ## dtype: bool monte.str.split() ## 0 [Graham, Chapman] ## 1 [John, Cleese] ## 2 [Terry, Gilliam] ## 3 [Eric, Idle] ## 4 [Terry, Jones] ## 5 [Michael, Palin] ## dtype: object Slicing monte.str[0:3] ## 0 Gra ## 1 Joh ## 2 Ter ## 3 Eri ## 4 Ter ## 5 Mic ## dtype: object monte.str[0:-1] ## 0 Graham Chapma ## 1 John Clees ## 2 Terry Gillia ## 3 Eric Idl ## 4 Terry Jone ## 5 Michael Pali ## dtype: object s = pd.Series([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;Aaba&#39;, &#39;Baca&#39;, np.nan, &#39;CABA&#39;, &#39;dog&#39;, &#39;cat&#39;]) 13.5.7.3 Case Conversion SeriesObj.str.upper() SeriesObj.str.lower() s.str.upper() ## 0 A ## 1 B ## 2 C ## 3 AABA ## 4 BACA ## 5 NaN ## 6 CABA ## 7 DOG ## 8 CAT ## dtype: object 13.5.7.4 Number of Characters s.str.len() ## 0 1.0 ## 1 1.0 ## 2 1.0 ## 3 4.0 ## 4 4.0 ## 5 NaN ## 6 4.0 ## 7 3.0 ## 8 3.0 ## dtype: float64 d=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] names = pd.Series(data=d) names.str.capitalize() ## 0 A ## 1 B ## 2 C ## dtype: object 13.5.7.5 String Indexing s = pd.Series([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;Aaba&#39;, &#39;Baca&#39;, np.nan,&#39;CABA&#39;, &#39;dog&#39;, &#39;cat&#39;]) s ## 0 A ## 1 B ## 2 C ## 3 Aaba ## 4 Baca ## 5 NaN ## 6 CABA ## 7 dog ## 8 cat ## dtype: object s.str[1] # return char-1 (second char) of every item ## 0 NaN ## 1 NaN ## 2 NaN ## 3 a ## 4 a ## 5 NaN ## 6 A ## 7 o ## 8 a ## dtype: object 13.5.7.6 Splitting Sample Data s = pd.Series([&#39;a_b_c&#39;, &#39;c_d_e&#39;, np.nan, &#39;f_g_h&#39;]) Splitting base on a a delimieter Result is a SeriesObj with list of splitted characters sp = s.str.split(&#39;_&#39;) sp ## 0 [a, b, c] ## 1 [c, d, e] ## 2 NaN ## 3 [f, g, h] ## dtype: object Retrieving Split Result Use .str.get() to retrieve splitted elments sp.str.get(-1) ## 0 c ## 1 e ## 2 NaN ## 3 h ## dtype: object Alternatively, use str[ ] for the same result sp.str[-1] ## 0 c ## 1 e ## 2 NaN ## 3 h ## dtype: object 13.5.7.7 Split and Expand Into DataFrame s.str.split(&#39;_&#39;,expand=True, n=5) # limit expansion into n columns ## 0 1 2 ## 0 a b c ## 1 c d e ## 2 NaN NaN NaN ## 3 f g h 13.5.7.8 Series Substring Extraction Sample Data s = pd.Series([&#39;a1&#39;, &#39;b2&#39;, &#39;c3&#39;]) s ## 0 a1 ## 1 b2 ## 2 c3 ## dtype: object Extract absed on regex matching … to improve … type(s.str.extract(&#39;([ab])(\\d)&#39;, expand=False)) ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; 13.5.8 Series DateTime Accessor .dt If the underlying data is datetime64 type, then pandas exposed various properties and methos through dt accessor. 13.5.8.1 Sample Data s = pd.Series([ datetime(2000,1,1,0,0,0), datetime(1999,12,15,12,34,55), datetime(2020,3,8,5,7,12), datetime(2018,1,1,0,0,0), datetime(2003,3,4,5,6,7) ]) s ## 0 2000-01-01 00:00:00 ## 1 1999-12-15 12:34:55 ## 2 2020-03-08 05:07:12 ## 3 2018-01-01 00:00:00 ## 4 2003-03-04 05:06:07 ## dtype: datetime64[ns] 13.5.8.2 Convert To datetime.datetime Use to_pydatetime() to convert into numpy.array of standard library datetime.datetime pdt = s.dt.to_pydatetime() print( type(pdt) ) ## &lt;class &#39;numpy.ndarray&#39;&gt; pdt ## array([datetime.datetime(2000, 1, 1, 0, 0), ## datetime.datetime(1999, 12, 15, 12, 34, 55), ## datetime.datetime(2020, 3, 8, 5, 7, 12), ## datetime.datetime(2018, 1, 1, 0, 0), ## datetime.datetime(2003, 3, 4, 5, 6, 7)], dtype=object) datetime.date Use dt.date to convert into pandas.Series of standard library datetime.date Is it possible to have a pandas.Series of datetime.datetime ? No, because Pandas want it as its own Timestamp. sdt = s.dt.date print( type(sdt[1] )) ## &lt;class &#39;datetime.date&#39;&gt; print( type(sdt)) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; sdt ## 0 2000-01-01 ## 1 1999-12-15 ## 2 2020-03-08 ## 3 2018-01-01 ## 4 2003-03-04 ## dtype: object 13.5.8.3 Timestamp Attributes A Series::DateTime object support below properties: - date - month - day - year - dayofweek - dayofyear - weekday - weekday_name - quarter - daysinmonth - hour - minute Full list below: https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetimelike-properties s.dt.date ## 0 2000-01-01 ## 1 1999-12-15 ## 2 2020-03-08 ## 3 2018-01-01 ## 4 2003-03-04 ## dtype: object s.dt.month ## 0 1 ## 1 12 ## 2 3 ## 3 1 ## 4 3 ## dtype: int64 s.dt.dayofweek ## 0 5 ## 1 2 ## 2 6 ## 3 0 ## 4 1 ## dtype: int64 s.dt.weekday ## 0 5 ## 1 2 ## 2 6 ## 3 0 ## 4 1 ## dtype: int64 s.dt.weekday_name ## 0 Saturday ## 1 Wednesday ## 2 Sunday ## 3 Monday ## 4 Tuesday ## dtype: object s.dt.quarter ## 0 1 ## 1 4 ## 2 1 ## 3 1 ## 4 1 ## dtype: int64 s.dt.daysinmonth ## 0 31 ## 1 31 ## 2 31 ## 3 31 ## 4 31 ## dtype: int64 s.dt.time # extract time as time Object ## 0 00:00:00 ## 1 12:34:55 ## 2 05:07:12 ## 3 00:00:00 ## 4 05:06:07 ## dtype: object s.dt.hour # extract hour as integer ## 0 0 ## 1 12 ## 2 5 ## 3 0 ## 4 5 ## dtype: int64 s.dt.minute # extract minute as integer ## 0 0 ## 1 34 ## 2 7 ## 3 0 ## 4 6 ## dtype: int64 13.6 DataFrame 13.6.1 Constructor 13.6.1.1 From Row Oriented Data (List of Lists) Create from List of Lists DataFrame( [row_list1, row_list2, row_list3] ) DataFrame( [row_list1, row_list2, row_list3], column=columnName_list ) DataFrame( [row_list1, row_list2, row_list3], index=row_label_list ) Basic DataFrame with default Row Label and Column Header pd.DataFrame ([[101,&#39;Alice&#39;,40000,2017], [102,&#39;Bob&#39;, 24000, 2017], [103,&#39;Charles&#39;,31000,2017]] ) ## 0 1 2 3 ## 0 101 Alice 40000 2017 ## 1 102 Bob 24000 2017 ## 2 103 Charles 31000 2017 Specify Column Header during Creation pd.DataFrame ([[101,&#39;Alice&#39;,40000,2017], [102,&#39;Bob&#39;, 24000, 2017], [103,&#39;Charles&#39;,31000,2017]], columns = [&#39;empID&#39;,&#39;name&#39;,&#39;salary&#39;,&#39;year&#39;]) ## empID name salary year ## 0 101 Alice 40000 2017 ## 1 102 Bob 24000 2017 ## 2 103 Charles 31000 2017 Specify Row Label during Creation pd.DataFrame ([[101,&#39;Alice&#39;,40000,2017], [102,&#39;Bob&#39;, 24000, 2017], [103,&#39;Charles&#39;,31000,2017]], index = [&#39;r1&#39;,&#39;r2&#39;,&#39;r3&#39;] ) ## 0 1 2 3 ## r1 101 Alice 40000 2017 ## r2 102 Bob 24000 2017 ## r3 103 Charles 31000 2017 13.6.1.2 From Row Oriented Data (List of Dictionary) DataFrame( [dict1, dict2, dict3] ) DataFrame( [row_list1, row_list2, row_list3], column=np.arrange ) DataFrame( [row_list1, row_list2, row_list3], index=row_label_list ) by default,keys will become collumn names, and autosorted Default Column Name Follow Dictionary Key Note missing info as NaN pd.DataFrame ([{&quot;name&quot;:&quot;Yong&quot;, &quot;id&quot;:1,&quot;zkey&quot;:101},{&quot;name&quot;:&quot;Gan&quot;,&quot;id&quot;:2}]) ## id name zkey ## 0 1 Yong 101.0 ## 1 2 Gan NaN Specify Index pd.DataFrame ([{&quot;name&quot;:&quot;Yong&quot;, &quot;id&quot;:&#39;wd1&#39;},{&quot;name&quot;:&quot;Gan&quot;,&quot;id&quot;:&#39;wd2&#39;}], index = (1,2)) ## id name ## 1 wd1 Yong ## 2 wd2 Gan Specify Column Header during Creation, can acts as column filter and manual arrangement Note missing info as NaN pd.DataFrame ([{&quot;name&quot;:&quot;Yong&quot;, &quot;id&quot;:1, &quot;zkey&quot;:101},{&quot;name&quot;:&quot;Gan&quot;,&quot;id&quot;:2}], columns=(&quot;name&quot;,&quot;id&quot;,&quot;zkey&quot;)) ## name id zkey ## 0 Yong 1 101.0 ## 1 Gan 2 NaN 13.6.1.3 From Column Oriented Data Create from Dictrionary of List DataFrame( { &#39;column1&#39;: list1, &#39;column2&#39;: list2, &#39;column3&#39;: list3 } , index = row_label_list, columns = column_list) By default, DataFrame will arrange the columns alphabetically, unless columns is specified Default Row Label data = {&#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year&#39;: [2017, 2017, 2017, 2018, 2018], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;, &#39;David&#39;, &#39;Eric&#39;]} pd.DataFrame(data) ## empID year salary name ## 0 100 2017 40000 Alice ## 1 101 2017 24000 Bob ## 2 102 2017 31000 Charles ## 3 103 2018 20000 David ## 4 104 2018 30000 Eric Specify Row Label during Creation data = {&#39;empID&#39;: [100, 101, 102, 103, 104], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;, &#39;David&#39;, &#39;Eric&#39;], &#39;year&#39;: [2017, 2017, 2017, 2018, 2018], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000] } pd.DataFrame (data, index=[&#39;r1&#39;,&#39;r2&#39;,&#39;r3&#39;,&#39;r4&#39;,&#39;r5&#39;]) ## empID name year salary ## r1 100 Alice 2017 40000 ## r2 101 Bob 2017 24000 ## r3 102 Charles 2017 31000 ## r4 103 David 2018 20000 ## r5 104 Eric 2018 30000 Manualy Choose Columns and Arrangement data = {&#39;empID&#39;: [100, 101, 102, 103, 104], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;, &#39;David&#39;, &#39;Eric&#39;], &#39;year&#39;: [2017, 2017, 2017, 2018, 2018], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000] } pd.DataFrame (data, columns=(&#39;empID&#39;,&#39;name&#39;,&#39;salary&#39;), index=[&#39;r1&#39;,&#39;r2&#39;,&#39;r3&#39;,&#39;r4&#39;,&#39;r5&#39;]) ## empID name salary ## r1 100 Alice 40000 ## r2 101 Bob 24000 ## r3 102 Charles 31000 ## r4 103 David 20000 ## r5 104 Eric 30000 13.6.2 Attributes df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]) 13.6.2.1 Dimensions df.shape ## (5, 5) 13.6.2.2 Index df.index ## RangeIndex(start=0, stop=5, step=1) Underlying Index values are numpy object df.index.values ## array([0, 1, 2, 3, 4], dtype=int64) 13.6.2.3 Columns df.columns ## Index([&#39;year1&#39;, &#39;salary&#39;, &#39;year2&#39;, &#39;empID&#39;, &#39;name&#39;], dtype=&#39;object&#39;) Underlying Index values are numpy object df.columns.values ## array([&#39;year1&#39;, &#39;salary&#39;, &#39;year2&#39;, &#39;empID&#39;, &#39;name&#39;], dtype=object) 13.6.2.4 Values Underlying Column values are numpy object df.values ## array([[2017, 40000, 2001, 100, &#39;Alice&#39;], ## [2017, 24000, 1907, 101, &#39;Bob&#39;], ## [2017, 31000, 2003, 102, &#39;Charles&#39;], ## [2018, 20000, 1998, 103, &#39;David&#39;], ## [2018, 30000, 2011, 104, &#39;Eric&#39;]], dtype=object) 13.6.3 Index Manipulation index and row label are used interchangeably in this book 13.6.3.1 Sample Data Columns are intentionaly ordered in a messy way df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]) print (df, &#39;\\n&#39;) ## year1 salary year2 empID name ## 0 2017 40000 2001 100 Alice ## 1 2017 24000 1907 101 Bob ## 2 2017 31000 2003 102 Charles ## 3 2018 20000 1998 103 David ## 4 2018 30000 2011 104 Eric print (df.index) ## RangeIndex(start=0, stop=5, step=1) 13.6.3.2 Convert Column To Index set_index(&#39;column_name&#39;, inplace=False) inplace=True means don’t create a new dataframe. Modify existing dataframe inplace=False means return a new dataframe print(df) ## year1 salary year2 empID name ## 0 2017 40000 2001 100 Alice ## 1 2017 24000 1907 101 Bob ## 2 2017 31000 2003 102 Charles ## 3 2018 20000 1998 103 David ## 4 2018 30000 2011 104 Eric print(df.index,&#39;\\n&#39;) ## RangeIndex(start=0, stop=5, step=1) df.set_index(&#39;empID&#39;,inplace=True) print(df) ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric print(df.index) # return new DataFrameObj ## Int64Index([100, 101, 102, 103, 104], dtype=&#39;int64&#39;, name=&#39;empID&#39;) 13.6.3.3 Convert Index Back To Column Reseting index will resequence the index as 0,1,2 etc Old index column will be converted back as normal column Operation support inplace** option df.reset_index(inplace=True) print(df) ## empID year1 salary year2 name ## 0 100 2017 40000 2001 Alice ## 1 101 2017 24000 1907 Bob ## 2 102 2017 31000 2003 Charles ## 3 103 2018 20000 1998 David ## 4 104 2018 30000 2011 Eric 13.6.3.4 Updating Index ( .index= ) Warning: - Updating index doesn’t reorder the data sequence - Number of elements before and after reorder must match, otherwise error - Same label are allowed to repeat - Not reversable df.index = [101, 101, 101, 102, 103] print( df ) ## empID year1 salary year2 name ## 101 100 2017 40000 2001 Alice ## 101 101 2017 24000 1907 Bob ## 101 102 2017 31000 2003 Charles ## 102 103 2018 20000 1998 David ## 103 104 2018 30000 2011 Eric 13.6.3.5 Reordering Index (. reindex ) Reindex will reorder the rows according to new index The operation is not reversable Start from this original dataframe Change the order of Index, always return a new dataframe df.index = [101,102,103,104,105] print( df ) ## original sequence ## empID year1 salary year2 name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob ## 103 102 2017 31000 2003 Charles ## 104 103 2018 20000 1998 David ## 105 104 2018 30000 2011 Eric print( df.reindex([103,102,101,104,105]) ) ## new sequence, new dataframe ## empID year1 salary year2 name ## 103 102 2017 31000 2003 Charles ## 102 101 2017 24000 1907 Bob ## 101 100 2017 40000 2001 Alice ## 104 103 2018 20000 1998 David ## 105 104 2018 30000 2011 Eric 13.6.4 Subsetting Columns Select Single Column Return Series dataframe.columnName # single column, name based, return Series object dataframe[ single_col_name ] # single column, name based, return Series object dataframe[ [single_col_name] ] # single column, name based, return DataFrame object Select Single/Multiple Columns Return DataFrame dataframe[ single/list_of_col_names ] # name based, return Dataframe object dataframe.loc[ : , single_col_name ] # single column, series dataframe.loc[ : , col_name_list ] # multiple columns, dataframe dataframe.loc[ : , col_name_ranage ] # multiple columns, dataframe dataframe.iloc[ : , col_number ] # single column, series dataframe.iloc[ : , col_number_list ] # multiple columns, dataframe dataframe.iloc[ : , number_range ] # multiple columns, dataframe 13.6.4.1 Select Single Column Selecting single column always return as panda::Series df.name ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric ## Name: name, dtype: object df[&#39;name&#39;] ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric ## Name: name, dtype: object df.loc[:, &#39;name&#39;] ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric ## Name: name, dtype: object df.iloc[:, 3] ## 101 2001 ## 102 1907 ## 103 2003 ## 104 1998 ## 105 2011 ## Name: year2, dtype: int64 13.6.4.2 Select Multiple Columns Multiple columns return as panda::Dataframe object` df[[&#39;name&#39;]] # return one column dataframe ## name ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric print(df.columns) ## Index([&#39;empID&#39;, &#39;year1&#39;, &#39;salary&#39;, &#39;year2&#39;, &#39;name&#39;], dtype=&#39;object&#39;) df[[&#39;name&#39;,&#39;year1&#39;]] ## name year1 ## 101 Alice 2017 ## 102 Bob 2017 ## 103 Charles 2017 ## 104 David 2018 ## 105 Eric 2018 df.loc[:,[&#39;name&#39;,&#39;year1&#39;]] ## name year1 ## 101 Alice 2017 ## 102 Bob 2017 ## 103 Charles 2017 ## 104 David 2018 ## 105 Eric 2018 df.loc[:,&#39;year1&#39;:&#39;year2&#39;] # range of columns ## year1 salary year2 ## 101 2017 40000 2001 ## 102 2017 24000 1907 ## 103 2017 31000 2003 ## 104 2018 20000 1998 ## 105 2018 30000 2011 df.iloc[:,[0,3]] ## empID year2 ## 101 100 2001 ## 102 101 1907 ## 103 102 2003 ## 104 103 1998 ## 105 104 2011 df.iloc[:,0:3] ## empID year1 salary ## 101 100 2017 40000 ## 102 101 2017 24000 ## 103 102 2017 31000 ## 104 103 2018 20000 ## 105 104 2018 30000 13.6.4.3 Selection by Data Type df.select_dtypes(include=None, exclude=None) Always return panda::DataFrame, even though only single column matches. Allowed types are: - number (integer and float) - integer / float - datetime - timedelta - category df.get_dtype_counts() ## int64 4 ## object 1 ## dtype: int64 df.select_dtypes(exclude=&#39;number&#39;) ## name ## 101 Alice ## 102 Bob ## 103 Charles ## 104 David ## 105 Eric df.select_dtypes(exclude=(&#39;number&#39;,&#39;object&#39;)) ## Empty DataFrame ## Columns: [] ## Index: [101, 102, 103, 104, 105] 13.6.4.4 Subset by filter() .filter(items=None, like=None, regex=None, axis=1) like = Substring Matches df.filter( like=&#39;year&#39;, axis=&#39;columns&#39;) ## or axis = 1 ## year1 year2 ## 101 2017 2001 ## 102 2017 1907 ## 103 2017 2003 ## 104 2018 1998 ## 105 2018 2011 items = list of column names df.filter( items=(&#39;year1&#39;,&#39;year2&#39;), axis=1) ## or axis = 1 ## year1 year2 ## 101 2017 2001 ## 102 2017 1907 ## 103 2017 2003 ## 104 2018 1998 ## 105 2018 2011 regex = Regular Expression Select column names that contain integer df.filter(regex=&#39;\\d&#39;) ## default axis=1 if DataFrame ## year1 year2 ## 101 2017 2001 ## 102 2017 1907 ## 103 2017 2003 ## 104 2018 1998 ## 105 2018 2011 13.6.5 Column Manipulation 13.6.5.1 Sample Data df ## empID year1 salary year2 name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob ## 103 102 2017 31000 2003 Charles ## 104 103 2018 20000 1998 David ## 105 104 2018 30000 2011 Eric 13.6.5.2 Renaming Columns Method 1 : Rename All Columns (.columns =) - Construct the new column names, check if there is no missing column names - Missing columns will return error - Direct Assignment to column property result in change to dataframe new_columns = [&#39;year.1&#39;,&#39;salary&#39;,&#39;year.2&#39;,&#39;empID&#39;,&#39;name&#39;] df.columns = new_columns df.head(2) ## year.1 salary year.2 empID name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob Method 2 : Renaming Specific Column (.rename (columns=) ) - Change column name through rename function - Support inpalce option for original dataframe change - Missing column is OK df.rename( columns={&#39;year.1&#39;:&#39;year1&#39;, &#39;year.2&#39;:&#39;year2&#39;}, inplace=True) df.head(2) ## year1 salary year2 empID name ## 101 100 2017 40000 2001 Alice ## 102 101 2017 24000 1907 Bob 13.6.5.3 Reordering Columns Always return a new dataframe. There is no inplace option for reordering columns Method 1 - reindex(columns = ) - reindex may sounds like operation on row labels, but it works - Missmatch column names will result in NA for the unfound column new_colorder = [ &#39;empID&#39;, &#39;name&#39;, &#39;salary&#39;, &#39;year1&#39;, &#39;year2&#39;] df.reindex(columns = new_colorder).head(2) ## empID name salary year1 year2 ## 101 2001 Alice 2017 100 40000 ## 102 1907 Bob 2017 101 24000 Method 2 - [ ] notation - Missmatch column will result in ERROR new_colorder = [ &#39;empID&#39;, &#39;name&#39;, &#39;salary&#39;, &#39;year1&#39;, &#39;year2&#39;] df[new_colorder] ## empID name salary year1 year2 ## 101 2001 Alice 2017 100 40000 ## 102 1907 Bob 2017 101 24000 ## 103 2003 Charles 2017 102 31000 ## 104 1998 David 2018 103 20000 ## 105 2011 Eric 2018 104 30000 13.6.5.4 Duplicating or Replacing Column New Column will be created instantly using [] notation DO NOT USE dot Notation because it is view only attribute df[&#39;year3&#39;] = df.year1 df ## year1 salary year2 empID name year3 ## 101 100 2017 40000 2001 Alice 100 ## 102 101 2017 24000 1907 Bob 101 ## 103 102 2017 31000 2003 Charles 102 ## 104 103 2018 20000 1998 David 103 ## 105 104 2018 30000 2011 Eric 104 13.6.5.5 Dropping Columns (.drop) dataframe.drop( columns=&#39;column_name&#39;, inplace=True/False) # delete single column dataframe.drop( columns=list_of_colnames, inplace=True/False) # delete multiple column dataframe.drop( index=&#39;row_label&#39;, inplace=True/False) # delete single row dataframe.drop( index= list_of_row_labels, inplace=True/False) # delete multiple rows inplace=True means column will be deleted from original dataframe. Default is False, which return a copy of dataframe By Column Name(s) df.drop( columns=&#39;year1&#39;) # drop single column ## salary year2 empID name year3 ## 101 2017 40000 2001 Alice 100 ## 102 2017 24000 1907 Bob 101 ## 103 2017 31000 2003 Charles 102 ## 104 2018 20000 1998 David 103 ## 105 2018 30000 2011 Eric 104 df.drop(columns=[&#39;year2&#39;,&#39;year3&#39;]) # drop multiple columns ## year1 salary empID name ## 101 100 2017 2001 Alice ## 102 101 2017 1907 Bob ## 103 102 2017 2003 Charles ## 104 103 2018 1998 David ## 105 104 2018 2011 Eric By Column Number(s) Use dataframe.columns to produce interim list of column names df.drop( columns=df.columns[[3,4,5]] ) # delete columns by list of column number ## year1 salary year2 ## 101 100 2017 40000 ## 102 101 2017 24000 ## 103 102 2017 31000 ## 104 103 2018 20000 ## 105 104 2018 30000 df.drop( columns=df.columns[3:6] ) # delete columns by range of column number ## year1 salary year2 ## 101 100 2017 40000 ## 102 101 2017 24000 ## 103 102 2017 31000 ## 104 103 2018 20000 ## 105 104 2018 30000 13.6.6 Subsetting Rows dataframe.loc[ row_label ] # return series, single row dataframe.loc[ row_label_list ] # multiple rows dataframe.loc[ boolean_list ] # multiple rows dataframe.iloc[ row_number ] # return series, single row dataframe.iloc[ row_number_list ] # multiple rows dataframe.iloc[ number_range ] # multiple rows dataframe.sample(frac=) # frac = 0.6 means sampling 60% of rows randomly 13.6.6.1 Sample Data df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]).set_index([&#39;empID&#39;]) df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 13.6.6.2 By Index or Boolean Single Index return Series df.loc[101] # by single row label, return series ## year1 2017 ## salary 24000 ## year2 1907 ## name Bob ## Name: 101, dtype: object List or Range of Indexes returns DataFrame df.loc[ [100,103] ] # by multiple row labels ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 103 2018 20000 1998 David df.loc[ 100:103 ] # by range of row labels ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David List of Boolean returns DataFrame criteria = (df.salary &gt; 30000) &amp; (df.year1==2017) print (criteria) ## empID ## 100 True ## 101 False ## 102 True ## 103 False ## 104 False ## dtype: bool print (df.loc[criteria]) ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 102 2017 31000 2003 Charles 13.6.6.3 By Row Number Single Row return Series df.iloc[1] # by single row number ## year1 2017 ## salary 24000 ## year2 1907 ## name Bob ## Name: 101, dtype: object Multiple rows returned as dataframe object df.iloc[ [0,3] ] # by row numbers ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 103 2018 20000 1998 David df.iloc[ 0:3 ] # by row number range ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles 13.6.6.4 query() .query(expr, inplace=False) df.query(&#39;salary&lt;=31000 and year1 == 2017&#39;) ## year1 salary year2 name ## empID ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles 13.6.6.5 sample() np.random.seed(15) df.sample(frac=0.6) #randomly pick 60% of rows, without replacement ## year1 salary year2 name ## empID ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 13.6.7 Row Manipulation 13.6.7.1 Sample Data 13.6.7.2 Dropping Rows (.drop) .drop(labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise') By Row Label(s) df.drop(index=100) # single row ## year1 salary year2 name ## empID ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric df.drop(index=[100,103]) # multiple rows ## year1 salary year2 name ## empID ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 104 2018 30000 2011 Eric 13.6.8 Slicing 13.6.8.1 Sample Data df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 13.6.8.2 Getting One Cell By Row Label and Column Name (loc) dataframe.loc [ row_label , col_name ] # by row label and column names dataframe.loc [ bool_list , col_name ] # by row label and column names dataframe.iloc[ row_number, col_number ] # by row and column number print (df.loc[100,&#39;year1&#39;]) ## 2017 By Row Number and Column Number (iloc) print (df.iloc[1,2]) ## 1907 13.6.8.3 Getting Multiple Cells Specify rows and columns (by individual or range) dataframe.loc [ list/range_of_row_labels , list/range_col_names ] # by row label and column names dataframe.iloc[ list/range_row_numbers, list/range_col_numbers ] # by row number By Index and Column Name (loc) print (df.loc[ [101,103], [&#39;name&#39;,&#39;year1&#39;] ], &#39;\\n&#39;) # by list of row label and column names ## name year1 ## empID ## 101 Bob 2017 ## 103 David 2018 print (df.loc[ 101:104 , &#39;year1&#39;:&#39;year2&#39; ], &#39;\\n&#39;) # by range of row label and column names ## year1 salary year2 ## empID ## 101 2017 24000 1907 ## 102 2017 31000 2003 ## 103 2018 20000 1998 ## 104 2018 30000 2011 By Boolean Row and Column Names (loc) df.loc[df.year1==2017, &#39;year1&#39;:&#39;year2&#39;] ## year1 salary year2 ## empID ## 100 2017 40000 2001 ## 101 2017 24000 1907 ## 102 2017 31000 2003 By Row and Column Number (iloc) print (df.iloc[ [1,4], [0,3]],&#39;\\n&#39; ) # by individual rows/columns ## year1 name ## empID ## 101 2017 Bob ## 104 2018 Eric print (df.iloc[ 1:4 , 0:3], &#39;\\n&#39;) # by range ## year1 salary year2 ## empID ## 101 2017 24000 1907 ## 102 2017 31000 2003 ## 103 2018 20000 1998 13.6.9 Chained Indexing Chained Index Method creates a copy of dataframe, any modification of data on original dataframe does not affect the copy dataframe.loc [...] [...] dataframe.iloc [...] [...] Suggesting, never use chain indexing df = pd.DataFrame( { &#39;empID&#39;: [100, 101, 102, 103, 104], &#39;year1&#39;: [2017, 2017, 2017, 2018, 2018], &#39;name&#39;: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charles&#39;,&#39;David&#39;, &#39;Eric&#39;], &#39;year2&#39;: [2001, 1907, 2003, 1998, 2011], &#39;salary&#39;: [40000, 24000, 31000, 20000, 30000]}, columns = [&#39;year1&#39;,&#39;salary&#39;,&#39;year2&#39;,&#39;empID&#39;,&#39;name&#39;]).set_index([&#39;empID&#39;]) df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric df.loc[100][&#39;year&#39;] =2000 ## C:/ProgramData/Anaconda3/python.exe:1: SettingWithCopyWarning: ## A value is trying to be set on a copy of a slice from a DataFrame ## ## See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py:915: SettingWithCopyWarning: ## A value is trying to be set on a copy of a slice from a DataFrame ## ## See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy ## self.loc[key] = value df ## notice row label 100 had not been updated, because data was updated on a copy due to chain indexing ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 13.6.10 Data Structure 13.6.10.1 Instance Methods - Structure Find out the column names, data type in a summary. Output is for display only, not a data object df.info() # return text output ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## Int64Index: 5 entries, 100 to 104 ## Data columns (total 4 columns): ## year1 5 non-null int64 ## salary 5 non-null int64 ## year2 5 non-null int64 ## name 5 non-null object ## dtypes: int64(3), object(1) ## memory usage: 360.0+ bytes df.get_dtype_counts() # return Series ## int64 3 ## object 1 ## dtype: int64 13.6.10.2 Conversion To Other Format df.to_json() ## &#39;{&quot;year1&quot;:{&quot;100&quot;:2017,&quot;101&quot;:2017,&quot;102&quot;:2017,&quot;103&quot;:2018,&quot;104&quot;:2018},&quot;salary&quot;:{&quot;100&quot;:40000,&quot;101&quot;:24000,&quot;102&quot;:31000,&quot;103&quot;:20000,&quot;104&quot;:30000},&quot;year2&quot;:{&quot;100&quot;:2001,&quot;101&quot;:1907,&quot;102&quot;:2003,&quot;103&quot;:1998,&quot;104&quot;:2011},&quot;name&quot;:{&quot;100&quot;:&quot;Alice&quot;,&quot;101&quot;:&quot;Bob&quot;,&quot;102&quot;:&quot;Charles&quot;,&quot;103&quot;:&quot;David&quot;,&quot;104&quot;:&quot;Eric&quot;}}&#39; df.to_records() ## rec.array([(100, 2017, 40000, 2001, &#39;Alice&#39;), ## (101, 2017, 24000, 1907, &#39;Bob&#39;), ## (102, 2017, 31000, 2003, &#39;Charles&#39;), ## (103, 2018, 20000, 1998, &#39;David&#39;), ## (104, 2018, 30000, 2011, &#39;Eric&#39;)], ## dtype=[(&#39;empID&#39;, &#39;&lt;i8&#39;), (&#39;year1&#39;, &#39;&lt;i8&#39;), (&#39;salary&#39;, &#39;&lt;i8&#39;), (&#39;year2&#39;, &#39;&lt;i8&#39;), (&#39;name&#39;, &#39;O&#39;)]) df.to_csv() ## &#39;empID,year1,salary,year2,name\\n100,2017,40000,2001,Alice\\n101,2017,24000,1907,Bob\\n102,2017,31000,2003,Charles\\n103,2018,20000,1998,David\\n104,2018,30000,2011,Eric\\n&#39; 13.6.11 Exploratory Analysis 13.6.11.1 Sample Data df ## year1 salary year2 name ## empID ## 100 2017 40000 2001 Alice ## 101 2017 24000 1907 Bob ## 102 2017 31000 2003 Charles ## 103 2018 20000 1998 David ## 104 2018 30000 2011 Eric 13.6.11.2 All Stats in One - .describe() df.describe(include=&#39;number&#39;) # default df.describe(include=&#39;object&#39;) # display for non-numeric columns df.describe(include=&#39;all&#39;) # display both numeric and non-numeric When applied to DataFrame object, describe shows all basic statistic for all numeric columns: - Count (non-NA) - Unique (for string) - Top (for string) - Frequency (for string) - Percentile - Mean - Min / Max - Standard Deviation For Numeric Columns only You can customize the percentiles requred. Notice 0.5 percentile is always there although not specified df.describe() ## year1 salary year2 ## count 5.000000 5.000000 5.000000 ## mean 2017.400000 29000.000000 1984.000000 ## std 0.547723 7615.773106 43.312816 ## min 2017.000000 20000.000000 1907.000000 ## 25% 2017.000000 24000.000000 1998.000000 ## 50% 2017.000000 30000.000000 2001.000000 ## 75% 2018.000000 31000.000000 2003.000000 ## max 2018.000000 40000.000000 2011.000000 df.describe(percentiles=[0.9,0.3,0.2,0.1]) ## year1 salary year2 ## count 5.000000 5.000000 5.000000 ## mean 2017.400000 29000.000000 1984.000000 ## std 0.547723 7615.773106 43.312816 ## min 2017.000000 20000.000000 1907.000000 ## 10% 2017.000000 21600.000000 1943.400000 ## 20% 2017.000000 23200.000000 1979.800000 ## 30% 2017.000000 25200.000000 1998.600000 ## 50% 2017.000000 30000.000000 2001.000000 ## 90% 2018.000000 36400.000000 2007.800000 ## max 2018.000000 40000.000000 2011.000000 For both Numeric and Object df.describe(include=&#39;all&#39;) ## year1 salary year2 name ## count 5.0 5.0 5.0 5 ## unique NaN NaN NaN 5 ## top NaN NaN NaN Bob ## freq NaN NaN NaN 1 ## mean 2017.4 29000.0 1984.0 NaN ## ... ... ... ... ... ## min 2017.0 20000.0 1907.0 NaN ## 25% 2017.0 24000.0 1998.0 NaN ## 50% 2017.0 30000.0 2001.0 NaN ## 75% 2018.0 31000.0 2003.0 NaN ## max 2018.0 40000.0 2011.0 NaN ## ## [11 rows x 4 columns] 13.6.11.3 min/max/mean/median df.min() # default axis=0, column-wise ## year1 2017 ## salary 20000 ## year2 1907 ## name Alice ## dtype: object df.min(axis=1) # axis=1, row-wise ## empID ## 100 2001 ## 101 1907 ## 102 2003 ## 103 1998 ## 104 2011 ## dtype: int64 Observe, sum on string will concatenate column-wise, whereas row-wise only sum up numeric fields df.sum(0) ## year1 10087 ## salary 145000 ## year2 9920 ## name AliceBobCharlesDavidEric ## dtype: object df.sum(1) ## empID ## 100 44018 ## 101 27924 ## 102 35020 ## 103 24016 ## 104 34029 ## dtype: int64 13.6.12 Plotting 13.7 Categories 13.7.1 Creating 13.7.1.1 From List Basic (Auto Category Mapping) Basic syntax return categorical index with sequence with code 0,1,2,3… mapping to first found category In this case, low(0), high(1), medium(2) temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [high, low, medium] type( temp_cat ) ## &lt;class &#39;pandas.core.arrays.categorical.Categorical&#39;&gt; Manual Category Mapping During creation, we can specify mapping of codes to category: low(0), medium(1), high(2) temp_cat = pd.Categorical(temp, categories=[&#39;low&#39;,&#39;medium&#39;,&#39;high&#39;]) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [low, medium, high] 13.7.1.2 From Series We can ‘add’ categorical structure into a Series. With these methods, additional property (.cat) is added as a categorical accessor Through this accessor, you gain access to various properties of the category such as .codes, .categories. But not .get_values() as the information is in the Series itself Can we manual map category ????? temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Series(temp, dtype=&#39;category&#39;) print (type(temp_cat)) # Series object ## &lt;class &#39;pandas.core.series.Series&#39;&gt; print (type(temp_cat.cat)) # Categorical Accessor ## &lt;class &#39;pandas.core.arrays.categorical.CategoricalAccessor&#39;&gt; Method below has the same result as above by using .astype(‘category’) It is useful adding category structure into existing series. temp_ser = pd.Series(temp) temp_cat = pd.Series(temp).astype(&#39;category&#39;) print (type(temp_cat)) # Series object ## &lt;class &#39;pandas.core.series.Series&#39;&gt; print (type(temp_cat.cat)) # Categorical Accessor ## &lt;class &#39;pandas.core.arrays.categorical.CategoricalAccessor&#39;&gt; temp_cat.cat.categories ## Index([&#39;high&#39;, &#39;low&#39;, &#39;medium&#39;], dtype=&#39;object&#39;) 13.7.1.3 Ordering Category temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp, categories=[&#39;low&#39;,&#39;medium&#39;,&#39;high&#39;], ordered=True) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [low &lt; medium &lt; high] temp_cat.get_values() ## array([&#39;low&#39;, &#39;high&#39;, &#39;medium&#39;, &#39;high&#39;, &#39;high&#39;, &#39;low&#39;, &#39;medium&#39;, &#39;medium&#39;, ## &#39;high&#39;], dtype=object) temp_cat.codes ## array([0, 2, 1, 2, 2, 0, 1, 1, 2], dtype=int8) temp_cat[0] &lt; temp_cat[3] ## False 13.7.2 Properties 13.7.2.1 .categories first element’s code = 0 second element’s code = 1 third element’s code = 2 temp_cat.categories ## Index([&#39;low&#39;, &#39;medium&#39;, &#39;high&#39;], dtype=&#39;object&#39;) 13.7.2.2 .codes Codes are actual integer value stored as array. 1 represent ‘high’, temp_cat.codes ## array([0, 2, 1, 2, 2, 0, 1, 1, 2], dtype=int8) 13.7.3 Rename Category 13.7.3.1 Renamce To New Category Object .rename_categories() method return a new category object with new changed categories temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] new_temp_cat = temp_cat.rename_categories([&#39;sejuk&#39;,&#39;sederhana&#39;,&#39;panas&#39;]) new_temp_cat ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (3, object): [sejuk &lt; sederhana &lt; panas] temp_cat # original category object categories not changed ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [low &lt; medium &lt; high] 13.7.3.2 Rename Inplace Observe the original categories had been changed using .rename() temp_cat.categories = [&#39;sejuk&#39;,&#39;sederhana&#39;,&#39;panas&#39;] temp_cat # original category object categories is changed ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (3, object): [sejuk &lt; sederhana &lt; panas] 13.7.4 Adding New Category This return a new category object with added categories temp_cat_more = temp_cat.add_categories([&#39;susah&#39;,&#39;senang&#39;]) temp_cat_more ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (5, object): [sejuk &lt; sederhana &lt; panas &lt; susah &lt; senang] 13.7.5 Removing Category This is not in place, hence return a new categorical object 13.7.5.1 Remove Specific Categor(ies) Elements with its category removed will become NaN temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp) temp_cat_removed = temp_cat.remove_categories(&#39;low&#39;) temp_cat_removed ## [NaN, high, medium, high, high, NaN, medium, medium, high] ## Categories (2, object): [high, medium] 13.7.5.2 Remove Unused Category Since categories removed are not used, there is no impact to the element print (temp_cat_more) ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (5, object): [sejuk &lt; sederhana &lt; panas &lt; susah &lt; senang] temp_cat_more.remove_unused_categories() ## [sejuk, panas, sederhana, panas, panas, sejuk, sederhana, sederhana, panas] ## Categories (3, object): [sejuk &lt; sederhana &lt; panas] 13.7.6 Add and Remove Categories In One Step - Set() temp = [&#39;low&#39;,&#39;high&#39;,&#39;medium&#39;,&#39;high&#39;,&#39;high&#39;,&#39;low&#39;,&#39;medium&#39;,&#39;medium&#39;,&#39;high&#39;] temp_cat = pd.Categorical(temp, ordered=True) temp_cat ## [low, high, medium, high, high, low, medium, medium, high] ## Categories (3, object): [high &lt; low &lt; medium] temp_cat.set_categories([&#39;low&#39;,&#39;medium&#39;,&#39;sederhana&#39;,&#39;susah&#39;,&#39;senang&#39;]) ## [low, NaN, medium, NaN, NaN, low, medium, medium, NaN] ## Categories (5, object): [low &lt; medium &lt; sederhana &lt; susah &lt; senang] 13.7.7 Categorical Descriptive Analysis 13.7.7.1 At One Glance temp_cat.describe() ## counts freqs ## categories ## high 4 0.444444 ## low 2 0.222222 ## medium 3 0.333333 13.7.7.2 Frequency Count temp_cat.value_counts() ## high 4 ## low 2 ## medium 3 ## dtype: int64 13.7.7.3 Least Frequent Category, Most Frequent Category, and Most Frequent Category ( temp_cat.min(), temp_cat.max(), temp_cat.mode() ) ## (&#39;high&#39;, &#39;medium&#39;, [high] ## Categories (3, object): [high &lt; low &lt; medium]) 13.7.8 Other Methods 13.7.8.1 .get_values() Since actual value stored by categorical object are integer codes, get_values() function return values translated from *.codes** property temp_cat.get_values() #array ## array([&#39;low&#39;, &#39;high&#39;, &#39;medium&#39;, &#39;high&#39;, &#39;high&#39;, &#39;low&#39;, &#39;medium&#39;, &#39;medium&#39;, ## &#39;high&#39;], dtype=object) 13.8 Dummies get_dummies creates columns for each categories The underlying data can be string or pd.Categorical It produces a new pd.DataFrame 13.8.1 Sample Data df = pd.DataFrame ( {&#39;A&#39;: [&#39;A1&#39;, &#39;A2&#39;, &#39;A3&#39;,&#39;A1&#39;,&#39;A3&#39;,&#39;A1&#39;], &#39;B&#39;: [&#39;B1&#39;,&#39;B2&#39;,&#39;B3&#39;,&#39;B1&#39;,&#39;B1&#39;,&#39;B3&#39;], &#39;C&#39;: [&#39;C1&#39;,&#39;C2&#39;,&#39;C3&#39;,&#39;C1&#39;,np.nan,np.nan]}) df ## A B C ## 0 A1 B1 C1 ## 1 A2 B2 C2 ## 2 A3 B3 C3 ## 3 A1 B1 C1 ## 4 A3 B1 NaN ## 5 A1 B3 NaN 13.8.2 Dummies on Array-Like Data pd.get_dummies(df.A) ## A1 A2 A3 ## 0 1 0 0 ## 1 0 1 0 ## 2 0 0 1 ## 3 1 0 0 ## 4 0 0 1 ## 5 1 0 0 13.8.3 Dummies on DataFrame (multiple columns) 13.8.3.1 All Columns pd.get_dummies(df) ## A_A1 A_A2 A_A3 B_B1 B_B2 B_B3 C_C1 C_C2 C_C3 ## 0 1 0 0 1 0 0 1 0 0 ## 1 0 1 0 0 1 0 0 1 0 ## 2 0 0 1 0 0 1 0 0 1 ## 3 1 0 0 1 0 0 1 0 0 ## 4 0 0 1 1 0 0 0 0 0 ## 5 1 0 0 0 0 1 0 0 0 13.8.3.2 Selected Columns cols = [&#39;A&#39;,&#39;B&#39;] pd.get_dummies(df[cols]) ## A_A1 A_A2 A_A3 B_B1 B_B2 B_B3 ## 0 1 0 0 1 0 0 ## 1 0 1 0 0 1 0 ## 2 0 0 1 0 0 1 ## 3 1 0 0 1 0 0 ## 4 0 0 1 1 0 0 ## 5 1 0 0 0 0 1 13.8.4 Dummies with na By default, nan values are ignored pd.get_dummies(df.C) ## C1 C2 C3 ## 0 1 0 0 ## 1 0 1 0 ## 2 0 0 1 ## 3 1 0 0 ## 4 0 0 0 ## 5 0 0 0 Make NaN as a dummy variable pd.get_dummies(df.C,dummy_na=True) ## C1 C2 C3 NaN ## 0 1 0 0 0 ## 1 0 1 0 0 ## 2 0 0 1 0 ## 3 1 0 0 0 ## 4 0 0 0 1 ## 5 0 0 0 1 13.8.5 Specify Prefixes pd.get_dummies(df.A, prefix=&#39;col&#39;) ## col_A1 col_A2 col_A3 ## 0 1 0 0 ## 1 0 1 0 ## 2 0 0 1 ## 3 1 0 0 ## 4 0 0 1 ## 5 1 0 0 pd.get_dummies(df[cols], prefix=[&#39;colA&#39;,&#39;colB&#39;]) ## colA_A1 colA_A2 colA_A3 colB_B1 colB_B2 colB_B3 ## 0 1 0 0 1 0 0 ## 1 0 1 0 0 1 0 ## 2 0 0 1 0 0 1 ## 3 1 0 0 1 0 0 ## 4 0 0 1 1 0 0 ## 5 1 0 0 0 0 1 13.8.6 Dropping First Column Dummies cause colinearity issue for regression as it has redundant column. Dropping a column does not loose any information technically pd.get_dummies(df[cols],drop_first=True) ## A_A2 A_A3 B_B2 B_B3 ## 0 0 0 0 0 ## 1 1 0 1 0 ## 2 0 1 0 1 ## 3 0 0 0 0 ## 4 0 1 0 0 ## 5 0 0 0 1 13.9 Getting External Data 13.9.1 html_table parser Read the web page, create a list: which contain one or more dataframes that maps to each html table found Auto detect column header Auto create index using number starting from 0 read_html(url) # return list of dataframe(s) that maps to web table(s) structure #df_list = pd.read_html(&#39;https://www.bloomberg.com/markets/currencies&#39;) #print (&#39;Total Table(s) Found : &#39;, len(df_list)) #df = df_list[0] #print (df) 13.9.2 CSV Import 13.9.2.1 Syntax pandas.read_csv( &#39;url or filePath&#39;, # path to file or url encoding = &#39;utf_8&#39;, # optional: default is &#39;utf_8&#39; index_col = [&#39;colName1&#39;, ...], # optional: specify one or more index column parse_dates = [&#39;dateCol1&#39;, ...], # optional: specify multiple string column to convert to date na_values = [&#39;.&#39;,&#39;na&#39;,&#39;NA&#39;,&#39;N/A&#39;], # optional: values that is considered NA names = [&#39;newColName1&#39;, ... ], # optional: overwrite column names thousands = &#39;.&#39;, # optional: thousand seperator symbol nrows = n, # optional: load only first n rows skiprows = 0 # optional: don&#39;t load first n rows ) Refer to full codec Python Codec. 13.9.2.2 Default Import By default: - index is sequence of integer 0,1,2… - only two data type: number and string (auto detection) - date is not parsed, hence stayed as string goo = pd.read_csv(&#39;data/goog.csv&#39;, encoding=&#39;utf_8&#39;) goo.head() ## Date Open High Low Close Volume ## 0 12/19/2016 790.219971 797.659973 786.270020 794.200012 1225900 ## 1 12/20/2016 796.760010 798.650024 793.270020 796.419983 925100 ## 2 12/21/2016 795.840027 796.676025 787.099976 794.559998 1208700 ## 3 12/22/2016 792.359985 793.320007 788.580017 791.260010 969100 ## 4 12/23/2016 790.900024 792.739990 787.280029 789.909973 623400 goo.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 61 entries, 0 to 60 ## Data columns (total 6 columns): ## Date 61 non-null object ## Open 61 non-null float64 ## High 61 non-null float64 ## Low 61 non-null float64 ## Close 61 non-null float64 ## Volume 61 non-null int64 ## dtypes: float64(4), int64(1), object(1) ## memory usage: 2.9+ KB 13.9.2.3 Specify Data Types By default read_csv only import data types of float64 and object(str). This is done through auto detection. To customize the data type, use dtype parameter with a dict of definition. d_types = {&#39;Volume&#39;: str} pd.read_csv(&#39;data/goog.csv&#39;, dtype=d_types).head() ## Date Open High Low Close Volume ## 0 12/19/2016 790.219971 797.659973 786.270020 794.200012 1225900 ## 1 12/20/2016 796.760010 798.650024 793.270020 796.419983 925100 ## 2 12/21/2016 795.840027 796.676025 787.099976 794.559998 1208700 ## 3 12/22/2016 792.359985 793.320007 788.580017 791.260010 969100 ## 4 12/23/2016 790.900024 792.739990 787.280029 789.909973 623400 pd.read_csv(&#39;data/goog.csv&#39;, dtype=d_types).info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 61 entries, 0 to 60 ## Data columns (total 6 columns): ## Date 61 non-null object ## Open 61 non-null float64 ## High 61 non-null float64 ## Low 61 non-null float64 ## Close 61 non-null float64 ## Volume 61 non-null object ## dtypes: float64(4), object(2) ## memory usage: 2.9+ KB 13.9.2.4 On The Fly Date Parsing and Indexing You can specify multiple date-alike column for parsing pd.read_csv(&#39;data/goog.csv&#39;, parse_dates=[&#39;Date&#39;]).head() ## Date Open High Low Close Volume ## 0 2016-12-19 790.219971 797.659973 786.270020 794.200012 1225900 ## 1 2016-12-20 796.760010 798.650024 793.270020 796.419983 925100 ## 2 2016-12-21 795.840027 796.676025 787.099976 794.559998 1208700 ## 3 2016-12-22 792.359985 793.320007 788.580017 791.260010 969100 ## 4 2016-12-23 790.900024 792.739990 787.280029 789.909973 623400 pd.read_csv(&#39;data/goog.csv&#39;, parse_dates=[&#39;Date&#39;]).info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 61 entries, 0 to 60 ## Data columns (total 6 columns): ## Date 61 non-null datetime64[ns] ## Open 61 non-null float64 ## High 61 non-null float64 ## Low 61 non-null float64 ## Close 61 non-null float64 ## Volume 61 non-null int64 ## dtypes: datetime64[ns](1), float64(4), int64(1) ## memory usage: 2.9 KB 13.9.2.5 Parse Date, Then Set as Index When date is set as index, the type is DateTimeIndex goo3 = pd.read_csv(&#39;data/goog.csv&#39;,index_col=&#39;Date&#39;, parse_dates=[&#39;Date&#39;]) goo3.head() ## Open High Low Close Volume ## Date ## 2016-12-19 790.219971 797.659973 786.270020 794.200012 1225900 ## 2016-12-20 796.760010 798.650024 793.270020 796.419983 925100 ## 2016-12-21 795.840027 796.676025 787.099976 794.559998 1208700 ## 2016-12-22 792.359985 793.320007 788.580017 791.260010 969100 ## 2016-12-23 790.900024 792.739990 787.280029 789.909973 623400 Observe index is now DateTime data type type(goo3.index) ## &lt;class &#39;pandas.core.indexes.datetimes.DatetimeIndex&#39;&gt; tb.reset_index() ## grp dept G1 G2 All ## 0 D1 17 24 41 ## 1 D2 21 30 51 ## 2 D3 10 25 35 ## 3 D4 15 17 32 ## 4 D5 20 21 41 ## 5 All 83 117 200 13.10 GroupBy Aggretation and summarization require creating DataFrameGroupBy object from existing DataFrame The GroupBy object is a very flexible abstraction. In many ways, you can simply treat it as if it’s a collection of DataFrames, and it does the difficult things under the hood company = pd.read_csv(&#39;data/company.csv&#39;) company.head() ## Company Department Name Age Salary Birthdate ## 0 C1 D1 Yong 45 15000 1/1/1970 ## 1 C1 D1 Chew 35 12000 2/1/1980 ## 2 C1 D2 Lim 34 8000 2/19/1977 ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 13.10.1 Creating Groups com_grp = company.groupby([&#39;Company&#39;,&#39;Department&#39;]) com_grp ## &lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x00000000067C9BE0&gt; 13.10.2 Properties 13.10.2.1 Number of Groups Created com_grp.ngroups ## 9 13.10.2.2 Row Numbers Associated For Each Group com_grp.groups # return Dictionary ## {(&#39;C1&#39;, &#39;D1&#39;): Int64Index([0, 1], dtype=&#39;int64&#39;), (&#39;C1&#39;, &#39;D2&#39;): Int64Index([2], dtype=&#39;int64&#39;), (&#39;C1&#39;, &#39;D3&#39;): Int64Index([3, 4, 5], dtype=&#39;int64&#39;), (&#39;C2&#39;, &#39;D1&#39;): Int64Index([6], dtype=&#39;int64&#39;), (&#39;C2&#39;, &#39;D2&#39;): Int64Index([7, 8, 9], dtype=&#39;int64&#39;), (&#39;C2&#39;, &#39;D3&#39;): Int64Index([10, 11, 12], dtype=&#39;int64&#39;), (&#39;C3&#39;, &#39;D1&#39;): Int64Index([14], dtype=&#39;int64&#39;), (&#39;C3&#39;, &#39;D2&#39;): Int64Index([15], dtype=&#39;int64&#39;), (&#39;C3&#39;, &#39;D3&#39;): Int64Index([13, 16, 17], dtype=&#39;int64&#39;)} 13.10.3 Methods 13.10.3.1 Number of Rows In Each Group com_grp.size() # return panda Series object ## Company Department ## C1 D1 2 ## D2 1 ## D3 3 ## C2 D1 1 ## D2 3 ## D3 3 ## C3 D1 1 ## D2 1 ## D3 3 ## dtype: int64 13.10.3.2 Valid (not Null) Data Count For Each Fields In The Group com_grp.count() # return panda DataFrame object ## Name Age Salary Birthdate ## Company Department ## C1 D1 2 2 2 2 ## D2 1 1 1 1 ## D3 3 3 3 3 ## C2 D1 1 1 1 1 ## D2 3 3 3 3 ## D3 3 3 3 3 ## C3 D1 1 1 1 1 ## D2 1 1 1 1 ## D3 3 3 3 3 13.10.4 Retrieve Rows All row retrieval operations return a dataframe 13.10.4.1 Retrieve N Rows For Each Groups Example below retrieve 2 rows from each group com_grp.head(2) ## Company Department Name Age Salary Birthdate ## 0 C1 D1 Yong 45 15000 1/1/1970 ## 1 C1 D1 Chew 35 12000 2/1/1980 ## 2 C1 D2 Lim 34 8000 2/19/1977 ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 ## .. ... ... ... ... ... ... ## 11 C2 D3 Jeannie 30 12500 12/31/1980 ## 13 C3 D3 Chang 32 7900 7/26/1973 ## 14 C3 D1 Ong 44 17500 8/21/1980 ## 15 C3 D2 Lily 41 15300 7/17/1990 ## 16 C3 D3 Sally 54 21000 7/19/1968 ## ## [14 rows x 6 columns] 13.10.4.2 Retrieve Rows In One Specific Group com_grp.get_group((&#39;C1&#39;,&#39;D3&#39;)) ## Company Department Name Age Salary Birthdate ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 ## 5 C1 D3 Sui Wei 56 3000 6/15/1990 13.10.4.3 Retrieve n-th Row From Each Group Row number is 0-based com_grp.nth(-1) # retireve last row from each group ## Age Birthdate Name Salary ## Company Department ## C1 D1 35 2/1/1980 Chew 12000 ## D2 34 2/19/1977 Lim 8000 ## D3 56 6/15/1990 Sui Wei 3000 ## C2 D1 18 7/15/1997 Anne 400 ## D2 46 10/31/1988 Jimmy 14000 ## D3 29 12/1/1963 Bernard 9800 ## C3 D1 44 8/21/1980 Ong 17500 ## D2 41 7/17/1990 Lily 15300 ## D3 37 3/16/1969 Esther 13500 13.10.5 Iteration DataFrameGroupBy object can be thought as a collection of named groups def print_groups (g): for name,group in g: print (name) print (group[:2]) print_groups (com_grp) ## (&#39;C1&#39;, &#39;D1&#39;) ## Company Department Name Age Salary Birthdate ## 0 C1 D1 Yong 45 15000 1/1/1970 ## 1 C1 D1 Chew 35 12000 2/1/1980 ## (&#39;C1&#39;, &#39;D2&#39;) ## Company Department Name Age Salary Birthdate ## 2 C1 D2 Lim 34 8000 2/19/1977 ## (&#39;C1&#39;, &#39;D3&#39;) ## Company Department Name Age Salary Birthdate ## 3 C1 D3 Jessy 23 2500 3/15/1990 ## 4 C1 D3 Hoi Ming 55 25000 4/15/1987 ## (&#39;C2&#39;, &#39;D1&#39;) ## Company Department Name Age Salary Birthdate ## 6 C2 D1 Anne 18 400 7/15/1997 ## (&#39;C2&#39;, &#39;D2&#39;) ## Company Department Name Age Salary Birthdate ## 7 C2 D2 Deborah 30 8600 8/15/1984 ## 8 C2 D2 Nikalus 51 12000 9/18/2000 ## (&#39;C2&#39;, &#39;D3&#39;) ## Company Department Name Age Salary Birthdate ## 10 C2 D3 Michael 38 17000 11/30/1997 ## 11 C2 D3 Jeannie 30 12500 12/31/1980 ## (&#39;C3&#39;, &#39;D1&#39;) ## Company Department Name Age Salary Birthdate ## 14 C3 D1 Ong 44 17500 8/21/1980 ## (&#39;C3&#39;, &#39;D2&#39;) ## Company Department Name Age Salary Birthdate ## 15 C3 D2 Lily 41 15300 7/17/1990 ## (&#39;C3&#39;, &#39;D3&#39;) ## Company Department Name Age Salary Birthdate ## 13 C3 D3 Chang 32 7900 7/26/1973 ## 16 C3 D3 Sally 54 21000 7/19/1968 com_grp ## &lt;pandas.core.groupby.groupby.DataFrameGroupBy object at 0x00000000067C9BE0&gt; 13.10.6 Apply Aggregate Functions to Groups Aggregate apply functions to columns in every groups, and return a summary data for each group 13.10.6.1 Apply One Function to One or More Columns com_grp[&#39;Age&#39;].sum() ## Company Department ## C1 D1 80 ## D2 34 ## D3 134 ## C2 D1 18 ## D2 127 ## D3 97 ## C3 D1 44 ## D2 41 ## D3 123 ## Name: Age, dtype: int64 com_grp[[&#39;Age&#39;,&#39;Salary&#39;]].sum() ## Age Salary ## Company Department ## C1 D1 80 27000 ## D2 34 8000 ## D3 134 30500 ## C2 D1 18 400 ## D2 127 34600 ## D3 97 39300 ## C3 D1 44 17500 ## D2 41 15300 ## D3 123 42400 13.10.6.2 Apply One or More Functions To All Columns com_grp.agg(np.mean) ## Age Salary ## Company Department ## C1 D1 40.000000 13500.000000 ## D2 34.000000 8000.000000 ## D3 44.666667 10166.666667 ## C2 D1 18.000000 400.000000 ## D2 42.333333 11533.333333 ## D3 32.333333 13100.000000 ## C3 D1 44.000000 17500.000000 ## D2 41.000000 15300.000000 ## D3 41.000000 14133.333333 com_grp.agg([np.mean,np.sum]) ## Age Salary ## mean sum mean sum ## Company Department ## C1 D1 40.000000 80 13500.000000 27000 ## D2 34.000000 34 8000.000000 8000 ## D3 44.666667 134 10166.666667 30500 ## C2 D1 18.000000 18 400.000000 400 ## D2 42.333333 127 11533.333333 34600 ## D3 32.333333 97 13100.000000 39300 ## C3 D1 44.000000 44 17500.000000 17500 ## D2 41.000000 41 15300.000000 15300 ## D3 41.000000 123 14133.333333 42400 13.10.6.3 Apply Different Functions To Different Columns com_grp.agg({&#39;Age&#39;:np.mean, &#39;Salary&#39;: [np.min,np.max]}) ## Age Salary ## mean amin amax ## Company Department ## C1 D1 40.000000 12000 15000 ## D2 34.000000 8000 8000 ## D3 44.666667 2500 25000 ## C2 D1 18.000000 400 400 ## D2 42.333333 8600 14000 ## D3 32.333333 9800 17000 ## C3 D1 44.000000 17500 17500 ## D2 41.000000 15300 15300 ## D3 41.000000 7900 21000 13.10.7 Transform Transform is an operation used combined with DataFrameGroupBy object transform() return a new DataFrame object grp = company.groupby(&#39;Company&#39;) grp.size() ## Company ## C1 6 ## C2 7 ## C3 5 ## dtype: int64 transform() perform a function to a group, and expands and replicate it to multiple rows according to original DataFrame grp[[&#39;Age&#39;,&#39;Salary&#39;]].transform(&#39;sum&#39;) ## Age Salary ## 0 248 65500 ## 1 248 65500 ## 2 248 65500 ## 3 248 65500 ## 4 248 65500 ## .. ... ... ## 13 208 75200 ## 14 208 75200 ## 15 208 75200 ## 16 208 75200 ## 17 208 75200 ## ## [18 rows x 2 columns] grp.transform( lambda x:x+10 ) ## Age Salary ## 0 55 15010 ## 1 45 12010 ## 2 44 8010 ## 3 33 2510 ## 4 65 25010 ## .. ... ... ## 13 42 7910 ## 14 54 17510 ## 15 51 15310 ## 16 64 21010 ## 17 47 13510 ## ## [18 rows x 2 columns] 13.11 Concat 13.11.1 Sample Data s1 = pd.Series([&#39;A1&#39;,&#39;A2&#39;,&#39;A3&#39;,&#39;A4&#39;]) s2 = pd.Series([&#39;B1&#39;,&#39;B2&#39;,&#39;B3&#39;,&#39;B4&#39;]) s3 = pd.Series([&#39;C1&#39;,&#39;C2&#39;,&#39;C3&#39;,&#39;C4&#39;]) df = pd.DataFrame({ &#39;A&#39;: s1, &#39;B&#39;: s2}) df ## A B ## 0 A1 B1 ## 1 A2 B2 ## 2 A3 B3 ## 3 A4 B4 13.11.2 Column-Wise 13.11.2.1 Multiple Arrays/Series Added series will have 0,1,2,… column names pd.concat([s1,s2,s3],axis=1) ## 0 1 2 ## 0 A1 B1 C1 ## 1 A2 B2 C2 ## 2 A3 B3 C3 ## 3 A4 B4 C4 13.11.2.2 DataFrame and Series No change to original data frame column name Added columns from series will have 0,1,2,3,.. column name pd.concat([df,s3,s1],axis=1) ## A B 0 1 ## 0 A1 B1 C1 A1 ## 1 A2 B2 C2 A2 ## 2 A3 B3 C3 A3 ## 3 A4 B4 C4 A4 13.11.3 Row-Wise 13.12 Fundamental Analysis 13.12.1 Structure of the Dataframe (.info()) info() is a function that print information to screen. It doesn’t return any object dataframe.info() # display columns and number of rows (that has no missing data) df.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 4 entries, 0 to 3 ## Data columns (total 2 columns): ## A 4 non-null object ## B 4 non-null object ## dtypes: object(2) ## memory usage: 144.0+ bytes 13.12.2 First Few Rows (.head()) dataframe.head (n) # return dataframe of first n rows, default n = 5 df.head() ## A B ## 0 A1 B1 ## 1 A2 B2 ## 2 A3 B3 ## 3 A4 B4 13.13 Missing Data 13.13.1 What Is Considered Missing Data ? 13.13.2 Sample Data df = pd.DataFrame( np.random.randn(5, 3), index =[&#39;a&#39;, &#39;c&#39;, &#39;e&#39;, &#39;f&#39;, &#39;h&#39;], columns =[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]) df[&#39;four&#39;] = &#39;bar&#39; df[&#39;five&#39;] = df[&#39;one&#39;] &gt; 0 df ## one two three four five ## a -0.155909 -0.501790 0.235569 bar False ## c -1.763605 -1.095862 -1.087766 bar False ## e -0.305170 -0.473748 -0.200595 bar False ## f 0.355197 0.689518 0.410590 bar True ## h -0.564978 0.599391 -0.162936 bar False df.reindex([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;]) ## one two three four five ## a -0.155909 -0.501790 0.235569 bar False ## b NaN NaN NaN NaN NaN ## c -1.763605 -1.095862 -1.087766 bar False ## d NaN NaN NaN NaN NaN ## e -0.305170 -0.473748 -0.200595 bar False ## f 0.355197 0.689518 0.410590 bar True ## g NaN NaN NaN NaN NaN ## h -0.564978 0.599391 -0.162936 bar False How Missing Data For Each Column ? df.count() ## one 5 ## two 5 ## three 5 ## four 5 ## five 5 ## dtype: int64 len(df.index) - df.count() ## one 0 ## two 0 ## three 0 ## four 0 ## five 0 ## dtype: int64 df.isnull() ## one two three four five ## a False False False False False ## c False False False False False ## e False False False False False ## f False False False False False ## h False False False False False df.describe() ## one two three ## count 5.000000 5.000000 5.000000 ## mean -0.486893 -0.156498 -0.161028 ## std 0.788635 0.772882 0.579752 ## min -1.763605 -1.095862 -1.087766 ## 25% -0.564978 -0.501790 -0.200595 ## 50% -0.305170 -0.473748 -0.162936 ## 75% -0.155909 0.599391 0.235569 ## max 0.355197 0.689518 0.410590 13.14 Pandas DateTime pandas contains extensive capabilities and features for working with time series data for all domains. Using the NumPy datetime64 and timedelta64 dtypes panda.Timestamp, a subclass of datetime.datetime, is pandas? scalar type for timezone-naive or timezone-aware datetime data. It mimics datetime.datime 13.15 DateTimeIndex 13.15.1 Creating Source can be string, date, datetime object 13.15.1.1 Convert From When the input is list-like, to_datetime convert to DateTimeIndex dti = pd.to_datetime([&#39;2011-01-03&#39;, # from string date(2018,4,13), # from date datetime(2018,3,1,7,30)]# from datetime ) dti ## DatetimeIndex([&#39;2011-01-03 00:00:00&#39;, &#39;2018-04-13 00:00:00&#39;, &#39;2018-03-01 07:30:00&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None) dti[1] ## Timestamp(&#39;2018-04-13 00:00:00&#39;) 13.15.2 Instance Method 13.15.2.1 Conversion to: datetime.datetime Use to_pydatetime to convert into python standard datetime object print(dti.to_pydatetime()) ## [datetime.datetime(2011, 1, 3, 0, 0) datetime.datetime(2018, 4, 13, 0, 0) ## datetime.datetime(2018, 3, 1, 7, 30)] print(type(dti.to_pydatetime())) ## &lt;class &#39;numpy.ndarray&#39;&gt; 13.15.2.2 Converion: to_series This creates index and data with the same value dti = pd.date_range(&#39;2018-02&#39;, periods=4, freq=&#39;M&#39;) dts = dti.to_series() print( dts) ## 2018-02-28 2018-02-28 ## 2018-03-31 2018-03-31 ## 2018-04-30 2018-04-30 ## 2018-05-31 2018-05-31 ## Freq: M, dtype: datetime64[ns] print(type(dts)) ## &lt;class &#39;pandas.core.series.Series&#39;&gt; 13.15.2.3 Converion: to_frame() This convert to single column dataframe with index as the same value dtf = dti.to_frame() dtf ## 0 ## 2018-02-28 2018-02-28 ## 2018-03-31 2018-03-31 ## 2018-04-30 2018-04-30 ## 2018-05-31 2018-05-31 dtf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## DatetimeIndex: 4 entries, 2018-02-28 to 2018-05-31 ## Freq: M ## Data columns (total 1 columns): ## 0 4 non-null datetime64[ns] ## dtypes: datetime64[ns](1) ## memory usage: 64.0 bytes 13.15.3 Properties dti = pd.date_range(&#39;2018-02&#39;, periods=4, freq=&#39;D&#39;) print( dti.weekday ) ## Int64Index([3, 4, 5, 6], dtype=&#39;int64&#39;) print( dti.month ) ## Int64Index([2, 2, 2, 2], dtype=&#39;int64&#39;) "],
["matplotlib-2.html", "14 matplotlib 14.1 Library 14.2 Sample Data 14.3 MATLAB-like API 14.4 Object-Oriented API 14.5 Histogram 14.6 Scatter Plot 14.7 Bar Chart", " 14 matplotlib from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:75% !important; margin-left:350px; }&lt;/style&gt;&quot;)) #%matplotlib inline ## &lt;IPython.core.display.HTML object&gt; import numpy as np import pandas as pd import matplotlib.pyplot as plt import math import seaborn as sns pd.set_option( &#39;display.notebook_repr_html&#39;, False) # render Series and DataFrame as text, not HTML pd.set_option( &#39;display.max_column&#39;, 10) # number of columns pd.set_option( &#39;display.max_rows&#39;, 10) # number of rows pd.set_option( &#39;display.width&#39;, 90) # number of characters per row 14.1 Library import matplotlib import matplotlib.pyplot as plt from plydata import define, query, select, group_by, summarize, arrange, head, rename import plotnine from plotnine import * import os os.environ[&#39;QT_QPA_PLATFORM_PLUGIN_PATH&#39;] = &quot;C:\\ProgramData\\Anaconda3\\Library\\plugins\\platforms&quot; 14.2 Sample Data This chapter uses the sample data generate with below code. The idea is to simulate two categorical-alike feature, and two numeric value feature: com is random character between ?C1?, ?C2? and ?C3? dept is random character between ?D1?, ?D2?, ?D3?, ?D4? and ?D5? grp is random character with randomly generated ?G1?, ?G2? value1 represents numeric value, normally distributed at mean 50 value2 is numeric value, normally distributed at mean 25 n = 200 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,6, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,3, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2, &#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 value3 ## 0 C3 D1 G2 58.001073 20.797796 4.565181 ## 1 C2 D4 G2 47.122054 20.691133 36.084163 ## 2 C3 D5 G1 49.497686 15.715835 7.232685 ## 3 C1 D3 G2 50.129623 26.790262 -6.875583 ## 4 C3 D3 G1 51.620032 23.704337 11.909618 mydf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## RangeIndex: 200 entries, 0 to 199 ## Data columns (total 6 columns): ## comp 200 non-null object ## dept 200 non-null object ## grp 200 non-null object ## value1 200 non-null float64 ## value2 200 non-null float64 ## value3 200 non-null float64 ## dtypes: float64(3), object(3) ## memory usage: 9.5+ KB 14.3 MATLAB-like API The good thing about the pylab MATLAB-style API is that it is easy to get started with if you are familiar with MATLAB, and it has a minumum of coding overhead for simple plots. However, I’d encourrage not using the MATLAB compatible API for anything but the simplest figures. Instead, I recommend learning and using matplotlib’s object-oriented plotting API. It is remarkably powerful. For advanced figures with subplots, insets and other components it is very nice to work with. 14.3.1 Sample Data # Sample Data x = np.linspace(0,5,10) y = x ** 2 14.3.2 Single Plot #plt.figure() #plt.xlabel(&#39;x&#39;) #plt.ylabel(&#39;y&#39;) #plt.plot(x,y,&#39;red&#39;) #plt.title(&#39;My Good Data&#39;) #plt.show() 14.3.3 Multiple Subplots Each call lto subplot() will create a new container for subsequent plot command plt.figure() ## &lt;Figure size 267.36x250 with 0 Axes&gt; plt.subplot(1,2,1) # 1 row, 2 cols, at first box ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000680CCF8&gt; plt.plot(x,y,&#39;r--&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x000000000871B470&gt;] plt.subplot(1,2,2) # 1 row, 2 cols, at second box ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000871B2B0&gt; plt.plot(y,x,&#39;g*-&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000008754D68&gt;] plt.show() 14.4 Object-Oriented API 14.4.1 Sample Data # Sample Data x = np.linspace(0,5,10) y = x ** 2 14.4.2 Single Plot One figure, one axes fig = plt.figure() axes = fig.add_axes([0,0,1,1]) # left, bottom, width, height (range 0 to 1) axes.plot(x, y, &#39;r&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x000000000873F6A0&gt;] axes.set_xlabel(&#39;x&#39;) ## Text(0.5, 0, &#39;x&#39;) axes.set_ylabel(&#39;y&#39;) ## Text(0, 0.5, &#39;y&#39;) axes.set_title(&#39;title&#39;) ## Text(0.5, 1.0, &#39;title&#39;) plt.show() 14.4.3 Multiple Axes In One Plot This is still considered a single plot, but with multiple axes fig = plt.figure() ax1 = fig.add_axes([0, 0, 1, 1]) # main axes ax2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes ax1.plot(x,y,&#39;r&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000006EF9208&gt;] ax1.set_xlabel(&#39;x&#39;) ## Text(0.5, 0, &#39;x&#39;) ax1.set_ylabel(&#39;y&#39;) ## Text(0, 0.5, &#39;y&#39;) ax2.plot(y, x, &#39;g&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000009787470&gt;] ax2.set_xlabel(&#39;y&#39;) ## Text(0.5, 0, &#39;y&#39;) ax2.set_ylabel(&#39;x&#39;) ## Text(0, 0.5, &#39;x&#39;) ax2.set_title(&#39;insert title&#39;) ## Text(0.5, 1.0, &#39;insert title&#39;) plt.show() 14.4.4 Multiple Subplots One figure can contain multiple subplots Each subplot has one axes 14.4.4.1 Simple Subplots - all same size subplots() function return axes object that is iterable. Single Row Grid Single row grid means axes is an 1-D array. Hence can use for to iterate through axes fig, axes = plt.subplots( nrows=1,ncols=3 ) print (axes.shape) ## (3,) for ax in axes: ax.plot(x, y, &#39;r&#39;) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;y&#39;) ax.set_title(&#39;title&#39;) ax.text(0.2,0.5,&#39;One&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000006FE0C50&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## Text(0.2, 0.5, &#39;One&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000006FEC240&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## Text(0.2, 0.5, &#39;One&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000006FEC7B8&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## Text(0.2, 0.5, &#39;One&#39;) plt.show() Multiple Row Grid Multile row grid means axes is an 2-D array. Hence can use two levels of for loop to iterate through each row and column fig, axes = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) print (axes.shape) ## (2, 3) for i in range(axes.shape[0]): for j in range(axes.shape[1]): axes[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;(0, 0)&#39;) ## Text(0.5, 0.5, &#39;(0, 1)&#39;) ## Text(0.5, 0.5, &#39;(0, 2)&#39;) ## Text(0.5, 0.5, &#39;(1, 0)&#39;) ## Text(0.5, 0.5, &#39;(1, 1)&#39;) ## Text(0.5, 0.5, &#39;(1, 2)&#39;) plt.show() 14.4.4.2 Complicated Subplots - different size GridSpec specify grid size of the figure Manually specify each subplot and their relevant grid position and size plt.figure(figsize=(5,5)) ## &lt;Figure size 500x500 with 0 Axes&gt; grid = plt.GridSpec(2, 3, hspace=0.4, wspace=0.4) plt.subplot(grid[0, 0]) #row 0, col 0 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000007168DD8&gt; plt.subplot(grid[0, 1:]) #row 0, col 1 to : ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000007195F60&gt; plt.subplot(grid[1, :2]) #row 1, col 0:2 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000071D32B0&gt; plt.subplot(grid[1, 2]); #row 1, col 2 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000006FD5B00&gt; plt.show() plt.figure(figsize=(5,5)) ## &lt;Figure size 500x500 with 0 Axes&gt; grid = plt.GridSpec(4, 4, hspace=0.8, wspace=0.4) plt.subplot(grid[:3, 0]) # row 0:3, col 0 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000007617DA0&gt; plt.subplot(grid[:3, 1: ]) # row 0:3, col 1: ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000076360F0&gt; plt.subplot(grid[3, 1: ]); # row 3, col 1: ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000007663588&gt; plt.show() -1 means last row or column plt.figure(figsize=(6,6)) ## &lt;Figure size 600x600 with 0 Axes&gt; grid = plt.GridSpec(4, 4, hspace=0.4, wspace=1.2) plt.subplot(grid[:-1, 0 ]) # row 0 till last row (not including last row), col 0 ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000762D5C0&gt; plt.subplot(grid[:-1, 1:]) # row 0 till last row (not including last row), col 1 till end ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000760E668&gt; plt.subplot(grid[-1, 1: ]); # row last row, col 1 till end ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000071C8DD8&gt; plt.show() 14.4.5 Figure Customization 14.4.5.1 Avoid Overlap - Use tight_layout() Sometimes when the figure size is too small, plots will overlap each other. - tight_layout() will introduce extra white space in between the subplots to avoid overlap. - The figure became wider. fig, axes = plt.subplots( nrows=1,ncols=2) for ax in axes: ax.plot(x, y, &#39;r&#39;) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;y&#39;) ax.set_title(&#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x00000000097D5AC8&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000007025940&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) fig.tight_layout() # adjust the positions of axes so that there is no overlap plt.show() 14.4.5.2 Avoid Overlap - Change Figure Size fig, axes = plt.subplots( nrows=1,ncols=2,figsize=(12,3)) for ax in axes: ax.plot(x, y, &#39;r&#39;) ax.set_xlabel(&#39;x&#39;) ax.set_ylabel(&#39;y&#39;) ax.set_title(&#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x0000000007168F98&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) ## [&lt;matplotlib.lines.Line2D object at 0x00000000097CE198&gt;] ## Text(0.5, 0, &#39;x&#39;) ## Text(0, 0.5, &#39;y&#39;) ## Text(0.5, 1.0, &#39;title&#39;) plt.show() 14.4.5.3 Text Within Figure fig = plt.figure() fig.text(0.5, 0.5, &#39;This Is A Sample&#39;,fontsize=18, ha=&#39;center&#39;); ## Text(0.5, 0.5, &#39;This Is A Sample&#39;) axes = fig.add_axes([0,0,1,1]) # left, bottom, width, height (range 0 to 1) plt.show() ## Traceback (most recent call last): ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\backends\\backend_qt5.py&quot;, line 505, in _draw_idle ## self.draw() ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py&quot;, line 388, in draw ## self.figure.draw(self.renderer) ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\artist.py&quot;, line 38, in draw_wrapper ## return draw(artist, renderer, *args, **kwargs) ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\figure.py&quot;, line 1709, in draw ## renderer, self, artists, self.suppressComposite) ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\image.py&quot;, line 135, in _draw_list_compositing_images ## a.draw(renderer) ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\artist.py&quot;, line 38, in draw_wrapper ## return draw(artist, renderer, *args, **kwargs) ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\axes\\_base.py&quot;, line 2607, in draw ## self._update_title_position(renderer) ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\axes\\_base.py&quot;, line 2548, in _update_title_position ## ax.xaxis.get_ticks_position() in choices): ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\axis.py&quot;, line 2146, in get_ticks_position ## self._get_ticks_position()] ## File &quot;C:\\ProgramData\\Anaconda3\\lib\\site-packages\\matplotlib\\axis.py&quot;, line 1832, in _get_ticks_position ## major = self.majorTicks[0] ## IndexError: list index out of range 14.4.6 Axes Customization 14.4.6.1 Y-Axis Limit fig = plt.figure() fig.add_axes([0,0,1,1], ylim=(-2,5)); ## &lt;matplotlib.axes._axes.Axes object at 0x0000000007136588&gt; plt.show() 14.4.6.2 Text Within Axes fig, ax = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) for i in range(2): for j in range(3): ax[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;(0, 0)&#39;) ## Text(0.5, 0.5, &#39;(0, 1)&#39;) ## Text(0.5, 0.5, &#39;(0, 2)&#39;) ## Text(0.5, 0.5, &#39;(1, 0)&#39;) ## Text(0.5, 0.5, &#39;(1, 1)&#39;) ## Text(0.5, 0.5, &#39;(1, 2)&#39;) plt.show() plt.text(0.5, 0.5, &#39;one&#39;,fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;one&#39;) plt.show() 14.4.6.3 Share Y Axis Label fig, ax = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) # removed inner label plt.show() 14.4.6.4 Create Subplot Individually Each call lto subplot() will create a new container for subsequent plot command plt.subplot(2,4,1) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000006C50908&gt; plt.text(0.5, 0.5, &#39;one&#39;,fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;one&#39;) plt.subplot(2,4,8) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000009AE2A20&gt; plt.text(0.5, 0.5, &#39;eight&#39;,fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;eight&#39;) plt.show() Iterate through subplots (ax) to populate them fig, ax = plt.subplots(2, 3, sharex=&#39;col&#39;, sharey=&#39;row&#39;) for i in range(2): for j in range(3): ax[i, j].text(0.5, 0.5, str((i, j)), fontsize=18, ha=&#39;center&#39;) ## Text(0.5, 0.5, &#39;(0, 0)&#39;) ## Text(0.5, 0.5, &#39;(0, 1)&#39;) ## Text(0.5, 0.5, &#39;(0, 2)&#39;) ## Text(0.5, 0.5, &#39;(1, 0)&#39;) ## Text(0.5, 0.5, &#39;(1, 1)&#39;) ## Text(0.5, 0.5, &#39;(1, 2)&#39;) plt.show() 14.5 Histogram plt.hist(mydf.value1, bins=12); ## (array([ 2., 4., 10., 16., 35., 38., 31., 27., 22., 6., 6., 3.]), array([37.09329803, 39.25349925, 41.41370047, 43.57390169, 45.73410291, ## 47.89430413, 50.05450535, 52.21470657, 54.37490779, 56.53510901, ## 58.69531023, 60.85551145, 63.01571267]), &lt;a list of 12 Patch objects&gt;) plt.show() 14.6 Scatter Plot plt.scatter(mydf.value1, mydf.value2) ## &lt;matplotlib.collections.PathCollection object at 0x0000000009990EB8&gt; plt.show() 14.7 Bar Chart com_grp = mydf.groupby(&#39;comp&#39;) grpdf = com_grp[&#39;value1&#39;].sum().reset_index() grpdf ## comp value1 ## 0 C1 3988.891405 ## 1 C2 3007.230028 ## 2 C3 3017.883718 plt.bar(grpdf.comp, grpdf.value1); ## &lt;BarContainer object of 3 artists&gt; plt.xlabel(&#39;Company&#39;) ## Text(0.5, 0, &#39;Company&#39;) plt.ylabel(&#39;Sum of Value 1&#39;) ## Text(0, 0.5, &#39;Sum of Value 1&#39;) plt.show() "],
["seaborn.html", "15 seaborn 15.1 Seaborn and Matplotlib 15.2 Sample Data 15.3 Scatter Plot 15.4 Histogram 15.5 Bar Chart 15.6 Faceting 15.7 Pair Grid", " 15 seaborn 15.1 Seaborn and Matplotlib seaborn returns a matplotlib object that can be modified by the options in the pyplot module Often, these options are wrapped by seaborn and .plot() in pandas and available as arguments 15.2 Sample Data n = 100 comp = [&#39;C&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 3x Company dept = [&#39;D&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 5x Department grp = [&#39;G&#39; + i for i in np.random.randint( 1,4, size = n).astype(str)] # 2x Groups value1 = np.random.normal( loc=50 , scale=5 , size = n) value2 = np.random.normal( loc=20 , scale=3 , size = n) value3 = np.random.normal( loc=5 , scale=30 , size = n) mydf = pd.DataFrame({ &#39;comp&#39;:comp, &#39;dept&#39;:dept, &#39;grp&#39;: grp, &#39;value1&#39;:value1, &#39;value2&#39;:value2, &#39;value3&#39;:value3 }) mydf.head() ## comp dept grp value1 value2 value3 ## 0 C2 D2 G1 58.413310 17.257990 8.308861 ## 1 C2 D2 G1 40.941753 15.972926 -40.682326 ## 2 C1 D1 G2 50.870315 19.156772 11.312435 ## 3 C2 D1 G2 34.040375 20.682569 -2.149571 ## 4 C3 D2 G1 43.585637 20.666183 59.560983 15.3 Scatter Plot 15.3.1 2x Numeric sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x000000000994F3C8&gt; plt.show() sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, fit_reg=False, data=mydf); #hide regresion line ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009969978&gt; plt.show() 15.3.2 2xNumeric + 1x Categorical Use hue to represent additional categorical feature sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, data=mydf, hue=&#39;comp&#39;, fit_reg=False); ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009974AC8&gt; plt.show() 15.3.3 2xNumeric + 2x Categorical Use col and hue to represent two categorical features sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, fit_reg=False, data=mydf); ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009969EF0&gt; plt.show() 15.3.4 2xNumeric + 3x Categorical Use row, col and hue to represent three categorical features sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, row=&#39;dept&#39;,col=&#39;comp&#39;, hue=&#39;grp&#39;, fit_reg=False, data=mydf); ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000007617390&gt; plt.show() 15.3.5 Customization 15.3.5.1 size size: height in inch for each facet sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, size=3,fit_reg=False, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x00000000070474E0&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\regression.py:546: UserWarning: The `size` paramter has been renamed to `height`; please update your code. ## warnings.warn(msg, UserWarning) ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:311: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## fig, axes = plt.subplots(nrow, ncol, **kwargs) plt.show() Observe that even size is very large, lmplot will fit (shrink) everything into one row by deafult. See example below. sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, size=5,fit_reg=False, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x000000000672E470&gt; plt.show() 15.3.5.2 col_wrap To avoid lmplot from shrinking the chart, we use col_wrap=&lt;col_number to wrap the output. Compare the size (height of each facet) with the above without col_wrap. Below chart is larger. sns.lmplot(x=&#39;value1&#39;, y=&#39;value2&#39;, col=&#39;comp&#39;,hue=&#39;grp&#39;, size=5, col_wrap=2, fit_reg=False, data=mydf) ## &lt;seaborn.axisgrid.FacetGrid object at 0x00000000072A3588&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:320: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## fig = plt.figure(figsize=figsize) plt.show() 15.4 Histogram seaborn.distplot( a, # Series, 1D Array or List bins=None, hist=True, rug = False, vertical=False ) 15.4.1 1x Numeric sns.distplot(mydf.value1) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000098969B0&gt; plt.show() sns.distplot(mydf.value1,hist=True,rug=True,vertical=True, bins=30,color=&#39;g&#39;) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000072A3588&gt; plt.show() 15.5 Bar Chart com_grp = mydf.groupby(&#39;comp&#39;) grpdf = com_grp[&#39;value1&#39;].sum().reset_index() grpdf ## comp value1 ## 0 C1 1343.247772 ## 1 C2 1871.515883 ## 2 C3 1783.986137 15.5.1 1x Categorical, 1x Numeric sns.barplot(x=&#39;comp&#39;,y=&#39;value1&#39;,data=grpdf) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x00000000067F81D0&gt; plt.show() 15.5.2 Customization 15.5.2.1 Ordering sns.barplot(x=&#39;comp&#39;,y=&#39;value2&#39;, hue=&#39;grp&#39;, order=[&#39;C3&#39;,&#39;C2&#39;,&#39;C1&#39;], hue_order=[&#39;G1&#39;,&#39;G2&#39;,&#39;G3&#39;], data=mydf ) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x0000000006C58F60&gt; plt.show() 15.5.2.2 Flipping X/Y Axis sns.barplot(x=&#39;value2&#39;,y=&#39;comp&#39;, hue=&#39;grp&#39;,data=mydf) ## &lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000767EA20&gt; plt.show() 15.6 Faceting Faceting in Seaborn is a generic function that works with matplotlib various plot utility. It support matplotlib as well as seaborn plotting utility. 15.6.1 Faceting Histogram g = sns.FacetGrid(mydf, col=&quot;comp&quot;, row=&#39;dept&#39;) g.map(plt.hist, &quot;value1&quot;) ## &lt;seaborn.axisgrid.FacetGrid object at 0x0000000009809908&gt; plt.show() g = sns.FacetGrid(mydf, col=&quot;comp&quot;, row=&#39;dept&#39;) g.map(plt.hist, &quot;value1&quot;) ## &lt;seaborn.axisgrid.FacetGrid object at 0x000000000B5169B0&gt; plt.show() 15.6.2 Faceting Scatter Plot g = sns.FacetGrid(mydf, col=&quot;comp&quot;, row=&#39;dept&#39;,hue=&#39;grp&#39;) g.map(plt.scatter, &quot;value1&quot;,&quot;value2&quot;,alpha=0.7); ## &lt;seaborn.axisgrid.FacetGrid object at 0x000000000B5167F0&gt; g.add_legend() ## &lt;seaborn.axisgrid.FacetGrid object at 0x000000000B5167F0&gt; plt.show() 15.7 Pair Grid 15.7.1 Simple Pair Grid g = sns.PairGrid(mydf, hue=&#39;comp&#39;) ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py:1270: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## squeeze=False) g.map(plt.scatter); ## &lt;seaborn.axisgrid.PairGrid object at 0x00000000099F11D0&gt; g.add_legend() ## &lt;seaborn.axisgrid.PairGrid object at 0x00000000099F11D0&gt; plt.show() 15.7.2 Different Diag and OffDiag g = sns.PairGrid(mydf, hue=&#39;comp&#39;) g.map_diag(plt.hist, bins=15) ## &lt;seaborn.axisgrid.PairGrid object at 0x000000000997CE10&gt; g.map_offdiag(plt.scatter) ## &lt;seaborn.axisgrid.PairGrid object at 0x000000000997CE10&gt; g.add_legend() ## &lt;seaborn.axisgrid.PairGrid object at 0x000000000997CE10&gt; plt.show() "],
["plotnine.html", "16 plotnine 16.1 Histogram 16.2 Scatter Plot 16.3 Line Chart 16.4 Bar Chart", " 16 plotnine 16.1 Histogram 16.1.1 1xNumeric plotnine.ggplot( dataframe, aex(x=&#39;colName&#39;)) + geom_histogram( bins=10 ) plotnine.ggplot( dataframe, aex(x=&#39;colName&#39;)) + geom_histogram( binwidth=? ) plotnine.options.figure_size = (3, 3) ggplot(mydf, aes(x=&#39;value1&#39;)) + geom_histogram() # default bins = 10 ## &lt;ggplot: (7292210)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\stats\\stat_bin.py:93: UserWarning: &#39;stat_bin()&#39; using &#39;bins = 10&#39;. Pick better value with &#39;binwidth&#39;. ## warn(msg.format(params[&#39;bins&#39;])) ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;)) + geom_histogram(bins = 15) ## &lt;ggplot: (-9223372036847505997)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;)) + geom_histogram(binwidth = 3) ## &lt;ggplot: (10157807)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.1.2 1xNumeric + 1xCategorical plotnine.ggplot( dataframe, aes(x=&#39;colName&#39;), fill=&#39;categorical-alike-colName&#39;) + geom_histogram() ggplot(mydf, aes(x=&#39;value1&#39;, fill=&#39;grp&#39;)) + geom_histogram(bins=15) ## &lt;ggplot: (10087979)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.2 Scatter Plot 16.2.1 2x Numeric ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + geom_point() ## &lt;ggplot: (10128125)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.2.2 2x Numeric + 1x Categorical ggplot( DataFrame, aes(x=&#39;colName1&#39;,y=&#39;colName2&#39;)) + geom_point( aes( color=&#39;categorical-alike-colName&#39;, size=&#39;numberColName&#39; )) ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + geom_point(aes(color=&#39;grp&#39;)) ## &lt;ggplot: (10274487)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;,color=&#39;grp&#39;)) + geom_point() ## &lt;ggplot: (7512875)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + \\ geom_point(aes( color=&#39;grp&#39; )) ## &lt;ggplot: (-9223372036844652905)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.2.3 2x Numeric + 1x Numeric + 1x Categorical ggplot(mydf, aes(x=&#39;value1&#39;,y=&#39;value2&#39;)) + \\ geom_point(aes( color=&#39;grp&#39;, size=&#39;value3&#39; )) ## &lt;ggplot: (-9223372036844730820)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.2.4 Overlay Smooth Line ggplot(mydf, aes(x=&#39;value1&#39;, y=&#39;value2&#39;)) + \\ geom_point() + \\ geom_smooth() # default method=&#39;loess&#39; ## &lt;ggplot: (-9223372036847337735)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\stats\\smoothers.py:146: UserWarning: Confidence intervals are not yet implementedfor lowess smoothings. ## warnings.warn(&quot;Confidence intervals are not yet implemented&quot; ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot(mydf, aes(x=&#39;value1&#39;, y=&#39;value2&#39;,fill=&#39;grp&#39;)) + \\ geom_point() + \\ geom_smooth( se=True, color=&#39;red&#39;, method=&#39;lm&#39;, level=0.75) ## &lt;ggplot: (12632861)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.3 Line Chart 16.3.1 2x Numeric Data ggplot (mydf.head(15), aes(x=&#39;value1&#39;, y=&#39;value2&#39;)) + geom_line() ## &lt;ggplot: (-9223372036844851631)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.3.2 1x Numeric, 1x Categorical ggplot (mydf.head(15), aes(x=&#39;dept&#39;, y=&#39;value1&#39;)) + geom_line() ## &lt;ggplot: (10682930)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) ggplot (mydf.head(30), aes(x=&#39;dept&#39;, y=&#39;value1&#39;)) + geom_line( aes(group=1)) ## &lt;ggplot: (10650937)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\layer.py:517: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return not cbook.iterable(value) and (cbook.is_numlike(value) or ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\layer.py:517: MatplotlibDeprecationWarning: ## The is_numlike function was deprecated in Matplotlib 3.0 and will be removed in 3.2. Use isinstance(..., numbers.Number) instead. ## return not cbook.iterable(value) and (cbook.is_numlike(value) or ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.3.3 2x Numeric, 1x Categorical ggplot (mydf.head(15), aes(x=&#39;value1&#39;, y=&#39;value2&#39;)) + geom_line( aes(color=&#39;grp&#39;),size=2) ## &lt;ggplot: (-9223372036844597062)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) 16.4 Bar Chart 16.4.0.1 1x Categorical Single categorical variable produces frequency chart. tmpdf = mydf.groupby([&#39;comp&#39;],as_index=False).count() tmpdf ## comp dept grp value1 value2 value3 ## 0 C1 27 27 27 27 27 ## 1 C2 37 37 37 37 37 ## 2 C3 36 36 36 36 36 tmpdf.info() ## &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; ## Int64Index: 3 entries, 0 to 2 ## Data columns (total 6 columns): ## comp 3 non-null object ## dept 3 non-null int64 ## grp 3 non-null int64 ## value1 3 non-null int64 ## value2 3 non-null int64 ## value3 3 non-null int64 ## dtypes: int64(5), object(1) ## memory usage: 168.0+ bytes ggplot (tmpdf, aes(x=&#39;comp&#39;, y=&#39;grp&#39;)) +geom_col() ## &lt;ggplot: (-9223372036847257575)&gt; ## ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\scales\\scale.py:93: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## if cbook.iterable(self.breaks) and cbook.iterable(self.labels): ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\ggplot.py:367: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). ## figure = plt.figure() ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\plotnine\\utils.py:553: MatplotlibDeprecationWarning: ## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead. ## return cbook.iterable(var) and not is_string(var) "],
["sklearn.html", "17 sklearn 17.1 Setup (hidden) 17.2 The Library 17.3 Model Fitting 17.4 Model Tuning 17.5 High Level ML Process 17.6 Built-in Datasets 17.7 Train Test Data Splitting 17.8 Polynomial Transform 17.9 Imputation of Missing Data 17.10 Scaling 17.11 Pipeline 17.12 Cross Validation", " 17 sklearn This is a machine learning library. 17.1 Setup (hidden) from IPython.core.display import display, HTML display(HTML(&quot;&lt;style&gt;.container { width:75% !important; margin-left:350px; }&lt;/style&gt;&quot;)) #matplotlib inline ## &lt;IPython.core.display.HTML object&gt; import numpy as np import pandas as pd import matplotlib.pyplot as plt import math pd.set_option( &#39;display.notebook_repr_html&#39;, False) # render Series and DataFrame as text, not HTML pd.set_option( &#39;display.max_column&#39;, 10) # number of columns pd.set_option( &#39;display.max_rows&#39;, 10) # number of rows pd.set_option( &#39;display.width&#39;, 90) # number of characters per row import matplotlib.pyplot as plt 17.2 The Library sklearn does not automatically import its subpackages. Therefore all subpakcages must be specifically loaded before use. # Sample Data from sklearn import datasets # Model Selection from sklearn.model_selection import train_test_split from sklearn.model_selection import KFold from sklearn.model_selection import LeaveOneOut from sklearn.model_selection import cross_validate # Preprocessing from sklearn.preprocessing import Imputer from sklearn.preprocessing import MinMaxScaler from sklearn.preprocessing import StandardScaler from sklearn.preprocessing import Normalizer from sklearn.preprocessing import PolynomialFeatures # Model and Pipeline from sklearn.linear_model import LinearRegression,Lasso from sklearn.pipeline import make_pipeline # Measurement from sklearn.metrics import * import statsmodels.formula.api as smf 17.3 Model Fitting split 17.3.1 Underfitting The model does not fit the training data and therefore misses the trends in the data The model cannot be generalized to new data, this is usually the result of a very simple model (not enough predictors/independent variables) The model will have poor predictive ability For example, we fit a linear model (like linear regression) to data that is not linear 17.3.2 Overfitting The model has trained ?too well? and is now, well, fit too closely to the training dataset The model is too complex (i.e. too many features/variables compared to the number of observations) The model will be very accurate on the training data but will probably be very not accurate on untrained or new data The model is not generalized (or not AS generalized), meaning you can generalize the results The model learns or describes the ?noise? in the training data instead of the actual relationships between variables in the data 17.3.3 Just Right It is worth noting the underfitting is not as prevalent as overfitting Nevertheless, we want to avoid both of those problems in data analysis We want to find the middle ground between under and overfitting our model 17.4 Model Tuning A highly complex model tend to overfit A too flexible model tend to underfit Complexity can be reduced by: - Less features - Less degree of polynomial features - Apply generalization (tuning hyperparameters) split 17.5 High Level ML Process split 17.6 Built-in Datasets sklearn included some popular datasets to play with Each dataset is of type Bunch. It has useful data (array) in the form of properties: - keys (display all data availabe within the dataset) - data (common) - target (common) - DESCR (common) - feature_names (some dataset) - target_names (some dataset) - images (some dataset) 17.6.1 diabetes (regression) 17.6.1.1 Load Dataset diabetes = datasets.load_diabetes() print (type(diabetes)) ## &lt;class &#39;sklearn.utils.Bunch&#39;&gt; 17.6.1.2 keys diabetes.keys() ## dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;data_filename&#39;, &#39;target_filename&#39;]) 17.6.1.3 Features and Target .data = features - two dimension array .target = target - one dimension array print (type(diabetes.data)) ## &lt;class &#39;numpy.ndarray&#39;&gt; print (type(diabetes.target)) ## &lt;class &#39;numpy.ndarray&#39;&gt; print (diabetes.data.shape) ## (442, 10) print (diabetes.target.shape) ## (442,) 17.6.1.4 Load with X,y (Convenient Method) using return_X_y = True, data is loaded into X, target is loaded into y X,y = datasets.load_diabetes(return_X_y=True) print (X.shape) ## (442, 10) print (y.shape) ## (442,) 17.6.2 digits (Classification) This is a copy of the test set of the UCI ML hand-written digits datasets digits = datasets.load_digits() print (type(digits)) ## &lt;class &#39;sklearn.utils.Bunch&#39;&gt; print (type(digits.data)) ## &lt;class &#39;numpy.ndarray&#39;&gt; digits.keys() ## dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;target_names&#39;, &#39;images&#39;, &#39;DESCR&#39;]) digits.target_names ## array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 17.6.2.1 data digits.data.shape # features ## (1797, 64) digits.target.shape # target ## (1797,) 17.6.2.2 Images images is 3 dimensional array There are 1797 samples, each sample is 8x8 pixels digits.images.shape ## (1797, 8, 8) type(digits.images) ## &lt;class &#39;numpy.ndarray&#39;&gt; Each element represent the data that make its target print (digits.target[100]) ## 4 print (digits.images[100]) ## [[ 0. 0. 0. 2. 13. 0. 0. 0.] ## [ 0. 0. 0. 8. 15. 0. 0. 0.] ## [ 0. 0. 5. 16. 5. 2. 0. 0.] ## [ 0. 0. 15. 12. 1. 16. 4. 0.] ## [ 0. 4. 16. 2. 9. 16. 8. 0.] ## [ 0. 0. 10. 14. 16. 16. 4. 0.] ## [ 0. 0. 0. 0. 13. 8. 0. 0.] ## [ 0. 0. 0. 0. 13. 6. 0. 0.]] plt.matshow(digits.images[100]) ## &lt;matplotlib.image.AxesImage object at 0x0000000009798CC0&gt; ## ## C:/ProgramData/Anaconda3/python.exe:1: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). 17.6.2.3 Loading Into X,y (Convenient Method) X,y = datasets.load_digits(return_X_y=True) X.shape ## (1797, 64) y.shape ## (1797,) 17.6.3 iris (Classification) iris = datasets.load_iris() iris.keys() ## dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;]) 17.6.3.1 Feature Names iris.feature_names ## [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;] 17.6.3.2 target iris.target_names ## array([&#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;], dtype=&#39;&lt;U10&#39;) iris.target ## array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ## 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ## 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ## 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ## 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ## 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ## 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) 17.7 Train Test Data Splitting 17.7.1 Sample Data Generate 100 rows of data, with 3x features (X1,X2,X3), and one dependant variable (Y) n = 21 # number of samples I = 5 # intercept value E = np.random.randint( 1,20, n) # Error x1 = np.random.randint( 1,n+1, n) x2 = np.random.randint( 1,n+1, n) x3 = np.random.randint( 1,n+1, n) y = 0.1*x1 + 0.2*x2 + 0.3*x3 + E + I mydf = pd.DataFrame({ &#39;y&#39;:y, &#39;x1&#39;:x1, &#39;x2&#39;:x2, &#39;x3&#39;:x3 }) mydf.shape ## (21, 4) 17.7.2 One Time Split sklearn::train_test_split() has two forms: - Take one DF, split into 2 DF (most of sklearn modeling use this method - Take two DFs, split into 4 DF mydf.head() ## y x1 x2 x3 ## 0 14.4 14 7 12 ## 1 14.3 18 5 5 ## 2 26.4 14 11 6 ## 3 14.8 3 21 1 ## 4 11.5 4 13 5 17.7.2.1 Method 1: Split One Dataframe Into Two (Train &amp; Test) traindf, testdf = train_test_split( df, test_size=, random_state= ) # random_state : seed number (integer), optional # test_size : fraction of 1, 0.2 means 20% split traindf, testdf = train_test_split(mydf,test_size=0.2, random_state=25) print (len(traindf)) ## 16 print (len(testdf)) ## 5 17.7.2.2 Method 2: Split Two DataFrame (X,Y) into Four x_train/test, y_train/test x_train, x_test, y_train, y_test = train_test_split( X,Y, test_size=, random_state= ) # random_state : seed number (integer), optional # test_size : fraction of 1, 0.2 means 20% split Split DataFrame into X and Y First feature_cols = [&#39;x1&#39;,&#39;x2&#39;,&#39;x3&#39;] X = mydf[feature_cols] Y = mydf.y Then Split X/Y into x_train/test, y_train/test x_train, x_test, y_train, y_test = train_test_split( X,Y, test_size=0.2, random_state=25) print (len(x_train)) ## 16 print (len(x_test)) ## 5 17.7.3 K-Fold KFold(n_splits=3, shuffle=False, random_state=None) split suffle=False (default), meaning index number is taken continously kf = KFold(n_splits=7) for train_index, test_index in kf.split(X): print (train_index, test_index) ## [ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [0 1 2] ## [ 0 1 2 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [3 4 5] ## [ 0 1 2 3 4 5 9 10 11 12 13 14 15 16 17 18 19 20] [6 7 8] ## [ 0 1 2 3 4 5 6 7 8 12 13 14 15 16 17 18 19 20] [ 9 10 11] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 15 16 17 18 19 20] [12 13 14] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 18 19 20] [15 16 17] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17] [18 19 20] shuffle=True kf = KFold(n_splits=7, shuffle=True) for train_index, test_index in kf.split(X): print (train_index, test_index) ## [ 0 1 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 19] [ 5 18 20] ## [ 0 1 3 4 5 6 7 8 10 11 12 13 15 16 17 18 19 20] [ 2 9 14] ## [ 0 1 2 3 4 5 6 7 8 9 11 12 14 15 16 17 18 20] [10 13 19] ## [ 1 2 3 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20] [ 0 4 16] ## [ 0 2 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20] [ 1 3 11] ## [ 0 1 2 3 4 5 6 9 10 11 12 13 14 15 16 18 19 20] [ 7 8 17] ## [ 0 1 2 3 4 5 7 8 9 10 11 13 14 16 17 18 19 20] [ 6 12 15] 17.7.4 Leave One Out For a dataset of N rows, Leave One Out will split N-1 times, each time leaving one row as test, remaning as training set. Due to the high number of test sets (which is the same as the number of samples-1) this cross-validation method can be very costly. For large datasets one should favor KFold. loo = LeaveOneOut() for train_index, test_index in loo.split(X): print (train_index, test_index) ## [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [0] ## [ 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [1] ## [ 0 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [2] ## [ 0 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [3] ## [ 0 1 2 3 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [4] ## [ 0 1 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [5] ## [ 0 1 2 3 4 5 7 8 9 10 11 12 13 14 15 16 17 18 19 20] [6] ## [ 0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 16 17 18 19 20] [7] ## [ 0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20] [8] ## [ 0 1 2 3 4 5 6 7 8 10 11 12 13 14 15 16 17 18 19 20] [9] ## [ 0 1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20] [10] ## [ 0 1 2 3 4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20] [11] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20] [12] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20] [13] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 16 17 18 19 20] [14] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20] [15] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20] [16] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 20] [17] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 20] [18] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20] [19] ## [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19] [20] X ## x1 x2 x3 ## 0 14 7 12 ## 1 18 5 5 ## 2 14 11 6 ## 3 3 21 1 ## 4 4 13 5 ## .. .. .. .. ## 16 1 3 13 ## 17 8 2 19 ## 18 15 14 9 ## 19 2 17 4 ## 20 5 9 7 ## ## [21 rows x 3 columns] 17.8 Polynomial Transform This can be used as part of feature engineering, to introduce new features for data that seems to fit with quadradic model. 17.8.1 Single Variable 17.8.1.1 Sample Data Data must be 2-D before polynomial features can be applied. Code below convert 1D array into 2D array. x = np.array([1, 2, 3, 4, 5]) X = x[:,np.newaxis] X ## array([[1], ## [2], ## [3], ## [4], ## [5]]) 17.8.1.2 Degree 1 One Degree means maintain original features. No new features is created. PolynomialFeatures(degree=1, include_bias=False).fit_transform(X) ## array([[1.], ## [2.], ## [3.], ## [4.], ## [5.]]) 17.8.1.3 Degree 2 Degree-1 original feature: x Degree-2 additional features: x^2 PolynomialFeatures(degree=2, include_bias=False).fit_transform(X) ## array([[ 1., 1.], ## [ 2., 4.], ## [ 3., 9.], ## [ 4., 16.], ## [ 5., 25.]]) 17.8.1.4 Degree 3 Degree-1 original feature: x Degree-2 additional features: x^2 Degree-3 additional features: x^3 PolynomialFeatures(degree=3, include_bias=False).fit_transform(X) ## array([[ 1., 1., 1.], ## [ 2., 4., 8.], ## [ 3., 9., 27.], ## [ 4., 16., 64.], ## [ 5., 25., 125.]]) 17.8.1.5 Degree 4 Degree-1 original feature: x Degree-2 additional features: x^2 Degree-3 additional features: x^3 Degree-3 additional features: x^4 PolynomialFeatures(degree=4, include_bias=False).fit_transform(X) ## array([[ 1., 1., 1., 1.], ## [ 2., 4., 8., 16.], ## [ 3., 9., 27., 81.], ## [ 4., 16., 64., 256.], ## [ 5., 25., 125., 625.]]) 17.8.2 Two Variables 17.8.2.1 Sample Data X = pd.DataFrame( {&#39;x1&#39;: [1, 2, 3, 4, 5 ], &#39;x2&#39;: [6, 7, 8, 9, 10]}) X ## x1 x2 ## 0 1 6 ## 1 2 7 ## 2 3 8 ## 3 4 9 ## 4 5 10 17.8.2.2 Degree 2 Degree-1 original features: x1, x2 Degree-2 additional features: x1^2, x2^2, x1:x2 PolynomialFeatures(degree=2, include_bias=False).fit_transform(X) ## array([[ 1., 6., 1., 6., 36.], ## [ 2., 7., 4., 14., 49.], ## [ 3., 8., 9., 24., 64.], ## [ 4., 9., 16., 36., 81.], ## [ 5., 10., 25., 50., 100.]]) 17.8.2.3 Degree 3 Degree-1 original features: x1, x2 Degree-2 additional features: x1^2, x2^2, x1:x2 Degree-3 additional features: x1^3, x2^3 x1:x2^2 x2:x1^2 PolynomialFeatures(degree=3, include_bias=False).fit_transform(X) ## array([[ 1., 6., 1., 6., 36., 1., 6., 36., 216.], ## [ 2., 7., 4., 14., 49., 8., 28., 98., 343.], ## [ 3., 8., 9., 24., 64., 27., 72., 192., 512.], ## [ 4., 9., 16., 36., 81., 64., 144., 324., 729.], ## [ 5., 10., 25., 50., 100., 125., 250., 500., 1000.]]) 17.9 Imputation of Missing Data 17.9.1 Sample Data from numpy import nan X = np.array([[ nan, 0, 3 ], [ 3, 7, 9 ], [ 3, 5, 2 ], [ 4, nan, 6 ], [ 8, 8, 1 ]]) y = np.array([14, 16, -1, 8, -5]) 17.9.2 Imputer 17.9.2.1 mean strategy imp = Imputer(strategy=&#39;mean&#39;) ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:66: DeprecationWarning: Class Imputer is deprecated; Imputer was deprecated in version 0.20 and will be removed in 0.22. Import impute.SimpleImputer from sklearn instead. ## warnings.warn(msg, category=DeprecationWarning) X2 = imp.fit_transform(X) X2 ## array([[4.5, 0. , 3. ], ## [3. , 7. , 9. ], ## [3. , 5. , 2. ], ## [4. , 5. , 6. ], ## [8. , 8. , 1. ]]) 17.10 Scaling It is possible that some insignificant variable with larger range will be dominating the objective function. We can remove this problem by scaling down all the features to a same range. 17.10.1 Sample Data X=mydf.filter(like=&#39;x&#39;)[:5] X ## x1 x2 x3 ## 0 14 7 12 ## 1 18 5 5 ## 2 14 11 6 ## 3 3 21 1 ## 4 4 13 5 17.10.2 MinMax Scaler MinMaxScaler( feature_range(0,1), copy=True ) # default feature range (output result) from 0 to 1 # default return a copy of new array, copy=False will inplace original array Define Scaler Object scaler = MinMaxScaler() Transform Data scaler.fit_transform(X) ## array([[0.73333333, 0.125 , 1. ], ## [1. , 0. , 0.36363636], ## [0.73333333, 0.375 , 0.45454545], ## [0. , 1. , 0. ], ## [0.06666667, 0.5 , 0.36363636]]) Scaler Attributes data_min_: minimum value of the feature (before scaling) data_max_: maximum value of the feature (before scaling) pd.DataFrame(list(zip(scaler.data_min_, scaler.data_max_)), columns=[&#39;data_min&#39;,&#39;data_max&#39;], index=X.columns) ## data_min data_max ## x1 3.0 18.0 ## x2 5.0 21.0 ## x3 1.0 12.0 17.10.3 Standard Scaler It is most suitable for techniques that assume a Gaussian distribution in the input variables and work better with rescaled data, such as linear regression, logistic regression and linear discriminate analysis. StandardScaler(copy=True, with_mean=True, with_std=True) # copy=True : return a copy of data, instead of inplace # with_mean=True : centre all features by substracting with its mean # with_std=True : centre all features by dividing with its std Define Scaler Object scaler = StandardScaler() Transform Data scaler.fit_transform(X) ## array([[ 0.56793014, -0.78975397, 1.74943121], ## [ 1.23608324, -1.14873305, -0.22573306], ## [ 0.56793014, -0.07179582, 0.05643326], ## [-1.2694909 , 1.72309958, -1.35439836], ## [-1.10245262, 0.28718326, -0.22573306]]) Scaler Attributes After the data transformation step above, scaler will have the mean and variance information for each feature. pd.DataFrame(list(zip(scaler.mean_, scaler.var_)), columns=[&#39;mean&#39;,&#39;variance&#39;], index=X.columns) ## mean variance ## x1 10.6 35.84 ## x2 11.4 31.04 ## x3 5.8 12.56 17.11 Pipeline With any of the preceding examples, it can quickly become tedious to do the transformations by hand, especially if you wish to string together multiple steps. For example, we might want a processing pipeline that looks something like this: Impute missing values using the mean Transform features to quadratic Fit a linear regression make_pipeline takes list of functions as parameters. When calling fit() on a pipeline object, these functions will be performed in sequential with data flow from one function to another. make_pipeline ( function_1 (), function_2 (), function_3 () ) 17.11.1 Sample Data X ## x1 x2 x3 ## 0 14 7 12 ## 1 18 5 5 ## 2 14 11 6 ## 3 3 21 1 ## 4 4 13 5 y ## array([14, 16, -1, 8, -5]) 17.11.2 Create Pipeline my_pipe = make_pipeline ( Imputer (strategy=&#39;mean&#39;), PolynomialFeatures (degree=2), LinearRegression () ) ## C:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\deprecation.py:66: DeprecationWarning: Class Imputer is deprecated; Imputer was deprecated in version 0.20 and will be removed in 0.22. Import impute.SimpleImputer from sklearn instead. ## warnings.warn(msg, category=DeprecationWarning) type(my_pipe) ## &lt;class &#39;sklearn.pipeline.Pipeline&#39;&gt; my_pipe ## Pipeline(memory=None, ## steps=[(&#39;imputer&#39;, ## Imputer(axis=0, copy=True, missing_values=&#39;NaN&#39;, ## strategy=&#39;mean&#39;, verbose=0)), ## (&#39;polynomialfeatures&#39;, ## PolynomialFeatures(degree=2, include_bias=True, ## interaction_only=False, order=&#39;C&#39;)), ## (&#39;linearregression&#39;, ## LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, ## normalize=False))], ## verbose=False) 17.11.3 Executing Pipeline my_pipe.fit( X, y) # execute the pipeline ## Pipeline(memory=None, ## steps=[(&#39;imputer&#39;, ## Imputer(axis=0, copy=True, missing_values=&#39;NaN&#39;, ## strategy=&#39;mean&#39;, verbose=0)), ## (&#39;polynomialfeatures&#39;, ## PolynomialFeatures(degree=2, include_bias=True, ## interaction_only=False, order=&#39;C&#39;)), ## (&#39;linearregression&#39;, ## LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, ## normalize=False))], ## verbose=False) print (y) ## [14 16 -1 8 -5] print (my_pipe.predict(X)) ## [14. 16. -1. 8. -5.] type(my_pipe) ## &lt;class &#39;sklearn.pipeline.Pipeline&#39;&gt; 17.12 Cross Validation 17.12.1 Load Data X,y = datasets.load_diabetes(return_X_y=True) 17.12.2 Choose An Cross Validator kf = KFold(n_splits=5) 17.12.3 Run Cross Validation Single Scorer Use default scorer of the estimator (if available) lasso = Lasso() cv_results1 = cross_validate(lasso, X,y,cv=kf, return_train_score=False) Multiple Scorer Specify the scorer http://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter cv_results2 = cross_validate(lasso, X,y,cv=kf, scoring=(&quot;neg_mean_absolute_error&quot;,&quot;neg_mean_squared_error&quot;,&quot;r2&quot;), return_train_score=False) 17.12.4 The Result Result is a dictionary cv_results1.keys() ## dict_keys([&#39;fit_time&#39;, &#39;score_time&#39;, &#39;test_score&#39;]) cv_results2.keys() ## dict_keys([&#39;fit_time&#39;, &#39;score_time&#39;, &#39;test_neg_mean_absolute_error&#39;, &#39;test_neg_mean_squared_error&#39;, &#39;test_r2&#39;]) cv_results1 ## {&#39;fit_time&#39;: array([0.00098491, 0.00100255, 0.00199962, 0. , 0.00099802]), &#39;score_time&#39;: array([0.00099778, 0.00099778, 0. , 0.00100255, 0. ]), &#39;test_score&#39;: array([0.28349047, 0.35157959, 0.3533813 , 0.33481474, 0.36453281])} cv_results2 ## {&#39;fit_time&#39;: array([0.00200033, 0.00100327, 0.00099897, 0.00099897, 0.00100183]), &#39;score_time&#39;: array([0.00200057, 0.00099993, 0.00099874, 0. , 0.0009985 ]), &#39;test_neg_mean_absolute_error&#39;: array([-50.09003423, -52.54110842, -55.02813846, -50.81121806, ## -55.60471593]), &#39;test_neg_mean_squared_error&#39;: array([-3491.74009759, -4113.86002091, -4046.91780932, -3489.74018715, ## -4111.92401769]), &#39;test_r2&#39;: array([0.28349047, 0.35157959, 0.3533813 , 0.33481474, 0.36453281])} "],
["nlp.html", "18 NLP 18.1 Regular Expression 18.2 Word Tokenizer 18.3 Sentence Tokenizer 18.4 N-Gram 18.5 Stopwords 18.6 Normalizing 18.7 POS Tagging 18.8 Sentiment 18.9 Feature Representation 18.10 Appliction 18.11 Naive Bayes", " 18 NLP Natural Language Processing 18.1 Regular Expression Rgular expressions (called REs or regexes) is mandatory skill for NLP. The re is a **built-in* library It is essentially a tiny, highly specialized programming language embedded inside Python and made available through the re module Regular expression patterns are compiled into a series of bytecodes which are then executed by a matching engine written in C 18.1.1 Syntax There are two methods to emply re. Below method compile a regex first, then apply it multiple times in subsequent code. import re pattern = re.compile(r&#39;put pattern here&#39;) pattern.match(&#39;put text here&#39;) Second method below employ compile and match in single line. The pattern cannot be reused, therefore good for onetime usage only. import re pattern = (r&#39;put pattern here&#39;) re.match(pattern, r&#39;put text here&#39;) # compile and match in single line 18.1.2 Finding 18.1.2.1 Find The First Match There are two ways to find the first match: - re.search find first match anywhere in text, including multiline - re.match find first match at the BEGINNING of text, similar to re.searchwith ^ - Both returns first match, return MatchObject - Both returns None if no match is found pattern1 = re.compile(&#39;123&#39;) pattern2 = re.compile(&#39;123&#39;) pattern3 = re.compile(&#39;^123&#39;) # equivalent to above text = &#39;abc123xyz&#39; ## Single Line Text Example print( &#39;re.search found a match somewhere:\\n&#39;, pattern1.search(text), &#39;\\n&#39;, ## found &#39;\\nre.match did not find anything at the beginning:\\n&#39;, pattern2.match(text), &#39;\\n&#39;, &#39;\\nre.search did not find anything at beginning too:\\n&#39;, pattern3.search(text)) ## None ## re.search found a match somewhere: ## &lt;re.Match object; span=(3, 6), match=&#39;123&#39;&gt; ## ## re.match did not find anything at the beginning: ## None ## ## re.search did not find anything at beginning too: ## None Returned MatchObject provides useful information about the matched string. age_pattern = re.compile(r&#39;\\d+&#39;) age_text = &#39;Ali is my teacher. He is 109 years old. his kid is 40 years old.&#39; first_found = age_pattern.search(age_text) print(&#39;Found Object: &#39;, first_found, &#39;\\nInput Text: &#39;,first_found.string, &#39;\\nInput Pattern: &#39;,first_found.re, &#39;\\nFirst Found string: &#39;,first_found.group(), &#39;\\nFound Start Position: &#39;, first_found.start(), &#39;\\nFound End Position: &#39;, first_found.end(), &#39;\\nFound Span: &#39;, first_found.span(),) ## Found Object: &lt;re.Match object; span=(25, 28), match=&#39;109&#39;&gt; ## Input Text: Ali is my teacher. He is 109 years old. his kid is 40 years old. ## Input Pattern: re.compile(&#39;\\\\d+&#39;) ## First Found string: 109 ## Found Start Position: 25 ## Found End Position: 28 ## Found Span: (25, 28) 18.1.2.2 Find All Matches findall() returns all matching string as list. If no matches found, it return an empty list. print( &#39;Finding Two Digits:&#39;, re.findall(r&#39;\\d\\d&#39;,&#39;abc123xyz456&#39;), &#39;\\n&#39;, &#39;\\nFound Nothing:&#39;, re.findall(r&#39;\\d\\d&#39;,&#39;abcxyz&#39;)) ## Finding Two Digits: [&#39;12&#39;, &#39;45&#39;] ## ## Found Nothing: [] 18.1.3 Matching Condition 18.1.3.1 Meta Characters [] match any single character within the bracket [1234] is the same as [1-4] [0-39] is the same as [01239] [a-e] is the same as [abcde] [^abc] means any character except a,b,c [^0-9] means any character except 0-9 a|b: a or b {n,m} at least n repetition, but maximum m repetition () grouping pattern = re.compile(r&#39;[a-z]+&#39;) text1 = &quot;tempo&quot; text2 = &quot;tempo1&quot; text3 = &quot;123 tempo1&quot; text4 = &quot; tempo&quot; print( &#39;Matching Text1:&#39;, pattern.match(text1), &#39;\\nMatching Text2:&#39;, pattern.match(text2), &#39;\\nMatching Text3:&#39;, pattern.match(text3), &#39;\\nMatching Text4:&#39;, pattern.match(text4)) ## Matching Text1: &lt;re.Match object; span=(0, 5), match=&#39;tempo&#39;&gt; ## Matching Text2: &lt;re.Match object; span=(0, 5), match=&#39;tempo&#39;&gt; ## Matching Text3: None ## Matching Text4: None 18.1.3.2 Special Sequence . : [^\\n] \\d: [0-9] \\D: [^0-9] \\s: [ \\t\\n\\r\\f\\v] \\S: [^ \\t\\n\\r\\f\\v] \\w: [a-zA-Z0-9_] \\W: [^a-zA-Z0-9_] \\t: tab \\n: newline \\b: word boundry (delimited by space, \\t, \\n) Word Boundry Using \\b: \\bABC match if specified characters at the beginning of word (delimited by space, ), or beginning of newline ABC\\b match if specified characters at the end of word (delimited by space, ), or end of the line text = &quot;ABCD ABC XYZABC&quot; pattern1 = re.compile(r&#39;\\bABC&#39;) pattern2 = re.compile(r&#39;ABC\\b&#39;) pattern3 = re.compile(r&#39;\\bABC\\b&#39;) print(&#39;Match word that begins ABC:&#39;, pattern1.findall(text), &#39;\\n&#39;, &#39;Match word that ends with ABC:&#39;, pattern2.findall(text),&#39;\\n&#39;, &#39;Match isolated word with ABC:&#39;, pattern3.findall(text)) ## Match word that begins ABC: [&#39;ABC&#39;, &#39;ABC&#39;] ## Match word that ends with ABC: [&#39;ABC&#39;, &#39;ABC&#39;] ## Match isolated word with ABC: [&#39;ABC&#39;] 18.1.3.3 Repetition When repetition is used, re will be greedy; it try to repeat as many times as possible. If later portions of the pattern don’t match, the matching engine will then back up and try again with fewer repetitions. ?: zero or 1 occurance *: zero or more occurance +: one or more occurance ? Zero or 1 Occurance text = &#39;abcbcdd&#39; pattern = re.compile(r&#39;a[bcd]?b&#39;) pattern.findall(text) ## [&#39;ab&#39;] + At Least One Occurance text = &#39;abcbcdd&#39; pattern = re.compile(r&#39;a[bcd]+b&#39;) pattern.findall(text) ## [&#39;abcb&#39;] * Zero Or More Occurance Occurance text = &#39;abcbcdd&#39; pattern = re.compile(r&#39;a[bcd]*b&#39;) pattern.findall(text) ## [&#39;abcb&#39;] 18.1.4 Grouping When () is used in the pattern, retrive the grouping components in MatchObject with .groups(). Result is in list. Example below extract hours, minutes and am/pm into a list. text = &#39;Today at Wednesday, 10:50pm, we go for a walk&#39; pattern = re.compile(r&#39;(\\d\\d):(\\d\\d)(am|pm)&#39;) m = pattern.search(text) print(m.groups()) ## (&#39;10&#39;, &#39;50&#39;, &#39;pm&#39;) 18.1.5 Splittitng Pattern is used to match delimters. 18.1.5.1 Use re.split() print( re.split(&#39;@&#39;, &quot;aa@bb @ cc &quot;), &#39;\\n&#39;, re.split(&#39;\\|&#39;, &quot;aa|bb | cc &quot;), &#39;\\n&#39;, re.split(&#39;\\n&#39;, &quot;sentence1\\nsentence2\\nsentence3&quot;) ) ## [&#39;aa&#39;, &#39;bb &#39;, &#39; cc &#39;] ## [&#39;aa&#39;, &#39;bb &#39;, &#39; cc &#39;] ## [&#39;sentence1&#39;, &#39;sentence2&#39;, &#39;sentence3&#39;] 18.1.5.2 Use re.comple().split() pattern = re.compile(r&quot;\\|&quot;) pattern.split(&quot;aa|bb | cc &quot;) ## [&#39;aa&#39;, &#39;bb &#39;, &#39; cc &#39;] 18.2 Word Tokenizer 18.2.1 Custom Tokenizer 18.2.1.1 Split By Regex Pattern Use regex to split words based on specific punctuation as delimeter. The rule is: split input text when any one or more continuous occurances of specified character. import re pattern = re.compile(r&quot;[-\\s.,;!?]+&quot;) pattern.split(&quot;hi @ali--baba, you are aweeeeeesome! isn&#39;t it. Believe it.:)&quot;) ## [&#39;hi&#39;, &#39;@ali&#39;, &#39;baba&#39;, &#39;you&#39;, &#39;are&#39;, &#39;aweeeeeesome&#39;, &quot;isn&#39;t&quot;, &#39;it&#39;, &#39;Believe&#39;, &#39;it&#39;, &#39;:)&#39;] 18.2.1.2 Pick By Regex Pattern nltk.tokenize.RegexpTokenizer Any sequence of chars fall within the bracker is considered tokens from nltk.tokenize import RegexpTokenizer my_tokenizer = RegexpTokenizer(r&#39;[a-zA-Z0-9\\&#39;]+&#39;) my_tokenizer.tokenize(&quot;hi @ali--baba, you are aweeeeeesome! isn&#39;t it. Believe it.:&quot;) ## [&#39;hi&#39;, &#39;ali&#39;, &#39;baba&#39;, &#39;you&#39;, &#39;are&#39;, &#39;aweeeeeesome&#39;, &quot;isn&#39;t&quot;, &#39;it&#39;, &#39;Believe&#39;, &#39;it&#39;] 18.2.2 nltk.tokenize.word_tokenize() Words and punctuations are splitted into tokens from nltk.tokenize import word_tokenize print( word_tokenize(&quot;hi @ali-baba, you are aweeeeeesome! isn&#39;t it. Believe it.:)&quot;) ) ## [&#39;hi&#39;, &#39;@&#39;, &#39;ali-baba&#39;, &#39;,&#39;, &#39;you&#39;, &#39;are&#39;, &#39;aweeeeeesome&#39;, &#39;!&#39;, &#39;is&#39;, &quot;n&#39;t&quot;, &#39;it&#39;, &#39;.&#39;, &#39;Believe&#39;, &#39;it&#39;, &#39;.&#39;, &#39;:&#39;, &#39;)&#39;] 18.2.3 nltk.tokenize.casual.casual_tokenize() Support emoji Support reduction of repetition chars Support removing userid ((???)) Good for social media text from nltk.tokenize.casual import casual_tokenize ## default print( casual_tokenize(&quot;hi @ali-baba, you are aweeeeeesome! isn&#39;t it. Believe it. :)&quot;) ) ## shorten repeated chars ## [&#39;hi&#39;, &#39;@ali&#39;, &#39;-&#39;, &#39;baba&#39;, &#39;,&#39;, &#39;you&#39;, &#39;are&#39;, &#39;aweeeeeesome&#39;, &#39;!&#39;, &quot;isn&#39;t&quot;, &#39;it&#39;, &#39;.&#39;, &#39;Believe&#39;, &#39;it&#39;, &#39;.&#39;, &#39;:)&#39;] print( casual_tokenize(&quot;hi @ali-baba, you are aweeeeeesome! isn&#39;t it. Believe it.:)&quot;, reduce_len=True)) ## shorten repeated chars, stirp usernames ## [&#39;hi&#39;, &#39;@ali&#39;, &#39;-&#39;, &#39;baba&#39;, &#39;,&#39;, &#39;you&#39;, &#39;are&#39;, &#39;aweeesome&#39;, &#39;!&#39;, &quot;isn&#39;t&quot;, &#39;it&#39;, &#39;.&#39;, &#39;Believe&#39;, &#39;it&#39;, &#39;.&#39;, &#39;:)&#39;] print( casual_tokenize(&quot;hi @ali-baba, you are aweeeeeesome! isn&#39;t it. Believe it.:)&quot;, reduce_len=True, strip_handles=True)) ## [&#39;hi&#39;, &#39;-&#39;, &#39;baba&#39;, &#39;,&#39;, &#39;you&#39;, &#39;are&#39;, &#39;aweeesome&#39;, &#39;!&#39;, &quot;isn&#39;t&quot;, &#39;it&#39;, &#39;.&#39;, &#39;Believe&#39;, &#39;it&#39;, &#39;.&#39;, &#39;:)&#39;] 18.2.4 nltk.tokenize.treebank.TreebankWordTokenizer().tokenize() Treebank assume input text is A sentence, hence any period combined with word is treated as token. from nltk.tokenize.treebank import TreebankWordTokenizer TreebankWordTokenizer().tokenize(&quot;hi @ali-baba, you are aweeeeeesome! isn&#39;t it. Believe it.:)&quot;) ## [&#39;hi&#39;, &#39;@&#39;, &#39;ali-baba&#39;, &#39;,&#39;, &#39;you&#39;, &#39;are&#39;, &#39;aweeeeeesome&#39;, &#39;!&#39;, &#39;is&#39;, &quot;n&#39;t&quot;, &#39;it.&#39;, &#39;Believe&#39;, &#39;it.&#39;, &#39;:&#39;, &#39;)&#39;] 18.2.5 Corpus Token Extractor A corpus is a collection of documents (list of documents). A document is a text string containing one or many sentences. from nltk.tokenize import word_tokenize from nlpia.data.loaders import harry_docs as corpus ## Tokenize each doc to list, then add to a bigger list doc_tokens=[] for doc in corpus: doc_tokens += [word_tokenize(doc.lower())] print(&#39;Corpus (Contain 3 Documents):\\n&#39;,corpus,&#39;\\n&#39;, &#39;\\nTokenized result for each document:&#39;,&#39;\\n&#39;,doc_tokens) ## Corpus (Contain 3 Documents): ## [&#39;The faster Harry got to the store, the faster and faster Harry would get home.&#39;, &#39;Harry is hairy and faster than Jill.&#39;, &#39;Jill is not as hairy as Harry.&#39;] ## ## Tokenized result for each document: ## [[&#39;the&#39;, &#39;faster&#39;, &#39;harry&#39;, &#39;got&#39;, &#39;to&#39;, &#39;the&#39;, &#39;store&#39;, &#39;,&#39;, &#39;the&#39;, &#39;faster&#39;, &#39;and&#39;, &#39;faster&#39;, &#39;harry&#39;, &#39;would&#39;, &#39;get&#39;, &#39;home&#39;, &#39;.&#39;], [&#39;harry&#39;, &#39;is&#39;, &#39;hairy&#39;, &#39;and&#39;, &#39;faster&#39;, &#39;than&#39;, &#39;jill&#39;, &#39;.&#39;], [&#39;jill&#39;, &#39;is&#39;, &#39;not&#39;, &#39;as&#39;, &#39;hairy&#39;, &#39;as&#39;, &#39;harry&#39;, &#39;.&#39;]] Unpack list of token lists from above using sum. To get the vocabulary (unique tokens), convert list to set. ## unpack list of list to list vocab = sum(doc_tokens,[]) print(&#39;\\nCorpus Vacabulary (Unique Tokens):\\n&#39;, sorted(set(corpus_tokens))) ## Error in py_call_impl(callable, dots$args, dots$keywords): NameError: name &#39;corpus_tokens&#39; is not defined ## ## Detailed traceback: ## File &quot;&lt;string&gt;&quot;, line 2, in &lt;module&gt; 18.3 Sentence Tokenizer 18.3.1 nltk.tokenize.sent_tokenize() #nltk.download(&#39;punkt&#39;) from nltk.tokenize import sent_tokenize text=&quot;&quot;&quot;\\ Hello Mr. Smith, how are you doing today? The weather is great, and city is awesome. The sky is pinkish-blue. You shouldn&#39;t eat cardboard &quot;&quot;&quot; tokenized_text=sent_tokenize(text) for x in tokenized_text: print(x) ## Hello Mr. Smith, how are you doing today? ## The weather is great, and city is awesome. ## The sky is pinkish-blue. ## You shouldn&#39;t eat cardboard 18.4 N-Gram To create n-gram, first create 1-gram token from nltk.util import ngrams import re sentence = &quot;Thomas Jefferson began building the city, at the age of 25&quot; pattern = re.compile(r&quot;[-\\s.,;!?]+&quot;) tokens = pattern.split(sentence) print(tokens) ## [&#39;Thomas&#39;, &#39;Jefferson&#39;, &#39;began&#39;, &#39;building&#39;, &#39;the&#39;, &#39;city&#39;, &#39;at&#39;, &#39;the&#39;, &#39;age&#39;, &#39;of&#39;, &#39;25&#39;] ngrams() is a generator, therefore, use list() to convert into full list ngrams(tokens,2) ## &lt;generator object ngrams at 0x000000000E5E5C00&gt; Convert 1-gram to 2-Gram, wrap into list grammy = list( ngrams(tokens,2) ) print(grammy) ## [(&#39;Thomas&#39;, &#39;Jefferson&#39;), (&#39;Jefferson&#39;, &#39;began&#39;), (&#39;began&#39;, &#39;building&#39;), (&#39;building&#39;, &#39;the&#39;), (&#39;the&#39;, &#39;city&#39;), (&#39;city&#39;, &#39;at&#39;), (&#39;at&#39;, &#39;the&#39;), (&#39;the&#39;, &#39;age&#39;), (&#39;age&#39;, &#39;of&#39;), (&#39;of&#39;, &#39;25&#39;)] Combine each 2-gram into a string object [ &quot; &quot;.join(x) for x in grammy] ## [&#39;Thomas Jefferson&#39;, &#39;Jefferson began&#39;, &#39;began building&#39;, &#39;building the&#39;, &#39;the city&#39;, &#39;city at&#39;, &#39;at the&#39;, &#39;the age&#39;, &#39;age of&#39;, &#39;of 25&#39;] 18.5 Stopwords 18.5.1 Custom Stop Words Build the custom stop words dictionary. stop_words = [&#39;a&#39;,&#39;an&#39;,&#39;the&#39;,&#39;on&#39;,&#39;of&#39;,&#39;off&#39;,&#39;this&#39;,&#39;is&#39;,&#39;at&#39;] Tokenize text and remove stop words sentence = &quot;The house is on fire&quot; tokens = word_tokenize(sentence) tokens_without_stopwords = [ x for x in tokens if x not in stop_words ] print(&#39; Original Tokens : &#39;, tokens, &#39;\\n&#39;, &#39;Removed Stopwords: &#39;,tokens_without_stopwords) ## Original Tokens : [&#39;The&#39;, &#39;house&#39;, &#39;is&#39;, &#39;on&#39;, &#39;fire&#39;] ## Removed Stopwords: [&#39;The&#39;, &#39;house&#39;, &#39;fire&#39;] 18.5.2 NLTK Stop Words Contain 179 words, in a list form import nltk #nltk.download(&#39;stopwords&#39;) nltk_stop_words = nltk.corpus.stopwords.words(&#39;english&#39;) print(&#39;Total NLTK Stopwords: &#39;, len(nltk_stop_words),&#39;\\n&#39;, nltk_stop_words) ## Total NLTK Stopwords: 179 ## [&#39;i&#39;, &#39;me&#39;, &#39;my&#39;, &#39;myself&#39;, &#39;we&#39;, &#39;our&#39;, &#39;ours&#39;, &#39;ourselves&#39;, &#39;you&#39;, &quot;you&#39;re&quot;, &quot;you&#39;ve&quot;, &quot;you&#39;ll&quot;, &quot;you&#39;d&quot;, &#39;your&#39;, &#39;yours&#39;, &#39;yourself&#39;, &#39;yourselves&#39;, &#39;he&#39;, &#39;him&#39;, &#39;his&#39;, &#39;himself&#39;, &#39;she&#39;, &quot;she&#39;s&quot;, &#39;her&#39;, &#39;hers&#39;, &#39;herself&#39;, &#39;it&#39;, &quot;it&#39;s&quot;, &#39;its&#39;, &#39;itself&#39;, &#39;they&#39;, &#39;them&#39;, &#39;their&#39;, &#39;theirs&#39;, &#39;themselves&#39;, &#39;what&#39;, &#39;which&#39;, &#39;who&#39;, &#39;whom&#39;, &#39;this&#39;, &#39;that&#39;, &quot;that&#39;ll&quot;, &#39;these&#39;, &#39;those&#39;, &#39;am&#39;, &#39;is&#39;, &#39;are&#39;, &#39;was&#39;, &#39;were&#39;, &#39;be&#39;, &#39;been&#39;, &#39;being&#39;, &#39;have&#39;, &#39;has&#39;, &#39;had&#39;, &#39;having&#39;, &#39;do&#39;, &#39;does&#39;, &#39;did&#39;, &#39;doing&#39;, &#39;a&#39;, &#39;an&#39;, &#39;the&#39;, &#39;and&#39;, &#39;but&#39;, &#39;if&#39;, &#39;or&#39;, &#39;because&#39;, &#39;as&#39;, &#39;until&#39;, &#39;while&#39;, &#39;of&#39;, &#39;at&#39;, &#39;by&#39;, &#39;for&#39;, &#39;with&#39;, &#39;about&#39;, &#39;against&#39;, &#39;between&#39;, &#39;into&#39;, &#39;through&#39;, &#39;during&#39;, &#39;before&#39;, &#39;after&#39;, &#39;above&#39;, &#39;below&#39;, &#39;to&#39;, &#39;from&#39;, &#39;up&#39;, &#39;down&#39;, &#39;in&#39;, &#39;out&#39;, &#39;on&#39;, &#39;off&#39;, &#39;over&#39;, &#39;under&#39;, &#39;again&#39;, &#39;further&#39;, &#39;then&#39;, &#39;once&#39;, &#39;here&#39;, &#39;there&#39;, &#39;when&#39;, &#39;where&#39;, &#39;why&#39;, &#39;how&#39;, &#39;all&#39;, &#39;any&#39;, &#39;both&#39;, &#39;each&#39;, &#39;few&#39;, &#39;more&#39;, &#39;most&#39;, &#39;other&#39;, &#39;some&#39;, &#39;such&#39;, &#39;no&#39;, &#39;nor&#39;, &#39;not&#39;, &#39;only&#39;, &#39;own&#39;, &#39;same&#39;, &#39;so&#39;, &#39;than&#39;, &#39;too&#39;, &#39;very&#39;, &#39;s&#39;, &#39;t&#39;, &#39;can&#39;, &#39;will&#39;, &#39;just&#39;, &#39;don&#39;, &quot;don&#39;t&quot;, &#39;should&#39;, &quot;should&#39;ve&quot;, &#39;now&#39;, &#39;d&#39;, &#39;ll&#39;, &#39;m&#39;, &#39;o&#39;, &#39;re&#39;, &#39;ve&#39;, &#39;y&#39;, &#39;ain&#39;, &#39;aren&#39;, &quot;aren&#39;t&quot;, &#39;couldn&#39;, &quot;couldn&#39;t&quot;, &#39;didn&#39;, &quot;didn&#39;t&quot;, &#39;doesn&#39;, &quot;doesn&#39;t&quot;, &#39;hadn&#39;, &quot;hadn&#39;t&quot;, &#39;hasn&#39;, &quot;hasn&#39;t&quot;, &#39;haven&#39;, &quot;haven&#39;t&quot;, &#39;isn&#39;, &quot;isn&#39;t&quot;, &#39;ma&#39;, &#39;mightn&#39;, &quot;mightn&#39;t&quot;, &#39;mustn&#39;, &quot;mustn&#39;t&quot;, &#39;needn&#39;, &quot;needn&#39;t&quot;, &#39;shan&#39;, &quot;shan&#39;t&quot;, &#39;shouldn&#39;, &quot;shouldn&#39;t&quot;, &#39;wasn&#39;, &quot;wasn&#39;t&quot;, &#39;weren&#39;, &quot;weren&#39;t&quot;, &#39;won&#39;, &quot;won&#39;t&quot;, &#39;wouldn&#39;, &quot;wouldn&#39;t&quot;] 18.5.3 SKLearn Stop Words Contain 318 stop words, in frozenset form from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS as sklearn_stop_words print(&#39; Total Sklearn Stopwords: &#39;, len(sklearn_stop_words),&#39;\\n\\n&#39;, sklearn_stop_words) ## Total Sklearn Stopwords: 318 ## ## frozenset({&#39;further&#39;, &#39;into&#39;, &#39;every&#39;, &#39;and&#39;, &#39;whom&#39;, &#39;then&#39;, &#39;who&#39;, &#39;perhaps&#39;, &#39;mill&#39;, &#39;thick&#39;, &#39;herein&#39;, &#39;we&#39;, &#39;why&#39;, &#39;most&#39;, &#39;nothing&#39;, &#39;several&#39;, &#39;themselves&#39;, &#39;behind&#39;, &#39;over&#39;, &#39;through&#39;, &#39;within&#39;, &#39;on&#39;, &#39;could&#39;, &#39;find&#39;, &#39;whether&#39;, &#39;therefore&#39;, &#39;it&#39;, &#39;none&#39;, &#39;my&#39;, &#39;forty&#39;, &#39;in&#39;, &#39;yet&#39;, &#39;cry&#39;, &#39;other&#39;, &#39;elsewhere&#39;, &#39;once&#39;, &#39;couldnt&#39;, &#39;also&#39;, &#39;whose&#39;, &#39;have&#39;, &#39;keep&#39;, &#39;somehow&#39;, &#39;anything&#39;, &#39;empty&#39;, &#39;beforehand&#39;, &#39;both&#39;, &#39;our&#39;, &#39;hereupon&#39;, &#39;sixty&#39;, &#39;throughout&#39;, &#39;describe&#39;, &#39;everyone&#39;, &#39;con&#39;, &#39;interest&#39;, &#39;you&#39;, &#39;few&#39;, &#39;one&#39;, &#39;to&#39;, &#39;beyond&#39;, &#39;five&#39;, &#39;somewhere&#39;, &#39;become&#39;, &#39;eight&#39;, &#39;something&#39;, &#39;because&#39;, &#39;before&#39;, &#39;since&#39;, &#39;thus&#39;, &#39;whereupon&#39;, &#39;had&#39;, &#39;whither&#39;, &#39;cant&#39;, &#39;three&#39;, &#39;than&#39;, &#39;she&#39;, &#39;amount&#39;, &#39;amoungst&#39;, &#39;ours&#39;, &#39;third&#39;, &#39;yours&#39;, &#39;between&#39;, &#39;former&#39;, &#39;still&#39;, &#39;beside&#39;, &#39;sometimes&#39;, &#39;such&#39;, &#39;herself&#39;, &#39;him&#39;, &#39;noone&#39;, &#39;should&#39;, &#39;will&#39;, &#39;not&#39;, &#39;may&#39;, &#39;two&#39;, &#39;mostly&#39;, &#39;almost&#39;, &#39;everywhere&#39;, &#39;from&#39;, &#39;by&#39;, &#39;himself&#39;, &#39;becoming&#39;, &#39;fill&#39;, &#39;system&#39;, &#39;hasnt&#39;, &#39;which&#39;, &#39;during&#39;, &#39;again&#39;, &#39;others&#39;, &#39;formerly&#39;, &#39;go&#39;, &#39;due&#39;, &#39;yourselves&#39;, &#39;put&#39;, &#39;there&#39;, &#39;although&#39;, &#39;nine&#39;, &#39;hence&#39;, &#39;do&#39;, &#39;found&#39;, &#39;done&#39;, &#39;made&#39;, &#39;her&#39;, &#39;twenty&#39;, &#39;these&#39;, &#39;give&#39;, &#39;for&#39;, &#39;call&#39;, &#39;namely&#39;, &#39;are&#39;, &#39;thereupon&#39;, &#39;whenever&#39;, &#39;bottom&#39;, &#39;would&#39;, &#39;if&#39;, &#39;another&#39;, &#39;your&#39;, &#39;latterly&#39;, &#39;however&#39;, &#39;show&#39;, &#39;except&#39;, &#39;or&#39;, &#39;de&#39;, &#39;therein&#39;, &#39;no&#39;, &#39;were&#39;, &#39;itself&#39;, &#39;whereby&#39;, &#39;onto&#39;, &#39;wherever&#39;, &#39;see&#39;, &#39;whereafter&#39;, &#39;neither&#39;, &#39;each&#39;, &#39;off&#39;, &#39;seemed&#39;, &#39;four&#39;, &#39;us&#39;, &#39;meanwhile&#39;, &#39;sincere&#39;, &#39;ltd&#39;, &#39;too&#39;, &#39;anywhere&#39;, &#39;next&#39;, &#39;otherwise&#39;, &#39;what&#39;, &#39;enough&#39;, &#39;amongst&#39;, &#39;hundred&#39;, &#39;many&#39;, &#39;his&#39;, &#39;bill&#39;, &#39;ever&#39;, &#39;anyway&#39;, &#39;eleven&#39;, &#39;at&#39;, &#39;often&#39;, &#39;above&#39;, &#39;full&#39;, &#39;everything&#39;, &#39;here&#39;, &#39;indeed&#39;, &#39;eg&#39;, &#39;its&#39;, &#39;nevertheless&#39;, &#39;via&#39;, &#39;own&#39;, &#39;am&#39;, &#39;always&#39;, &#39;anyone&#39;, &#39;thereby&#39;, &#39;along&#39;, &#39;with&#39;, &#39;wherein&#39;, &#39;some&#39;, &#39;anyhow&#39;, &#39;a&#39;, &#39;now&#39;, &#39;fifty&#39;, &#39;without&#39;, &#39;etc&#39;, &#39;around&#39;, &#39;the&#39;, &#39;up&#39;, &#39;someone&#39;, &#39;thence&#39;, &#39;whoever&#39;, &#39;among&#39;, &#39;else&#39;, &#39;inc&#39;, &#39;side&#39;, &#39;yourself&#39;, &#39;towards&#39;, &#39;per&#39;, &#39;thin&#39;, &#39;any&#39;, &#39;take&#39;, &#39;so&#39;, &#39;ie&#39;, &#39;all&#39;, &#39;after&#39;, &#39;toward&#39;, &#39;already&#39;, &#39;seem&#39;, &#39;an&#39;, &#39;serious&#39;, &#39;when&#39;, &#39;about&#39;, &#39;latter&#39;, &#39;moreover&#39;, &#39;across&#39;, &#39;hereby&#39;, &#39;though&#39;, &#39;whence&#39;, &#39;front&#39;, &#39;thereafter&#39;, &#39;myself&#39;, &#39;them&#39;, &#39;get&#39;, &#39;top&#39;, &#39;being&#39;, &#39;until&#39;, &#39;how&#39;, &#39;rather&#39;, &#39;i&#39;, &#39;of&#39;, &#39;move&#39;, &#39;less&#39;, &#39;while&#39;, &#39;together&#39;, &#39;out&#39;, &#39;must&#39;, &#39;twelve&#39;, &#39;as&#39;, &#39;hereafter&#39;, &#39;sometime&#39;, &#39;under&#39;, &#39;ten&#39;, &#39;thru&#39;, &#39;whatever&#39;, &#39;besides&#39;, &#39;six&#39;, &#39;they&#39;, &#39;hers&#39;, &#39;fire&#39;, &#39;becomes&#39;, &#39;name&#39;, &#39;much&#39;, &#39;same&#39;, &#39;well&#39;, &#39;back&#39;, &#39;can&#39;, &#39;more&#39;, &#39;that&#39;, &#39;first&#39;, &#39;either&#39;, &#39;below&#39;, &#39;very&#39;, &#39;he&#39;, &#39;cannot&#39;, &#39;might&#39;, &#39;is&#39;, &#39;ourselves&#39;, &#39;fifteen&#39;, &#39;me&#39;, &#39;but&#39;, &#39;afterwards&#39;, &#39;those&#39;, &#39;been&#39;, &#39;against&#39;, &#39;seems&#39;, &#39;upon&#39;, &#39;re&#39;, &#39;detail&#39;, &#39;where&#39;, &#39;least&#39;, &#39;nor&#39;, &#39;nowhere&#39;, &#39;whereas&#39;, &#39;this&#39;, &#39;part&#39;, &#39;was&#39;, &#39;be&#39;, &#39;down&#39;, &#39;never&#39;, &#39;alone&#39;, &#39;mine&#39;, &#39;only&#39;, &#39;whole&#39;, &#39;co&#39;, &#39;please&#39;, &#39;un&#39;, &#39;has&#39;, &#39;became&#39;, &#39;nobody&#39;, &#39;last&#39;, &#39;even&#39;, &#39;their&#39;, &#39;seeming&#39;}) 18.5.4 Combined NLTK and SKLearn Stop Words combined_stop_words = list( set(nltk_stop_words) | set(sklearn_stop_words) ) print(&#39;Total combined NLTK and SKLearn Stopwords:&#39;, len( combined_stop_words ),&#39;\\n&#39; &#39;Stopwords shared among NLTK and SKlearn :&#39;, len( list( set(nltk_stop_words) &amp; set(sklearn_stop_words)) )) ## Total combined NLTK and SKLearn Stopwords: 378 ## Stopwords shared among NLTK and SKlearn : 119 18.6 Normalizing Similar things are combined into single normalized form. This will reduced the vocabulary. 18.6.1 Case Folding If tokens aren’t cap normalized, you will end up with large word list. However, some information is often communicated by capitalization of word, such as name of places. If names are important, consider using proper noun. tokens = [&#39;House&#39;,&#39;Visitor&#39;,&#39;Center&#39;] [ x.lower() for x in tokens] ## [&#39;house&#39;, &#39;visitor&#39;, &#39;center&#39;] 18.6.2 Stemming Output of a stemmer is not necessary a proper word Automatically convert words to lower cap Porter stemmer is a lifetime refinement with 300 lines of python code Stemming is faster then Lemmatization from nltk.stem.porter import PorterStemmer stemmer = PorterStemmer() tokens = (&#39;house&#39;,&#39;Housing&#39;,&#39;hOuses&#39;, &#39;Malicious&#39;,&#39;goodness&#39;) [stemmer.stem(x) for x in tokens ] ## [&#39;hous&#39;, &#39;hous&#39;, &#39;hous&#39;, &#39;malici&#39;, &#39;good&#39;] 18.6.3 Lemmatization NLTK uses connections within princeton WordNet graph for word meanings. #nltk.download(&#39;wordnet&#39;) from nltk.stem import WordNetLemmatizer lemmatizer = WordNetLemmatizer() print( lemmatizer.lemmatize(&quot;better&quot;, pos =&#39;a&#39;), &#39;\\n&#39;, lemmatizer.lemmatize(&quot;better&quot;, pos =&#39;n&#39;) ) ## good ## better print( lemmatizer.lemmatize(&quot;good&quot;, pos =&#39;a&#39;), &#39;\\n&#39;, lemmatizer.lemmatize(&quot;good&quot;, pos =&#39;n&#39;) ) ## good ## good 18.6.4 Comparing Stemming and Lemmatization Lemmatization is slower than stemming = Lemmatization is better at retaining meanings Lemmatization produce valid english word Stemming not necessary produce valid english word Both reduce vocabulary size, but increase ambiguity For search engine application, stemming and lemmatization will improve recall as it associate more documents with the same query words, however with the cost of reducing precision and accuracy. For search-based chatbot where accuracy is more important, it should first search with unnormalzied words. 18.7 POS Tagging The primary target of Part-of-Speech(POS) tagging is to identify the grammatical group of a given word. Whether it is a NOUN, PRONOUN, ADJECTIVE, VERB, ADVERBS, etc. based on the context. Tagging works sentence by sentence. - Document fist must be splitted into sentences - Each sentence need to be tokenized into words #nltk.download(&#39;averaged_perceptron_tagger&#39;) sentence = &quot;Albert Einstein was born in Ulm, Germany in 1879.&quot; tokens = nltk.word_tokenize(sentence) tags = nltk.pos_tag(tokens) print(&#39;Tokens:\\n&#39;, tokens, &#39;\\n\\n&#39;, &#39;Tags:\\n&#39;, tags) ## Tokens: ## [&#39;Albert&#39;, &#39;Einstein&#39;, &#39;was&#39;, &#39;born&#39;, &#39;in&#39;, &#39;Ulm&#39;, &#39;,&#39;, &#39;Germany&#39;, &#39;in&#39;, &#39;1879&#39;, &#39;.&#39;] ## ## Tags: ## [(&#39;Albert&#39;, &#39;NNP&#39;), (&#39;Einstein&#39;, &#39;NNP&#39;), (&#39;was&#39;, &#39;VBD&#39;), (&#39;born&#39;, &#39;VBN&#39;), (&#39;in&#39;, &#39;IN&#39;), (&#39;Ulm&#39;, &#39;NNP&#39;), (&#39;,&#39;, &#39;,&#39;), (&#39;Germany&#39;, &#39;NNP&#39;), (&#39;in&#39;, &#39;IN&#39;), (&#39;1879&#39;, &#39;CD&#39;), (&#39;.&#39;, &#39;.&#39;)] 18.8 Sentiment 18.8.1 Vader It is a rule based sentiment analyzer, contain 7503 lexicons It is good for social media because lexicon contain emoji and short form text Contain only 3 n-gram 18.8.1.1 Vader Lexicon The lexicon is a dictionary. To make it iterable, need to convert into list: - Step 1: Convert dict to dict_items, which is a list containing items, each item is one dict - Step 2: Unpack dict_items to list from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer vader_lex = SentimentIntensityAnalyzer().lexicon # get the lexicon dictionary vader_list = list(vader_lex.items()) # convert to items then list print( &#39;Total Vader Lexicon:&#39;, len(vader_lex),&#39;\\n&#39;, vader_list[1:10], vader_list[220:240] ) ## Total Vader Lexicon: 7503 ## [(&#39;%)&#39;, -0.4), (&#39;%-)&#39;, -1.5), (&#39;&amp;-:&#39;, -0.4), (&#39;&amp;:&#39;, -0.7), (&quot;( &#39;}{&#39; )&quot;, 1.6), (&#39;(%&#39;, -0.9), (&quot;(&#39;-:&quot;, 2.2), (&quot;(&#39;:&quot;, 2.3), (&#39;((-:&#39;, 2.1)] [(&#39;bz&#39;, 0.4), (&#39;b^d&#39;, 2.6), (&#39;cwot&#39;, -2.3), (&quot;d-&#39;:&quot;, -2.5), (&#39;d8&#39;, -3.2), (&#39;d:&#39;, 1.2), (&#39;d:&lt;&#39;, -3.2), (&#39;d;&#39;, -2.9), (&#39;d=&#39;, 1.5), (&#39;doa&#39;, -2.3), (&#39;dx&#39;, -3.0), (&#39;ez&#39;, 1.5), (&#39;fav&#39;, 2.0), (&#39;fcol&#39;, -1.8), (&#39;ff&#39;, 1.8), (&#39;ffs&#39;, -2.8), (&#39;fkm&#39;, -2.4), (&#39;foaf&#39;, 1.8), (&#39;ftw&#39;, 2.0), (&#39;fu&#39;, -3.7)] There is only four N-Gram in the lexicon print(&#39;List of N-grams: &#39;) ## List of N-grams: [ (tok,score) for tok, score in vader_list if &quot; &quot; in tok] ## [(&quot;( &#39;}{&#39; )&quot;, 1.6), (&quot;can&#39;t stand&quot;, -2.0), (&#39;fed up&#39;, -1.8), (&#39;screwed up&#39;, -1.5)] If stemming or lemmatization is used, stem/lemmatize the vader lexicon too [ (tok,score) for tok, score in vader_list if &quot;lov&quot; in tok] ## [(&#39;beloved&#39;, 2.3), (&#39;lovable&#39;, 3.0), (&#39;love&#39;, 3.2), (&#39;loved&#39;, 2.9), (&#39;lovelies&#39;, 2.2), (&#39;lovely&#39;, 2.8), (&#39;lover&#39;, 2.8), (&#39;loverly&#39;, 2.8), (&#39;lovers&#39;, 2.4), (&#39;loves&#39;, 2.7), (&#39;loving&#39;, 2.9), (&#39;lovingly&#39;, 3.2), (&#39;lovingness&#39;, 2.7), (&#39;unlovable&#39;, -2.7), (&#39;unloved&#39;, -1.9), (&#39;unlovelier&#39;, -1.9), (&#39;unloveliest&#39;, -1.9), (&#39;unloveliness&#39;, -2.0), (&#39;unlovely&#39;, -2.1), (&#39;unloving&#39;, -2.3)] 18.8.1.2 Polarity Scoring Scoring result is a dictionary of: neg neu pos compound neg, neu, pos adds up to 1.0 Example below shows polarity for two sentences: corpus = [&quot;Python is a very useful but hell difficult to learn&quot;, &quot;:) :) :(&quot;] for doc in corpus: print(doc, &#39;--&gt;&#39;, &quot;\\n:&quot;, SentimentIntensityAnalyzer().polarity_scores(doc) ) ## Python is a very useful but hell difficult to learn --&gt; ## : {&#39;neg&#39;: 0.554, &#39;neu&#39;: 0.331, &#39;pos&#39;: 0.116, &#39;compound&#39;: -0.8735} ## :) :) :( --&gt; ## : {&#39;neg&#39;: 0.326, &#39;neu&#39;: 0.0, &#39;pos&#39;: 0.674, &#39;compound&#39;: 0.4767} 18.8.2 SentiWordNet 18.9 Feature Representation 18.9.1 The Data A corpus is a collection of multiple documents. In the below example, each document is represented by a sentence. corpus = [ &#39;This is the first document, :)&#39;, &#39;This document is the second document.&#39;, &#39;And this is a third one&#39;, &#39;Is this the first document?&#39;, ] 18.9.2 Frequency Count Using purely frequency count as a feature will obviously bias on long document (which contain a lot of words, hence words within the document will have very high frequency). 18.9.2.1 + Tokenizer Default Tokenizer By default, vectorizer apply tokenizer to select minimum 2-chars alphanumeric words. Below train the vectorizer using fit_transform(). from sklearn.feature_extraction.text import CountVectorizer vec = CountVectorizer() # initialize the vectorizer X = vec.fit_transform(corpus) # FIT the vectorizer, return fitted data print(pd.DataFrame(X.toarray(), columns=vec.get_feature_names()),&#39;\\n\\n&#39;, &#39;Vocabulary: &#39;, vec.vocabulary_) ## and document first is one second the third this ## 0 0 1 1 1 0 0 1 0 1 ## 1 0 2 0 1 0 1 1 0 1 ## 2 1 0 0 1 1 0 0 1 1 ## 3 0 1 1 1 0 0 1 0 1 ## ## Vocabulary: {&#39;this&#39;: 8, &#39;is&#39;: 3, &#39;the&#39;: 6, &#39;first&#39;: 2, &#39;document&#39;: 1, &#39;second&#39;: 5, &#39;and&#39;: 0, &#39;third&#39;: 7, &#39;one&#39;: 4} Custom Tokenizer You can use a custom tokenizer, which is a function that return list of words. Example below uses nltk RegexpTokenizer function, which retains one or more alphanumeric characters. my_tokenizer = RegexpTokenizer(r&#39;[a-zA-Z0-9\\&#39;]+&#39;) ## Custom Tokenizer vec2 = CountVectorizer(tokenizer=my_tokenizer.tokenize) ## custom tokenizer&#39;s function X2 = vec2.fit_transform(corpus) # FIT the vectorizer, return fitted data print(pd.DataFrame(X2.toarray(), columns=vec2.get_feature_names()),&#39;\\n\\n&#39;, &#39;Vocabulary: &#39;, vec.vocabulary_) ## a and document first is one second the third this ## 0 0 0 1 1 1 0 0 1 0 1 ## 1 0 0 2 0 1 0 1 1 0 1 ## 2 1 1 0 0 1 1 0 0 1 1 ## 3 0 0 1 1 1 0 0 1 0 1 ## ## Vocabulary: {&#39;this&#39;: 8, &#39;is&#39;: 3, &#39;the&#39;: 6, &#39;first&#39;: 2, &#39;document&#39;: 1, &#39;second&#39;: 5, &#39;and&#39;: 0, &#39;third&#39;: 7, &#39;one&#39;: 4} 1 and 2-Word-Gram Tokenizer Use ngram_range() to specify range of grams needed. vec3 = CountVectorizer(ngram_range=(1,2)) # initialize the vectorizer X3 = vec3.fit_transform(corpus) # FIT the vectorizer, return fitted data print(pd.DataFrame(X3.toarray(), columns=vec3.get_feature_names()),&#39;\\n\\n&#39;, &#39;Vocabulary: &#39;, vec.vocabulary_) ## and and this document document is first ... third one this \\ ## 0 0 0 1 0 1 ... 0 1 ## 1 0 0 2 1 0 ... 0 1 ## 2 1 1 0 0 0 ... 1 1 ## 3 0 0 1 0 1 ... 0 1 ## ## this document this is this the ## 0 0 1 0 ## 1 1 0 0 ## 2 0 1 0 ## 3 0 0 1 ## ## [4 rows x 22 columns] ## ## Vocabulary: {&#39;this&#39;: 8, &#39;is&#39;: 3, &#39;the&#39;: 6, &#39;first&#39;: 2, &#39;document&#39;: 1, &#39;second&#39;: 5, &#39;and&#39;: 0, &#39;third&#39;: 7, &#39;one&#39;: 4} Apply Trained Vectorizer Once the vectorizer had been trained, you can apply them on new corpus. Tokens not in the vectorizer vocubulary are ignored. new_corpus = [&quot;My Name is Charlie Angel&quot;, &quot;I love to watch Star Wars&quot;] XX = vec.transform(new_corpus) pd.DataFrame(XX.toarray(), columns=vec.get_feature_names()) ## and document first is one second the third this ## 0 0 0 0 1 0 0 0 0 0 ## 1 0 0 0 0 0 0 0 0 0 18.9.2.2 + Stop Words Vectorizer can optionally be use with stop words list. Use stop_words=english to apply filtering using sklearn built-in stop word. You can replace english with other word list object. vec4 = CountVectorizer(stop_words=&#39;english&#39;) ## sklearn stopwords list X4 = vec4.fit_transform(corpus) pd.DataFrame(X4.toarray(), columns=vec4.get_feature_names()) ## document second ## 0 1 0 ## 1 2 1 ## 2 0 0 ## 3 1 0 18.9.3 TFIDF 18.9.3.1 Equation \\[tf(t,d) = \\text{occurances of term t in document t} \\\\ n = \\text{number of documents} \\\\ df(t) = \\text{number of documents containing term t} \\\\ idf(t) = log \\frac{n}{df(t))} + 1 \\\\ idf(t) = log \\frac{1+n}{1+df(t))} + 1 \\text{.... smoothing, prevent zero division} \\\\ tfidf(t) = tf(t) * idf(t,d) \\text{.... raw, no normalization on tf(t)} \\\\ tfidf(t) = \\frac{tf(t,d)}{||V||_2} * idf(t) \\text{.... tf normalized with euclidean norm}\\] 18.9.3.2 TfidfTransformer To generate TFIDF vectors, first run CountVectorizer to get frequency vector matrix. Then take the output into this transformer. from sklearn.feature_extraction.text import TfidfTransformer corpus = [ &quot;apple apple apple apple apple banana&quot;, &quot;apple apple&quot;, &quot;apple apple apple banana&quot;, &quot;durian durian durian&quot;] count_vec = CountVectorizer() X = count_vec.fit_transform(corpus) transformer1 = TfidfTransformer(smooth_idf=False,norm=None) transformer2 = TfidfTransformer(smooth_idf=False,norm=&#39;l2&#39;) transformer3 = TfidfTransformer(smooth_idf=True,norm=&#39;l2&#39;) tfidf1 = transformer1.fit_transform(X) tfidf2 = transformer2.fit_transform(X) tfidf3 = transformer3.fit_transform(X) print( &#39;Frequency Count: \\n&#39;, pd.DataFrame(X.toarray(), columns=count_vec.get_feature_names()), &#39;\\n\\nVocabulary: &#39;, count_vec.vocabulary_, &#39;\\n\\nTFIDF Without Norm:\\n&#39;,tfidf1.toarray(), &#39;\\n\\nTFIDF with L2 Norm:\\n&#39;,tfidf2.toarray(), &#39;\\n\\nTFIDF with L2 Norm (smooth):\\n&#39;,tfidf3.toarray()) ## Frequency Count: ## apple banana durian ## 0 5 1 0 ## 1 2 0 0 ## 2 3 1 0 ## 3 0 0 3 ## ## Vocabulary: {&#39;apple&#39;: 0, &#39;banana&#39;: 1, &#39;durian&#39;: 2} ## ## TFIDF Without Norm: ## [[6.43841036 1.69314718 0. ] ## [2.57536414 0. 0. ] ## [3.86304622 1.69314718 0. ] ## [0. 0. 7.15888308]] ## ## TFIDF with L2 Norm: ## [[0.96711783 0.25432874 0. ] ## [1. 0. 0. ] ## [0.91589033 0.40142857 0. ] ## [0. 0. 1. ]] ## ## TFIDF with L2 Norm (smooth): ## [[0.97081492 0.23982991 0. ] ## [1. 0. 0. ] ## [0.92468843 0.38072472 0. ] ## [0. 0. 1. ]] 18.9.3.3 TfidfVectorizer This vectorizer gives end to end processing from corpus into TFIDF vector matrix, including tokenization, stopwords. from sklearn.feature_extraction.text import TfidfVectorizer my_tokenizer = RegexpTokenizer(r&#39;[a-zA-Z0-9\\&#39;]+&#39;) ## Custom Tokenizer vec1 = TfidfVectorizer(tokenizer=my_tokenizer.tokenize, stop_words=&#39;english&#39;) #default smooth_idf=True, norm=&#39;l2&#39; vec2 = TfidfVectorizer(tokenizer=my_tokenizer.tokenize, stop_words=&#39;english&#39;,smooth_idf=False) vec3 = TfidfVectorizer(tokenizer=my_tokenizer.tokenize, stop_words=&#39;english&#39;, norm=None) X1 = vec1.fit_transform(corpus) # FIT the vectorizer, return fitted data X2 = vec2.fit_transform(corpus) # FIT the vectorizer, return fitted data X3 = vec3.fit_transform(corpus) # FIT the vectorizer, return fitted data print( &#39;TFIDF Features (Default with Smooth and L2 Norm):\\n&#39;, pd.DataFrame(X1.toarray().round(3), columns=vec1.get_feature_names()), &#39;\\n\\nTFIDF Features (without Smoothing):\\n&#39;, pd.DataFrame(X2.toarray().round(3), columns=vec2.get_feature_names()), &#39;\\n\\nTFIDF Features (without L2 Norm):\\n&#39;, pd.DataFrame(X3.toarray().round(3), columns=vec3.get_feature_names()) ) ## TFIDF Features (Default with Smooth and L2 Norm): ## apple banana durian ## 0 0.971 0.240 0.0 ## 1 1.000 0.000 0.0 ## 2 0.925 0.381 0.0 ## 3 0.000 0.000 1.0 ## ## TFIDF Features (without Smoothing): ## apple banana durian ## 0 0.967 0.254 0.0 ## 1 1.000 0.000 0.0 ## 2 0.916 0.401 0.0 ## 3 0.000 0.000 1.0 ## ## TFIDF Features (without L2 Norm): ## apple banana durian ## 0 6.116 1.511 0.000 ## 1 2.446 0.000 0.000 ## 2 3.669 1.511 0.000 ## 3 0.000 0.000 5.749 18.10 Appliction 18.10.1 Document Similarity Document1 and Document 2 are mutiplicate of Document0, therefore their consine similarity is the same. documents = ( &quot;apple apple banana&quot;, &quot;apple apple banana apple apple banana&quot;, &quot;apple apple banana apple apple banana apple apple banana&quot;) from sklearn.feature_extraction.text import TfidfVectorizer tfidf_vec = TfidfVectorizer() tfidf_matrix = tfidf_vec.fit_transform(documents) from sklearn.metrics.pairwise import cosine_similarity print(&#39;Cosine Similarity betwen doc0 and doc1:\\n&#39;,cosine_similarity(tfidf_matrix[0], tfidf_matrix[1])) ## Cosine Similarity betwen doc0 and doc1: ## [[1.]] print(&#39;Cosine Similarity betwen doc1 and doc2:\\n&#39;,cosine_similarity(tfidf_matrix[1], tfidf_matrix[2])) ## Cosine Similarity betwen doc1 and doc2: ## [[1.]] print(&#39;Cosine Similarity betwen doc1 and doc2:\\n&#39;,cosine_similarity(tfidf_matrix[0], tfidf_matrix[2])) ## Cosine Similarity betwen doc1 and doc2: ## [[1.]] 18.11 Naive Bayes 18.11.1 Libraries from nlpia.data.loaders import get_data from nltk.tokenize.casual import casual_tokenize from collections import Counter 18.11.2 The Data movies = get_data(&#39;hutto_movies&#39;) # download data ## INFO:nlpia.futil:Reading CSV with `read_csv(*(&#39;C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\nlpia\\\\data\\\\hutto_ICWSM_2014/movieReviewSnippets_GroundTruth.csv.gz&#39;,), **{&#39;nrows&#39;: None, &#39;low_memory&#39;: False})`... print(movies.head(), &#39;\\n\\n&#39;, movies.describe()) ## sentiment text ## id ## 1 2.266667 The Rock is destined to be the 21st Century&#39;s ... ## 2 3.533333 The gorgeously elaborate continuation of &#39;&#39;The... ## 3 -0.600000 Effective but too tepid biopic ## 4 1.466667 If you sometimes like to go to the movies to h... ## 5 1.733333 Emerges as something rare, an issue movie that... ## ## sentiment ## count 10605.000000 ## mean 0.004831 ## std 1.922050 ## min -3.875000 ## 25% -1.769231 ## 50% -0.080000 ## 75% 1.833333 ## max 3.941176 18.11.3 Bag of Words Tokenize each record, remove single character token, then convert into list of counters (words-frequency pair). Each item in the list is a counter, which represent word frequency within the record bag_of_words = [] for text in movies.text: tokens = casual_tokenize(text, reduce_len=True, strip_handles=True) # tokenize tokens = [x for x in tokens if len(x)&gt;1] ## remove single char token bag_of_words.append( Counter(tokens, strip_handles=True) ## add to our BoW ) unique_words = list( set([ y for x in bag_of_words for y in x.keys()]) ) print(&quot;Total Rows: &quot;, len(bag_of_words),&#39;\\n\\n&#39;, &#39;Row 1 BoW: &#39;,bag_of_words[:1],&#39;\\n\\n&#39;, # see the first two records &#39;Row 2 BoW: &#39;, bag_of_words[:2], &#39;\\n\\n&#39;, &#39;Total Unique Words: &#39;, len(unique_words)) ## Total Rows: 10605 ## ## Row 1 BoW: [Counter({&#39;to&#39;: 2, &#39;The&#39;: 1, &#39;Rock&#39;: 1, &#39;is&#39;: 1, &#39;destined&#39;: 1, &#39;be&#39;: 1, &#39;the&#39;: 1, &#39;21st&#39;: 1, &quot;Century&#39;s&quot;: 1, &#39;new&#39;: 1, &#39;Conan&#39;: 1, &#39;and&#39;: 1, &#39;that&#39;: 1, &quot;he&#39;s&quot;: 1, &#39;going&#39;: 1, &#39;make&#39;: 1, &#39;splash&#39;: 1, &#39;even&#39;: 1, &#39;greater&#39;: 1, &#39;than&#39;: 1, &#39;Arnold&#39;: 1, &#39;Schwarzenegger&#39;: 1, &#39;Jean&#39;: 1, &#39;Claud&#39;: 1, &#39;Van&#39;: 1, &#39;Damme&#39;: 1, &#39;or&#39;: 1, &#39;Steven&#39;: 1, &#39;Segal&#39;: 1, &#39;strip_handles&#39;: 1})] ## ## Row 2 BoW: [Counter({&#39;to&#39;: 2, &#39;The&#39;: 1, &#39;Rock&#39;: 1, &#39;is&#39;: 1, &#39;destined&#39;: 1, &#39;be&#39;: 1, &#39;the&#39;: 1, &#39;21st&#39;: 1, &quot;Century&#39;s&quot;: 1, &#39;new&#39;: 1, &#39;Conan&#39;: 1, &#39;and&#39;: 1, &#39;that&#39;: 1, &quot;he&#39;s&quot;: 1, &#39;going&#39;: 1, &#39;make&#39;: 1, &#39;splash&#39;: 1, &#39;even&#39;: 1, &#39;greater&#39;: 1, &#39;than&#39;: 1, &#39;Arnold&#39;: 1, &#39;Schwarzenegger&#39;: 1, &#39;Jean&#39;: 1, &#39;Claud&#39;: 1, &#39;Van&#39;: 1, &#39;Damme&#39;: 1, &#39;or&#39;: 1, &#39;Steven&#39;: 1, &#39;Segal&#39;: 1, &#39;strip_handles&#39;: 1}), Counter({&#39;of&#39;: 4, &#39;The&#39;: 2, &#39;gorgeously&#39;: 1, &#39;elaborate&#39;: 1, &#39;continuation&#39;: 1, &#39;Lord&#39;: 1, &#39;the&#39;: 1, &#39;Rings&#39;: 1, &#39;trilogy&#39;: 1, &#39;is&#39;: 1, &#39;so&#39;: 1, &#39;huge&#39;: 1, &#39;that&#39;: 1, &#39;column&#39;: 1, &#39;words&#39;: 1, &#39;cannot&#39;: 1, &#39;adequately&#39;: 1, &#39;describe&#39;: 1, &#39;co&#39;: 1, &#39;writer&#39;: 1, &#39;director&#39;: 1, &#39;Peter&#39;: 1, &quot;Jackson&#39;s&quot;: 1, &#39;expanded&#39;: 1, &#39;vision&#39;: 1, &quot;Tolkien&#39;s&quot;: 1, &#39;Middle&#39;: 1, &#39;earth&#39;: 1, &#39;strip_handles&#39;: 1})] ## ## Total Unique Words: 20686 Convert NaN into 0 then all features into integer bows_df = pd.DataFrame.from_records(bag_of_words) bows_df = bows_df.fillna(0).astype(int) # replace NaN with 0, change to integer bows_df.head() ## . ... .. ... 007 1.2 ... zombies zone zoning zzz élan ## 0 0 0 0 0 0 ... 0 0 0 0 0 ## 1 0 0 0 0 0 ... 0 0 0 0 0 ## 2 0 0 0 0 0 ... 0 0 0 0 0 ## 3 0 0 0 0 0 ... 0 0 0 0 0 ## 4 0 0 0 0 0 ... 0 0 0 0 0 ## ## [5 rows x 20686 columns] 18.11.4 Build The Model from sklearn.naive_bayes import MultinomialNB train_y = movies.sentiment&gt;0 # label train_X = bows_df # features nb_model = MultinomialNB().fit( train_X, train_y) 18.11.5 Train Set Prediction First, make a prediction on training data, then compare to ground truth. train_predicted = nb_model.predict(bows_df) print(&quot;Accuracy: &quot;, np.mean(train_predicted==train_y).round(4)) ## Accuracy: 0.9357 "]
]
